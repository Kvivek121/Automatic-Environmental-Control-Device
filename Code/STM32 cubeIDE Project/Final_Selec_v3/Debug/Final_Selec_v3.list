
Final_Selec_v3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008cb4  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003a0  08008dc8  08008dc8  00018dc8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009168  08009168  00020090  2**0
                  CONTENTS
  4 .ARM          00000008  08009168  08009168  00019168  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009170  08009170  00020090  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009170  08009170  00019170  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009174  08009174  00019174  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000090  20000000  08009178  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000198  20000090  08009208  00020090  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000228  08009208  00020228  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020090  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000f167  00000000  00000000  000200b9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000246d  00000000  00000000  0002f220  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001000  00000000  00000000  00031690  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000f00  00000000  00000000  00032690  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00019890  00000000  00000000  00033590  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000126ab  00000000  00000000  0004ce20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008e8e5  00000000  00000000  0005f4cb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000eddb0  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005950  00000000  00000000  000ede00  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000090 	.word	0x20000090
 800012c:	00000000 	.word	0x00000000
 8000130:	08008dac 	.word	0x08008dac

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000094 	.word	0x20000094
 800014c:	08008dac 	.word	0x08008dac

08000150 <__aeabi_drsub>:
 8000150:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000154:	e002      	b.n	800015c <__adddf3>
 8000156:	bf00      	nop

08000158 <__aeabi_dsub>:
 8000158:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800015c <__adddf3>:
 800015c:	b530      	push	{r4, r5, lr}
 800015e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000162:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000166:	ea94 0f05 	teq	r4, r5
 800016a:	bf08      	it	eq
 800016c:	ea90 0f02 	teqeq	r0, r2
 8000170:	bf1f      	itttt	ne
 8000172:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000176:	ea55 0c02 	orrsne.w	ip, r5, r2
 800017a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800017e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000182:	f000 80e2 	beq.w	800034a <__adddf3+0x1ee>
 8000186:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800018a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800018e:	bfb8      	it	lt
 8000190:	426d      	neglt	r5, r5
 8000192:	dd0c      	ble.n	80001ae <__adddf3+0x52>
 8000194:	442c      	add	r4, r5
 8000196:	ea80 0202 	eor.w	r2, r0, r2
 800019a:	ea81 0303 	eor.w	r3, r1, r3
 800019e:	ea82 0000 	eor.w	r0, r2, r0
 80001a2:	ea83 0101 	eor.w	r1, r3, r1
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	2d36      	cmp	r5, #54	; 0x36
 80001b0:	bf88      	it	hi
 80001b2:	bd30      	pophi	{r4, r5, pc}
 80001b4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001bc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001c0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001c4:	d002      	beq.n	80001cc <__adddf3+0x70>
 80001c6:	4240      	negs	r0, r0
 80001c8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001cc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001d4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001d8:	d002      	beq.n	80001e0 <__adddf3+0x84>
 80001da:	4252      	negs	r2, r2
 80001dc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001e0:	ea94 0f05 	teq	r4, r5
 80001e4:	f000 80a7 	beq.w	8000336 <__adddf3+0x1da>
 80001e8:	f1a4 0401 	sub.w	r4, r4, #1
 80001ec:	f1d5 0e20 	rsbs	lr, r5, #32
 80001f0:	db0d      	blt.n	800020e <__adddf3+0xb2>
 80001f2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80001f6:	fa22 f205 	lsr.w	r2, r2, r5
 80001fa:	1880      	adds	r0, r0, r2
 80001fc:	f141 0100 	adc.w	r1, r1, #0
 8000200:	fa03 f20e 	lsl.w	r2, r3, lr
 8000204:	1880      	adds	r0, r0, r2
 8000206:	fa43 f305 	asr.w	r3, r3, r5
 800020a:	4159      	adcs	r1, r3
 800020c:	e00e      	b.n	800022c <__adddf3+0xd0>
 800020e:	f1a5 0520 	sub.w	r5, r5, #32
 8000212:	f10e 0e20 	add.w	lr, lr, #32
 8000216:	2a01      	cmp	r2, #1
 8000218:	fa03 fc0e 	lsl.w	ip, r3, lr
 800021c:	bf28      	it	cs
 800021e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000222:	fa43 f305 	asr.w	r3, r3, r5
 8000226:	18c0      	adds	r0, r0, r3
 8000228:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800022c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000230:	d507      	bpl.n	8000242 <__adddf3+0xe6>
 8000232:	f04f 0e00 	mov.w	lr, #0
 8000236:	f1dc 0c00 	rsbs	ip, ip, #0
 800023a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800023e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000242:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000246:	d31b      	bcc.n	8000280 <__adddf3+0x124>
 8000248:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800024c:	d30c      	bcc.n	8000268 <__adddf3+0x10c>
 800024e:	0849      	lsrs	r1, r1, #1
 8000250:	ea5f 0030 	movs.w	r0, r0, rrx
 8000254:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000258:	f104 0401 	add.w	r4, r4, #1
 800025c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000260:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000264:	f080 809a 	bcs.w	800039c <__adddf3+0x240>
 8000268:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800026c:	bf08      	it	eq
 800026e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000272:	f150 0000 	adcs.w	r0, r0, #0
 8000276:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800027a:	ea41 0105 	orr.w	r1, r1, r5
 800027e:	bd30      	pop	{r4, r5, pc}
 8000280:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000284:	4140      	adcs	r0, r0
 8000286:	eb41 0101 	adc.w	r1, r1, r1
 800028a:	3c01      	subs	r4, #1
 800028c:	bf28      	it	cs
 800028e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000292:	d2e9      	bcs.n	8000268 <__adddf3+0x10c>
 8000294:	f091 0f00 	teq	r1, #0
 8000298:	bf04      	itt	eq
 800029a:	4601      	moveq	r1, r0
 800029c:	2000      	moveq	r0, #0
 800029e:	fab1 f381 	clz	r3, r1
 80002a2:	bf08      	it	eq
 80002a4:	3320      	addeq	r3, #32
 80002a6:	f1a3 030b 	sub.w	r3, r3, #11
 80002aa:	f1b3 0220 	subs.w	r2, r3, #32
 80002ae:	da0c      	bge.n	80002ca <__adddf3+0x16e>
 80002b0:	320c      	adds	r2, #12
 80002b2:	dd08      	ble.n	80002c6 <__adddf3+0x16a>
 80002b4:	f102 0c14 	add.w	ip, r2, #20
 80002b8:	f1c2 020c 	rsb	r2, r2, #12
 80002bc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002c0:	fa21 f102 	lsr.w	r1, r1, r2
 80002c4:	e00c      	b.n	80002e0 <__adddf3+0x184>
 80002c6:	f102 0214 	add.w	r2, r2, #20
 80002ca:	bfd8      	it	le
 80002cc:	f1c2 0c20 	rsble	ip, r2, #32
 80002d0:	fa01 f102 	lsl.w	r1, r1, r2
 80002d4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002d8:	bfdc      	itt	le
 80002da:	ea41 010c 	orrle.w	r1, r1, ip
 80002de:	4090      	lslle	r0, r2
 80002e0:	1ae4      	subs	r4, r4, r3
 80002e2:	bfa2      	ittt	ge
 80002e4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002e8:	4329      	orrge	r1, r5
 80002ea:	bd30      	popge	{r4, r5, pc}
 80002ec:	ea6f 0404 	mvn.w	r4, r4
 80002f0:	3c1f      	subs	r4, #31
 80002f2:	da1c      	bge.n	800032e <__adddf3+0x1d2>
 80002f4:	340c      	adds	r4, #12
 80002f6:	dc0e      	bgt.n	8000316 <__adddf3+0x1ba>
 80002f8:	f104 0414 	add.w	r4, r4, #20
 80002fc:	f1c4 0220 	rsb	r2, r4, #32
 8000300:	fa20 f004 	lsr.w	r0, r0, r4
 8000304:	fa01 f302 	lsl.w	r3, r1, r2
 8000308:	ea40 0003 	orr.w	r0, r0, r3
 800030c:	fa21 f304 	lsr.w	r3, r1, r4
 8000310:	ea45 0103 	orr.w	r1, r5, r3
 8000314:	bd30      	pop	{r4, r5, pc}
 8000316:	f1c4 040c 	rsb	r4, r4, #12
 800031a:	f1c4 0220 	rsb	r2, r4, #32
 800031e:	fa20 f002 	lsr.w	r0, r0, r2
 8000322:	fa01 f304 	lsl.w	r3, r1, r4
 8000326:	ea40 0003 	orr.w	r0, r0, r3
 800032a:	4629      	mov	r1, r5
 800032c:	bd30      	pop	{r4, r5, pc}
 800032e:	fa21 f004 	lsr.w	r0, r1, r4
 8000332:	4629      	mov	r1, r5
 8000334:	bd30      	pop	{r4, r5, pc}
 8000336:	f094 0f00 	teq	r4, #0
 800033a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800033e:	bf06      	itte	eq
 8000340:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000344:	3401      	addeq	r4, #1
 8000346:	3d01      	subne	r5, #1
 8000348:	e74e      	b.n	80001e8 <__adddf3+0x8c>
 800034a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800034e:	bf18      	it	ne
 8000350:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000354:	d029      	beq.n	80003aa <__adddf3+0x24e>
 8000356:	ea94 0f05 	teq	r4, r5
 800035a:	bf08      	it	eq
 800035c:	ea90 0f02 	teqeq	r0, r2
 8000360:	d005      	beq.n	800036e <__adddf3+0x212>
 8000362:	ea54 0c00 	orrs.w	ip, r4, r0
 8000366:	bf04      	itt	eq
 8000368:	4619      	moveq	r1, r3
 800036a:	4610      	moveq	r0, r2
 800036c:	bd30      	pop	{r4, r5, pc}
 800036e:	ea91 0f03 	teq	r1, r3
 8000372:	bf1e      	ittt	ne
 8000374:	2100      	movne	r1, #0
 8000376:	2000      	movne	r0, #0
 8000378:	bd30      	popne	{r4, r5, pc}
 800037a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800037e:	d105      	bne.n	800038c <__adddf3+0x230>
 8000380:	0040      	lsls	r0, r0, #1
 8000382:	4149      	adcs	r1, r1
 8000384:	bf28      	it	cs
 8000386:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800038a:	bd30      	pop	{r4, r5, pc}
 800038c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000390:	bf3c      	itt	cc
 8000392:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000396:	bd30      	popcc	{r4, r5, pc}
 8000398:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800039c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003a0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003a4:	f04f 0000 	mov.w	r0, #0
 80003a8:	bd30      	pop	{r4, r5, pc}
 80003aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ae:	bf1a      	itte	ne
 80003b0:	4619      	movne	r1, r3
 80003b2:	4610      	movne	r0, r2
 80003b4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003b8:	bf1c      	itt	ne
 80003ba:	460b      	movne	r3, r1
 80003bc:	4602      	movne	r2, r0
 80003be:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003c2:	bf06      	itte	eq
 80003c4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003c8:	ea91 0f03 	teqeq	r1, r3
 80003cc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003d0:	bd30      	pop	{r4, r5, pc}
 80003d2:	bf00      	nop

080003d4 <__aeabi_ui2d>:
 80003d4:	f090 0f00 	teq	r0, #0
 80003d8:	bf04      	itt	eq
 80003da:	2100      	moveq	r1, #0
 80003dc:	4770      	bxeq	lr
 80003de:	b530      	push	{r4, r5, lr}
 80003e0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003e4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003e8:	f04f 0500 	mov.w	r5, #0
 80003ec:	f04f 0100 	mov.w	r1, #0
 80003f0:	e750      	b.n	8000294 <__adddf3+0x138>
 80003f2:	bf00      	nop

080003f4 <__aeabi_i2d>:
 80003f4:	f090 0f00 	teq	r0, #0
 80003f8:	bf04      	itt	eq
 80003fa:	2100      	moveq	r1, #0
 80003fc:	4770      	bxeq	lr
 80003fe:	b530      	push	{r4, r5, lr}
 8000400:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000404:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000408:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800040c:	bf48      	it	mi
 800040e:	4240      	negmi	r0, r0
 8000410:	f04f 0100 	mov.w	r1, #0
 8000414:	e73e      	b.n	8000294 <__adddf3+0x138>
 8000416:	bf00      	nop

08000418 <__aeabi_f2d>:
 8000418:	0042      	lsls	r2, r0, #1
 800041a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800041e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000422:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000426:	bf1f      	itttt	ne
 8000428:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800042c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000430:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000434:	4770      	bxne	lr
 8000436:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800043a:	bf08      	it	eq
 800043c:	4770      	bxeq	lr
 800043e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000442:	bf04      	itt	eq
 8000444:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000448:	4770      	bxeq	lr
 800044a:	b530      	push	{r4, r5, lr}
 800044c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000450:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000454:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000458:	e71c      	b.n	8000294 <__adddf3+0x138>
 800045a:	bf00      	nop

0800045c <__aeabi_ul2d>:
 800045c:	ea50 0201 	orrs.w	r2, r0, r1
 8000460:	bf08      	it	eq
 8000462:	4770      	bxeq	lr
 8000464:	b530      	push	{r4, r5, lr}
 8000466:	f04f 0500 	mov.w	r5, #0
 800046a:	e00a      	b.n	8000482 <__aeabi_l2d+0x16>

0800046c <__aeabi_l2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800047a:	d502      	bpl.n	8000482 <__aeabi_l2d+0x16>
 800047c:	4240      	negs	r0, r0
 800047e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000482:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000486:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800048a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800048e:	f43f aed8 	beq.w	8000242 <__adddf3+0xe6>
 8000492:	f04f 0203 	mov.w	r2, #3
 8000496:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800049a:	bf18      	it	ne
 800049c:	3203      	addne	r2, #3
 800049e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004a2:	bf18      	it	ne
 80004a4:	3203      	addne	r2, #3
 80004a6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004aa:	f1c2 0320 	rsb	r3, r2, #32
 80004ae:	fa00 fc03 	lsl.w	ip, r0, r3
 80004b2:	fa20 f002 	lsr.w	r0, r0, r2
 80004b6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ba:	ea40 000e 	orr.w	r0, r0, lr
 80004be:	fa21 f102 	lsr.w	r1, r1, r2
 80004c2:	4414      	add	r4, r2
 80004c4:	e6bd      	b.n	8000242 <__adddf3+0xe6>
 80004c6:	bf00      	nop

080004c8 <__aeabi_dmul>:
 80004c8:	b570      	push	{r4, r5, r6, lr}
 80004ca:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004ce:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004d2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004d6:	bf1d      	ittte	ne
 80004d8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004dc:	ea94 0f0c 	teqne	r4, ip
 80004e0:	ea95 0f0c 	teqne	r5, ip
 80004e4:	f000 f8de 	bleq	80006a4 <__aeabi_dmul+0x1dc>
 80004e8:	442c      	add	r4, r5
 80004ea:	ea81 0603 	eor.w	r6, r1, r3
 80004ee:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80004f2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80004f6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80004fa:	bf18      	it	ne
 80004fc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000500:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000504:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000508:	d038      	beq.n	800057c <__aeabi_dmul+0xb4>
 800050a:	fba0 ce02 	umull	ip, lr, r0, r2
 800050e:	f04f 0500 	mov.w	r5, #0
 8000512:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000516:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800051a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800051e:	f04f 0600 	mov.w	r6, #0
 8000522:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000526:	f09c 0f00 	teq	ip, #0
 800052a:	bf18      	it	ne
 800052c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000530:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000534:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000538:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800053c:	d204      	bcs.n	8000548 <__aeabi_dmul+0x80>
 800053e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000542:	416d      	adcs	r5, r5
 8000544:	eb46 0606 	adc.w	r6, r6, r6
 8000548:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800054c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000550:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000554:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000558:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800055c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000560:	bf88      	it	hi
 8000562:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000566:	d81e      	bhi.n	80005a6 <__aeabi_dmul+0xde>
 8000568:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800056c:	bf08      	it	eq
 800056e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000572:	f150 0000 	adcs.w	r0, r0, #0
 8000576:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800057a:	bd70      	pop	{r4, r5, r6, pc}
 800057c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000580:	ea46 0101 	orr.w	r1, r6, r1
 8000584:	ea40 0002 	orr.w	r0, r0, r2
 8000588:	ea81 0103 	eor.w	r1, r1, r3
 800058c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000590:	bfc2      	ittt	gt
 8000592:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000596:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800059a:	bd70      	popgt	{r4, r5, r6, pc}
 800059c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005a0:	f04f 0e00 	mov.w	lr, #0
 80005a4:	3c01      	subs	r4, #1
 80005a6:	f300 80ab 	bgt.w	8000700 <__aeabi_dmul+0x238>
 80005aa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005ae:	bfde      	ittt	le
 80005b0:	2000      	movle	r0, #0
 80005b2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005b6:	bd70      	pople	{r4, r5, r6, pc}
 80005b8:	f1c4 0400 	rsb	r4, r4, #0
 80005bc:	3c20      	subs	r4, #32
 80005be:	da35      	bge.n	800062c <__aeabi_dmul+0x164>
 80005c0:	340c      	adds	r4, #12
 80005c2:	dc1b      	bgt.n	80005fc <__aeabi_dmul+0x134>
 80005c4:	f104 0414 	add.w	r4, r4, #20
 80005c8:	f1c4 0520 	rsb	r5, r4, #32
 80005cc:	fa00 f305 	lsl.w	r3, r0, r5
 80005d0:	fa20 f004 	lsr.w	r0, r0, r4
 80005d4:	fa01 f205 	lsl.w	r2, r1, r5
 80005d8:	ea40 0002 	orr.w	r0, r0, r2
 80005dc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005e0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005e4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005e8:	fa21 f604 	lsr.w	r6, r1, r4
 80005ec:	eb42 0106 	adc.w	r1, r2, r6
 80005f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80005f4:	bf08      	it	eq
 80005f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80005fa:	bd70      	pop	{r4, r5, r6, pc}
 80005fc:	f1c4 040c 	rsb	r4, r4, #12
 8000600:	f1c4 0520 	rsb	r5, r4, #32
 8000604:	fa00 f304 	lsl.w	r3, r0, r4
 8000608:	fa20 f005 	lsr.w	r0, r0, r5
 800060c:	fa01 f204 	lsl.w	r2, r1, r4
 8000610:	ea40 0002 	orr.w	r0, r0, r2
 8000614:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000618:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800061c:	f141 0100 	adc.w	r1, r1, #0
 8000620:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000624:	bf08      	it	eq
 8000626:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800062a:	bd70      	pop	{r4, r5, r6, pc}
 800062c:	f1c4 0520 	rsb	r5, r4, #32
 8000630:	fa00 f205 	lsl.w	r2, r0, r5
 8000634:	ea4e 0e02 	orr.w	lr, lr, r2
 8000638:	fa20 f304 	lsr.w	r3, r0, r4
 800063c:	fa01 f205 	lsl.w	r2, r1, r5
 8000640:	ea43 0302 	orr.w	r3, r3, r2
 8000644:	fa21 f004 	lsr.w	r0, r1, r4
 8000648:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800064c:	fa21 f204 	lsr.w	r2, r1, r4
 8000650:	ea20 0002 	bic.w	r0, r0, r2
 8000654:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000658:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800065c:	bf08      	it	eq
 800065e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000662:	bd70      	pop	{r4, r5, r6, pc}
 8000664:	f094 0f00 	teq	r4, #0
 8000668:	d10f      	bne.n	800068a <__aeabi_dmul+0x1c2>
 800066a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800066e:	0040      	lsls	r0, r0, #1
 8000670:	eb41 0101 	adc.w	r1, r1, r1
 8000674:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000678:	bf08      	it	eq
 800067a:	3c01      	subeq	r4, #1
 800067c:	d0f7      	beq.n	800066e <__aeabi_dmul+0x1a6>
 800067e:	ea41 0106 	orr.w	r1, r1, r6
 8000682:	f095 0f00 	teq	r5, #0
 8000686:	bf18      	it	ne
 8000688:	4770      	bxne	lr
 800068a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800068e:	0052      	lsls	r2, r2, #1
 8000690:	eb43 0303 	adc.w	r3, r3, r3
 8000694:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000698:	bf08      	it	eq
 800069a:	3d01      	subeq	r5, #1
 800069c:	d0f7      	beq.n	800068e <__aeabi_dmul+0x1c6>
 800069e:	ea43 0306 	orr.w	r3, r3, r6
 80006a2:	4770      	bx	lr
 80006a4:	ea94 0f0c 	teq	r4, ip
 80006a8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006ac:	bf18      	it	ne
 80006ae:	ea95 0f0c 	teqne	r5, ip
 80006b2:	d00c      	beq.n	80006ce <__aeabi_dmul+0x206>
 80006b4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006b8:	bf18      	it	ne
 80006ba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006be:	d1d1      	bne.n	8000664 <__aeabi_dmul+0x19c>
 80006c0:	ea81 0103 	eor.w	r1, r1, r3
 80006c4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c8:	f04f 0000 	mov.w	r0, #0
 80006cc:	bd70      	pop	{r4, r5, r6, pc}
 80006ce:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006d2:	bf06      	itte	eq
 80006d4:	4610      	moveq	r0, r2
 80006d6:	4619      	moveq	r1, r3
 80006d8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006dc:	d019      	beq.n	8000712 <__aeabi_dmul+0x24a>
 80006de:	ea94 0f0c 	teq	r4, ip
 80006e2:	d102      	bne.n	80006ea <__aeabi_dmul+0x222>
 80006e4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006e8:	d113      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006ea:	ea95 0f0c 	teq	r5, ip
 80006ee:	d105      	bne.n	80006fc <__aeabi_dmul+0x234>
 80006f0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80006f4:	bf1c      	itt	ne
 80006f6:	4610      	movne	r0, r2
 80006f8:	4619      	movne	r1, r3
 80006fa:	d10a      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006fc:	ea81 0103 	eor.w	r1, r1, r3
 8000700:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000704:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000708:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800070c:	f04f 0000 	mov.w	r0, #0
 8000710:	bd70      	pop	{r4, r5, r6, pc}
 8000712:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000716:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800071a:	bd70      	pop	{r4, r5, r6, pc}

0800071c <__aeabi_ddiv>:
 800071c:	b570      	push	{r4, r5, r6, lr}
 800071e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000722:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000726:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800072a:	bf1d      	ittte	ne
 800072c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000730:	ea94 0f0c 	teqne	r4, ip
 8000734:	ea95 0f0c 	teqne	r5, ip
 8000738:	f000 f8a7 	bleq	800088a <__aeabi_ddiv+0x16e>
 800073c:	eba4 0405 	sub.w	r4, r4, r5
 8000740:	ea81 0e03 	eor.w	lr, r1, r3
 8000744:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000748:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800074c:	f000 8088 	beq.w	8000860 <__aeabi_ddiv+0x144>
 8000750:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000754:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000758:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800075c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000760:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000764:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000768:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800076c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000770:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000774:	429d      	cmp	r5, r3
 8000776:	bf08      	it	eq
 8000778:	4296      	cmpeq	r6, r2
 800077a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800077e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000782:	d202      	bcs.n	800078a <__aeabi_ddiv+0x6e>
 8000784:	085b      	lsrs	r3, r3, #1
 8000786:	ea4f 0232 	mov.w	r2, r2, rrx
 800078a:	1ab6      	subs	r6, r6, r2
 800078c:	eb65 0503 	sbc.w	r5, r5, r3
 8000790:	085b      	lsrs	r3, r3, #1
 8000792:	ea4f 0232 	mov.w	r2, r2, rrx
 8000796:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800079a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800079e:	ebb6 0e02 	subs.w	lr, r6, r2
 80007a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007a6:	bf22      	ittt	cs
 80007a8:	1ab6      	subcs	r6, r6, r2
 80007aa:	4675      	movcs	r5, lr
 80007ac:	ea40 000c 	orrcs.w	r0, r0, ip
 80007b0:	085b      	lsrs	r3, r3, #1
 80007b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007b6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ba:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007be:	bf22      	ittt	cs
 80007c0:	1ab6      	subcs	r6, r6, r2
 80007c2:	4675      	movcs	r5, lr
 80007c4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007c8:	085b      	lsrs	r3, r3, #1
 80007ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80007d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007d6:	bf22      	ittt	cs
 80007d8:	1ab6      	subcs	r6, r6, r2
 80007da:	4675      	movcs	r5, lr
 80007dc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007e0:	085b      	lsrs	r3, r3, #1
 80007e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ee:	bf22      	ittt	cs
 80007f0:	1ab6      	subcs	r6, r6, r2
 80007f2:	4675      	movcs	r5, lr
 80007f4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80007f8:	ea55 0e06 	orrs.w	lr, r5, r6
 80007fc:	d018      	beq.n	8000830 <__aeabi_ddiv+0x114>
 80007fe:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000802:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000806:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800080a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800080e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000812:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000816:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800081a:	d1c0      	bne.n	800079e <__aeabi_ddiv+0x82>
 800081c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000820:	d10b      	bne.n	800083a <__aeabi_ddiv+0x11e>
 8000822:	ea41 0100 	orr.w	r1, r1, r0
 8000826:	f04f 0000 	mov.w	r0, #0
 800082a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800082e:	e7b6      	b.n	800079e <__aeabi_ddiv+0x82>
 8000830:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000834:	bf04      	itt	eq
 8000836:	4301      	orreq	r1, r0
 8000838:	2000      	moveq	r0, #0
 800083a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800083e:	bf88      	it	hi
 8000840:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000844:	f63f aeaf 	bhi.w	80005a6 <__aeabi_dmul+0xde>
 8000848:	ebb5 0c03 	subs.w	ip, r5, r3
 800084c:	bf04      	itt	eq
 800084e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000852:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000856:	f150 0000 	adcs.w	r0, r0, #0
 800085a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800085e:	bd70      	pop	{r4, r5, r6, pc}
 8000860:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000864:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000868:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800086c:	bfc2      	ittt	gt
 800086e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000872:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000876:	bd70      	popgt	{r4, r5, r6, pc}
 8000878:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800087c:	f04f 0e00 	mov.w	lr, #0
 8000880:	3c01      	subs	r4, #1
 8000882:	e690      	b.n	80005a6 <__aeabi_dmul+0xde>
 8000884:	ea45 0e06 	orr.w	lr, r5, r6
 8000888:	e68d      	b.n	80005a6 <__aeabi_dmul+0xde>
 800088a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800088e:	ea94 0f0c 	teq	r4, ip
 8000892:	bf08      	it	eq
 8000894:	ea95 0f0c 	teqeq	r5, ip
 8000898:	f43f af3b 	beq.w	8000712 <__aeabi_dmul+0x24a>
 800089c:	ea94 0f0c 	teq	r4, ip
 80008a0:	d10a      	bne.n	80008b8 <__aeabi_ddiv+0x19c>
 80008a2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008a6:	f47f af34 	bne.w	8000712 <__aeabi_dmul+0x24a>
 80008aa:	ea95 0f0c 	teq	r5, ip
 80008ae:	f47f af25 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008b2:	4610      	mov	r0, r2
 80008b4:	4619      	mov	r1, r3
 80008b6:	e72c      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008b8:	ea95 0f0c 	teq	r5, ip
 80008bc:	d106      	bne.n	80008cc <__aeabi_ddiv+0x1b0>
 80008be:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c2:	f43f aefd 	beq.w	80006c0 <__aeabi_dmul+0x1f8>
 80008c6:	4610      	mov	r0, r2
 80008c8:	4619      	mov	r1, r3
 80008ca:	e722      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008cc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008d0:	bf18      	it	ne
 80008d2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008d6:	f47f aec5 	bne.w	8000664 <__aeabi_dmul+0x19c>
 80008da:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008de:	f47f af0d 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008e2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008e6:	f47f aeeb 	bne.w	80006c0 <__aeabi_dmul+0x1f8>
 80008ea:	e712      	b.n	8000712 <__aeabi_dmul+0x24a>

080008ec <__gedf2>:
 80008ec:	f04f 3cff 	mov.w	ip, #4294967295
 80008f0:	e006      	b.n	8000900 <__cmpdf2+0x4>
 80008f2:	bf00      	nop

080008f4 <__ledf2>:
 80008f4:	f04f 0c01 	mov.w	ip, #1
 80008f8:	e002      	b.n	8000900 <__cmpdf2+0x4>
 80008fa:	bf00      	nop

080008fc <__cmpdf2>:
 80008fc:	f04f 0c01 	mov.w	ip, #1
 8000900:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000904:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000908:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800090c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000910:	bf18      	it	ne
 8000912:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000916:	d01b      	beq.n	8000950 <__cmpdf2+0x54>
 8000918:	b001      	add	sp, #4
 800091a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800091e:	bf0c      	ite	eq
 8000920:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000924:	ea91 0f03 	teqne	r1, r3
 8000928:	bf02      	ittt	eq
 800092a:	ea90 0f02 	teqeq	r0, r2
 800092e:	2000      	moveq	r0, #0
 8000930:	4770      	bxeq	lr
 8000932:	f110 0f00 	cmn.w	r0, #0
 8000936:	ea91 0f03 	teq	r1, r3
 800093a:	bf58      	it	pl
 800093c:	4299      	cmppl	r1, r3
 800093e:	bf08      	it	eq
 8000940:	4290      	cmpeq	r0, r2
 8000942:	bf2c      	ite	cs
 8000944:	17d8      	asrcs	r0, r3, #31
 8000946:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800094a:	f040 0001 	orr.w	r0, r0, #1
 800094e:	4770      	bx	lr
 8000950:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000954:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000958:	d102      	bne.n	8000960 <__cmpdf2+0x64>
 800095a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800095e:	d107      	bne.n	8000970 <__cmpdf2+0x74>
 8000960:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d1d6      	bne.n	8000918 <__cmpdf2+0x1c>
 800096a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800096e:	d0d3      	beq.n	8000918 <__cmpdf2+0x1c>
 8000970:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000974:	4770      	bx	lr
 8000976:	bf00      	nop

08000978 <__aeabi_cdrcmple>:
 8000978:	4684      	mov	ip, r0
 800097a:	4610      	mov	r0, r2
 800097c:	4662      	mov	r2, ip
 800097e:	468c      	mov	ip, r1
 8000980:	4619      	mov	r1, r3
 8000982:	4663      	mov	r3, ip
 8000984:	e000      	b.n	8000988 <__aeabi_cdcmpeq>
 8000986:	bf00      	nop

08000988 <__aeabi_cdcmpeq>:
 8000988:	b501      	push	{r0, lr}
 800098a:	f7ff ffb7 	bl	80008fc <__cmpdf2>
 800098e:	2800      	cmp	r0, #0
 8000990:	bf48      	it	mi
 8000992:	f110 0f00 	cmnmi.w	r0, #0
 8000996:	bd01      	pop	{r0, pc}

08000998 <__aeabi_dcmpeq>:
 8000998:	f84d ed08 	str.w	lr, [sp, #-8]!
 800099c:	f7ff fff4 	bl	8000988 <__aeabi_cdcmpeq>
 80009a0:	bf0c      	ite	eq
 80009a2:	2001      	moveq	r0, #1
 80009a4:	2000      	movne	r0, #0
 80009a6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009aa:	bf00      	nop

080009ac <__aeabi_dcmplt>:
 80009ac:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009b0:	f7ff ffea 	bl	8000988 <__aeabi_cdcmpeq>
 80009b4:	bf34      	ite	cc
 80009b6:	2001      	movcc	r0, #1
 80009b8:	2000      	movcs	r0, #0
 80009ba:	f85d fb08 	ldr.w	pc, [sp], #8
 80009be:	bf00      	nop

080009c0 <__aeabi_dcmple>:
 80009c0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c4:	f7ff ffe0 	bl	8000988 <__aeabi_cdcmpeq>
 80009c8:	bf94      	ite	ls
 80009ca:	2001      	movls	r0, #1
 80009cc:	2000      	movhi	r0, #0
 80009ce:	f85d fb08 	ldr.w	pc, [sp], #8
 80009d2:	bf00      	nop

080009d4 <__aeabi_dcmpge>:
 80009d4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d8:	f7ff ffce 	bl	8000978 <__aeabi_cdrcmple>
 80009dc:	bf94      	ite	ls
 80009de:	2001      	movls	r0, #1
 80009e0:	2000      	movhi	r0, #0
 80009e2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e6:	bf00      	nop

080009e8 <__aeabi_dcmpgt>:
 80009e8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ec:	f7ff ffc4 	bl	8000978 <__aeabi_cdrcmple>
 80009f0:	bf34      	ite	cc
 80009f2:	2001      	movcc	r0, #1
 80009f4:	2000      	movcs	r0, #0
 80009f6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009fa:	bf00      	nop

080009fc <__aeabi_dcmpun>:
 80009fc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a00:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a04:	d102      	bne.n	8000a0c <__aeabi_dcmpun+0x10>
 8000a06:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a0a:	d10a      	bne.n	8000a22 <__aeabi_dcmpun+0x26>
 8000a0c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x20>
 8000a16:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a1a:	d102      	bne.n	8000a22 <__aeabi_dcmpun+0x26>
 8000a1c:	f04f 0000 	mov.w	r0, #0
 8000a20:	4770      	bx	lr
 8000a22:	f04f 0001 	mov.w	r0, #1
 8000a26:	4770      	bx	lr

08000a28 <__aeabi_d2iz>:
 8000a28:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a2c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a30:	d215      	bcs.n	8000a5e <__aeabi_d2iz+0x36>
 8000a32:	d511      	bpl.n	8000a58 <__aeabi_d2iz+0x30>
 8000a34:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a38:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a3c:	d912      	bls.n	8000a64 <__aeabi_d2iz+0x3c>
 8000a3e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a42:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a46:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a4a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a4e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a52:	bf18      	it	ne
 8000a54:	4240      	negne	r0, r0
 8000a56:	4770      	bx	lr
 8000a58:	f04f 0000 	mov.w	r0, #0
 8000a5c:	4770      	bx	lr
 8000a5e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a62:	d105      	bne.n	8000a70 <__aeabi_d2iz+0x48>
 8000a64:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a68:	bf08      	it	eq
 8000a6a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a6e:	4770      	bx	lr
 8000a70:	f04f 0000 	mov.w	r0, #0
 8000a74:	4770      	bx	lr
 8000a76:	bf00      	nop

08000a78 <__aeabi_d2f>:
 8000a78:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a7c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000a80:	bf24      	itt	cs
 8000a82:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000a86:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000a8a:	d90d      	bls.n	8000aa8 <__aeabi_d2f+0x30>
 8000a8c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000a90:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000a94:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000a98:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000a9c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000aa0:	bf08      	it	eq
 8000aa2:	f020 0001 	biceq.w	r0, r0, #1
 8000aa6:	4770      	bx	lr
 8000aa8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000aac:	d121      	bne.n	8000af2 <__aeabi_d2f+0x7a>
 8000aae:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000ab2:	bfbc      	itt	lt
 8000ab4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000ab8:	4770      	bxlt	lr
 8000aba:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000abe:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000ac2:	f1c2 0218 	rsb	r2, r2, #24
 8000ac6:	f1c2 0c20 	rsb	ip, r2, #32
 8000aca:	fa10 f30c 	lsls.w	r3, r0, ip
 8000ace:	fa20 f002 	lsr.w	r0, r0, r2
 8000ad2:	bf18      	it	ne
 8000ad4:	f040 0001 	orrne.w	r0, r0, #1
 8000ad8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000adc:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000ae0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000ae4:	ea40 000c 	orr.w	r0, r0, ip
 8000ae8:	fa23 f302 	lsr.w	r3, r3, r2
 8000aec:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000af0:	e7cc      	b.n	8000a8c <__aeabi_d2f+0x14>
 8000af2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000af6:	d107      	bne.n	8000b08 <__aeabi_d2f+0x90>
 8000af8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000afc:	bf1e      	ittt	ne
 8000afe:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b02:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b06:	4770      	bxne	lr
 8000b08:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b0c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b10:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b14:	4770      	bx	lr
 8000b16:	bf00      	nop

08000b18 <__aeabi_frsub>:
 8000b18:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000b1c:	e002      	b.n	8000b24 <__addsf3>
 8000b1e:	bf00      	nop

08000b20 <__aeabi_fsub>:
 8000b20:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000b24 <__addsf3>:
 8000b24:	0042      	lsls	r2, r0, #1
 8000b26:	bf1f      	itttt	ne
 8000b28:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b2c:	ea92 0f03 	teqne	r2, r3
 8000b30:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b34:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b38:	d06a      	beq.n	8000c10 <__addsf3+0xec>
 8000b3a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b3e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b42:	bfc1      	itttt	gt
 8000b44:	18d2      	addgt	r2, r2, r3
 8000b46:	4041      	eorgt	r1, r0
 8000b48:	4048      	eorgt	r0, r1
 8000b4a:	4041      	eorgt	r1, r0
 8000b4c:	bfb8      	it	lt
 8000b4e:	425b      	neglt	r3, r3
 8000b50:	2b19      	cmp	r3, #25
 8000b52:	bf88      	it	hi
 8000b54:	4770      	bxhi	lr
 8000b56:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000b5a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b5e:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000b62:	bf18      	it	ne
 8000b64:	4240      	negne	r0, r0
 8000b66:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b6a:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000b6e:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000b72:	bf18      	it	ne
 8000b74:	4249      	negne	r1, r1
 8000b76:	ea92 0f03 	teq	r2, r3
 8000b7a:	d03f      	beq.n	8000bfc <__addsf3+0xd8>
 8000b7c:	f1a2 0201 	sub.w	r2, r2, #1
 8000b80:	fa41 fc03 	asr.w	ip, r1, r3
 8000b84:	eb10 000c 	adds.w	r0, r0, ip
 8000b88:	f1c3 0320 	rsb	r3, r3, #32
 8000b8c:	fa01 f103 	lsl.w	r1, r1, r3
 8000b90:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000b94:	d502      	bpl.n	8000b9c <__addsf3+0x78>
 8000b96:	4249      	negs	r1, r1
 8000b98:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000b9c:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000ba0:	d313      	bcc.n	8000bca <__addsf3+0xa6>
 8000ba2:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000ba6:	d306      	bcc.n	8000bb6 <__addsf3+0x92>
 8000ba8:	0840      	lsrs	r0, r0, #1
 8000baa:	ea4f 0131 	mov.w	r1, r1, rrx
 8000bae:	f102 0201 	add.w	r2, r2, #1
 8000bb2:	2afe      	cmp	r2, #254	; 0xfe
 8000bb4:	d251      	bcs.n	8000c5a <__addsf3+0x136>
 8000bb6:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000bba:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000bbe:	bf08      	it	eq
 8000bc0:	f020 0001 	biceq.w	r0, r0, #1
 8000bc4:	ea40 0003 	orr.w	r0, r0, r3
 8000bc8:	4770      	bx	lr
 8000bca:	0049      	lsls	r1, r1, #1
 8000bcc:	eb40 0000 	adc.w	r0, r0, r0
 8000bd0:	3a01      	subs	r2, #1
 8000bd2:	bf28      	it	cs
 8000bd4:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000bd8:	d2ed      	bcs.n	8000bb6 <__addsf3+0x92>
 8000bda:	fab0 fc80 	clz	ip, r0
 8000bde:	f1ac 0c08 	sub.w	ip, ip, #8
 8000be2:	ebb2 020c 	subs.w	r2, r2, ip
 8000be6:	fa00 f00c 	lsl.w	r0, r0, ip
 8000bea:	bfaa      	itet	ge
 8000bec:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000bf0:	4252      	neglt	r2, r2
 8000bf2:	4318      	orrge	r0, r3
 8000bf4:	bfbc      	itt	lt
 8000bf6:	40d0      	lsrlt	r0, r2
 8000bf8:	4318      	orrlt	r0, r3
 8000bfa:	4770      	bx	lr
 8000bfc:	f092 0f00 	teq	r2, #0
 8000c00:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000c04:	bf06      	itte	eq
 8000c06:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000c0a:	3201      	addeq	r2, #1
 8000c0c:	3b01      	subne	r3, #1
 8000c0e:	e7b5      	b.n	8000b7c <__addsf3+0x58>
 8000c10:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c14:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c18:	bf18      	it	ne
 8000c1a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c1e:	d021      	beq.n	8000c64 <__addsf3+0x140>
 8000c20:	ea92 0f03 	teq	r2, r3
 8000c24:	d004      	beq.n	8000c30 <__addsf3+0x10c>
 8000c26:	f092 0f00 	teq	r2, #0
 8000c2a:	bf08      	it	eq
 8000c2c:	4608      	moveq	r0, r1
 8000c2e:	4770      	bx	lr
 8000c30:	ea90 0f01 	teq	r0, r1
 8000c34:	bf1c      	itt	ne
 8000c36:	2000      	movne	r0, #0
 8000c38:	4770      	bxne	lr
 8000c3a:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000c3e:	d104      	bne.n	8000c4a <__addsf3+0x126>
 8000c40:	0040      	lsls	r0, r0, #1
 8000c42:	bf28      	it	cs
 8000c44:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000c48:	4770      	bx	lr
 8000c4a:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000c4e:	bf3c      	itt	cc
 8000c50:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000c54:	4770      	bxcc	lr
 8000c56:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000c5a:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000c5e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c62:	4770      	bx	lr
 8000c64:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000c68:	bf16      	itet	ne
 8000c6a:	4608      	movne	r0, r1
 8000c6c:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000c70:	4601      	movne	r1, r0
 8000c72:	0242      	lsls	r2, r0, #9
 8000c74:	bf06      	itte	eq
 8000c76:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000c7a:	ea90 0f01 	teqeq	r0, r1
 8000c7e:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000c82:	4770      	bx	lr

08000c84 <__aeabi_ui2f>:
 8000c84:	f04f 0300 	mov.w	r3, #0
 8000c88:	e004      	b.n	8000c94 <__aeabi_i2f+0x8>
 8000c8a:	bf00      	nop

08000c8c <__aeabi_i2f>:
 8000c8c:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000c90:	bf48      	it	mi
 8000c92:	4240      	negmi	r0, r0
 8000c94:	ea5f 0c00 	movs.w	ip, r0
 8000c98:	bf08      	it	eq
 8000c9a:	4770      	bxeq	lr
 8000c9c:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000ca0:	4601      	mov	r1, r0
 8000ca2:	f04f 0000 	mov.w	r0, #0
 8000ca6:	e01c      	b.n	8000ce2 <__aeabi_l2f+0x2a>

08000ca8 <__aeabi_ul2f>:
 8000ca8:	ea50 0201 	orrs.w	r2, r0, r1
 8000cac:	bf08      	it	eq
 8000cae:	4770      	bxeq	lr
 8000cb0:	f04f 0300 	mov.w	r3, #0
 8000cb4:	e00a      	b.n	8000ccc <__aeabi_l2f+0x14>
 8000cb6:	bf00      	nop

08000cb8 <__aeabi_l2f>:
 8000cb8:	ea50 0201 	orrs.w	r2, r0, r1
 8000cbc:	bf08      	it	eq
 8000cbe:	4770      	bxeq	lr
 8000cc0:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000cc4:	d502      	bpl.n	8000ccc <__aeabi_l2f+0x14>
 8000cc6:	4240      	negs	r0, r0
 8000cc8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ccc:	ea5f 0c01 	movs.w	ip, r1
 8000cd0:	bf02      	ittt	eq
 8000cd2:	4684      	moveq	ip, r0
 8000cd4:	4601      	moveq	r1, r0
 8000cd6:	2000      	moveq	r0, #0
 8000cd8:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000cdc:	bf08      	it	eq
 8000cde:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000ce2:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000ce6:	fabc f28c 	clz	r2, ip
 8000cea:	3a08      	subs	r2, #8
 8000cec:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000cf0:	db10      	blt.n	8000d14 <__aeabi_l2f+0x5c>
 8000cf2:	fa01 fc02 	lsl.w	ip, r1, r2
 8000cf6:	4463      	add	r3, ip
 8000cf8:	fa00 fc02 	lsl.w	ip, r0, r2
 8000cfc:	f1c2 0220 	rsb	r2, r2, #32
 8000d00:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000d04:	fa20 f202 	lsr.w	r2, r0, r2
 8000d08:	eb43 0002 	adc.w	r0, r3, r2
 8000d0c:	bf08      	it	eq
 8000d0e:	f020 0001 	biceq.w	r0, r0, #1
 8000d12:	4770      	bx	lr
 8000d14:	f102 0220 	add.w	r2, r2, #32
 8000d18:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d1c:	f1c2 0220 	rsb	r2, r2, #32
 8000d20:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d24:	fa21 f202 	lsr.w	r2, r1, r2
 8000d28:	eb43 0002 	adc.w	r0, r3, r2
 8000d2c:	bf08      	it	eq
 8000d2e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d32:	4770      	bx	lr

08000d34 <__aeabi_fmul>:
 8000d34:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000d38:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d3c:	bf1e      	ittt	ne
 8000d3e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d42:	ea92 0f0c 	teqne	r2, ip
 8000d46:	ea93 0f0c 	teqne	r3, ip
 8000d4a:	d06f      	beq.n	8000e2c <__aeabi_fmul+0xf8>
 8000d4c:	441a      	add	r2, r3
 8000d4e:	ea80 0c01 	eor.w	ip, r0, r1
 8000d52:	0240      	lsls	r0, r0, #9
 8000d54:	bf18      	it	ne
 8000d56:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000d5a:	d01e      	beq.n	8000d9a <__aeabi_fmul+0x66>
 8000d5c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000d60:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000d64:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000d68:	fba0 3101 	umull	r3, r1, r0, r1
 8000d6c:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000d70:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000d74:	bf3e      	ittt	cc
 8000d76:	0049      	lslcc	r1, r1, #1
 8000d78:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000d7c:	005b      	lslcc	r3, r3, #1
 8000d7e:	ea40 0001 	orr.w	r0, r0, r1
 8000d82:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000d86:	2afd      	cmp	r2, #253	; 0xfd
 8000d88:	d81d      	bhi.n	8000dc6 <__aeabi_fmul+0x92>
 8000d8a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000d8e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000d92:	bf08      	it	eq
 8000d94:	f020 0001 	biceq.w	r0, r0, #1
 8000d98:	4770      	bx	lr
 8000d9a:	f090 0f00 	teq	r0, #0
 8000d9e:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000da2:	bf08      	it	eq
 8000da4:	0249      	lsleq	r1, r1, #9
 8000da6:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000daa:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000dae:	3a7f      	subs	r2, #127	; 0x7f
 8000db0:	bfc2      	ittt	gt
 8000db2:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000db6:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000dba:	4770      	bxgt	lr
 8000dbc:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000dc0:	f04f 0300 	mov.w	r3, #0
 8000dc4:	3a01      	subs	r2, #1
 8000dc6:	dc5d      	bgt.n	8000e84 <__aeabi_fmul+0x150>
 8000dc8:	f112 0f19 	cmn.w	r2, #25
 8000dcc:	bfdc      	itt	le
 8000dce:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000dd2:	4770      	bxle	lr
 8000dd4:	f1c2 0200 	rsb	r2, r2, #0
 8000dd8:	0041      	lsls	r1, r0, #1
 8000dda:	fa21 f102 	lsr.w	r1, r1, r2
 8000dde:	f1c2 0220 	rsb	r2, r2, #32
 8000de2:	fa00 fc02 	lsl.w	ip, r0, r2
 8000de6:	ea5f 0031 	movs.w	r0, r1, rrx
 8000dea:	f140 0000 	adc.w	r0, r0, #0
 8000dee:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000df2:	bf08      	it	eq
 8000df4:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000df8:	4770      	bx	lr
 8000dfa:	f092 0f00 	teq	r2, #0
 8000dfe:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000e02:	bf02      	ittt	eq
 8000e04:	0040      	lsleq	r0, r0, #1
 8000e06:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000e0a:	3a01      	subeq	r2, #1
 8000e0c:	d0f9      	beq.n	8000e02 <__aeabi_fmul+0xce>
 8000e0e:	ea40 000c 	orr.w	r0, r0, ip
 8000e12:	f093 0f00 	teq	r3, #0
 8000e16:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000e1a:	bf02      	ittt	eq
 8000e1c:	0049      	lsleq	r1, r1, #1
 8000e1e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000e22:	3b01      	subeq	r3, #1
 8000e24:	d0f9      	beq.n	8000e1a <__aeabi_fmul+0xe6>
 8000e26:	ea41 010c 	orr.w	r1, r1, ip
 8000e2a:	e78f      	b.n	8000d4c <__aeabi_fmul+0x18>
 8000e2c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e30:	ea92 0f0c 	teq	r2, ip
 8000e34:	bf18      	it	ne
 8000e36:	ea93 0f0c 	teqne	r3, ip
 8000e3a:	d00a      	beq.n	8000e52 <__aeabi_fmul+0x11e>
 8000e3c:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000e40:	bf18      	it	ne
 8000e42:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000e46:	d1d8      	bne.n	8000dfa <__aeabi_fmul+0xc6>
 8000e48:	ea80 0001 	eor.w	r0, r0, r1
 8000e4c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000e50:	4770      	bx	lr
 8000e52:	f090 0f00 	teq	r0, #0
 8000e56:	bf17      	itett	ne
 8000e58:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000e5c:	4608      	moveq	r0, r1
 8000e5e:	f091 0f00 	teqne	r1, #0
 8000e62:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000e66:	d014      	beq.n	8000e92 <__aeabi_fmul+0x15e>
 8000e68:	ea92 0f0c 	teq	r2, ip
 8000e6c:	d101      	bne.n	8000e72 <__aeabi_fmul+0x13e>
 8000e6e:	0242      	lsls	r2, r0, #9
 8000e70:	d10f      	bne.n	8000e92 <__aeabi_fmul+0x15e>
 8000e72:	ea93 0f0c 	teq	r3, ip
 8000e76:	d103      	bne.n	8000e80 <__aeabi_fmul+0x14c>
 8000e78:	024b      	lsls	r3, r1, #9
 8000e7a:	bf18      	it	ne
 8000e7c:	4608      	movne	r0, r1
 8000e7e:	d108      	bne.n	8000e92 <__aeabi_fmul+0x15e>
 8000e80:	ea80 0001 	eor.w	r0, r0, r1
 8000e84:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000e88:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000e8c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000e90:	4770      	bx	lr
 8000e92:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000e96:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000e9a:	4770      	bx	lr

08000e9c <__aeabi_fdiv>:
 8000e9c:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000ea0:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000ea4:	bf1e      	ittt	ne
 8000ea6:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000eaa:	ea92 0f0c 	teqne	r2, ip
 8000eae:	ea93 0f0c 	teqne	r3, ip
 8000eb2:	d069      	beq.n	8000f88 <__aeabi_fdiv+0xec>
 8000eb4:	eba2 0203 	sub.w	r2, r2, r3
 8000eb8:	ea80 0c01 	eor.w	ip, r0, r1
 8000ebc:	0249      	lsls	r1, r1, #9
 8000ebe:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000ec2:	d037      	beq.n	8000f34 <__aeabi_fdiv+0x98>
 8000ec4:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000ec8:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000ecc:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000ed0:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000ed4:	428b      	cmp	r3, r1
 8000ed6:	bf38      	it	cc
 8000ed8:	005b      	lslcc	r3, r3, #1
 8000eda:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000ede:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000ee2:	428b      	cmp	r3, r1
 8000ee4:	bf24      	itt	cs
 8000ee6:	1a5b      	subcs	r3, r3, r1
 8000ee8:	ea40 000c 	orrcs.w	r0, r0, ip
 8000eec:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000ef0:	bf24      	itt	cs
 8000ef2:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000ef6:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000efa:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000efe:	bf24      	itt	cs
 8000f00:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000f04:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000f08:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000f0c:	bf24      	itt	cs
 8000f0e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000f12:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000f16:	011b      	lsls	r3, r3, #4
 8000f18:	bf18      	it	ne
 8000f1a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000f1e:	d1e0      	bne.n	8000ee2 <__aeabi_fdiv+0x46>
 8000f20:	2afd      	cmp	r2, #253	; 0xfd
 8000f22:	f63f af50 	bhi.w	8000dc6 <__aeabi_fmul+0x92>
 8000f26:	428b      	cmp	r3, r1
 8000f28:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000f2c:	bf08      	it	eq
 8000f2e:	f020 0001 	biceq.w	r0, r0, #1
 8000f32:	4770      	bx	lr
 8000f34:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000f38:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000f3c:	327f      	adds	r2, #127	; 0x7f
 8000f3e:	bfc2      	ittt	gt
 8000f40:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000f44:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000f48:	4770      	bxgt	lr
 8000f4a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000f4e:	f04f 0300 	mov.w	r3, #0
 8000f52:	3a01      	subs	r2, #1
 8000f54:	e737      	b.n	8000dc6 <__aeabi_fmul+0x92>
 8000f56:	f092 0f00 	teq	r2, #0
 8000f5a:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000f5e:	bf02      	ittt	eq
 8000f60:	0040      	lsleq	r0, r0, #1
 8000f62:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000f66:	3a01      	subeq	r2, #1
 8000f68:	d0f9      	beq.n	8000f5e <__aeabi_fdiv+0xc2>
 8000f6a:	ea40 000c 	orr.w	r0, r0, ip
 8000f6e:	f093 0f00 	teq	r3, #0
 8000f72:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000f76:	bf02      	ittt	eq
 8000f78:	0049      	lsleq	r1, r1, #1
 8000f7a:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000f7e:	3b01      	subeq	r3, #1
 8000f80:	d0f9      	beq.n	8000f76 <__aeabi_fdiv+0xda>
 8000f82:	ea41 010c 	orr.w	r1, r1, ip
 8000f86:	e795      	b.n	8000eb4 <__aeabi_fdiv+0x18>
 8000f88:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000f8c:	ea92 0f0c 	teq	r2, ip
 8000f90:	d108      	bne.n	8000fa4 <__aeabi_fdiv+0x108>
 8000f92:	0242      	lsls	r2, r0, #9
 8000f94:	f47f af7d 	bne.w	8000e92 <__aeabi_fmul+0x15e>
 8000f98:	ea93 0f0c 	teq	r3, ip
 8000f9c:	f47f af70 	bne.w	8000e80 <__aeabi_fmul+0x14c>
 8000fa0:	4608      	mov	r0, r1
 8000fa2:	e776      	b.n	8000e92 <__aeabi_fmul+0x15e>
 8000fa4:	ea93 0f0c 	teq	r3, ip
 8000fa8:	d104      	bne.n	8000fb4 <__aeabi_fdiv+0x118>
 8000faa:	024b      	lsls	r3, r1, #9
 8000fac:	f43f af4c 	beq.w	8000e48 <__aeabi_fmul+0x114>
 8000fb0:	4608      	mov	r0, r1
 8000fb2:	e76e      	b.n	8000e92 <__aeabi_fmul+0x15e>
 8000fb4:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000fb8:	bf18      	it	ne
 8000fba:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000fbe:	d1ca      	bne.n	8000f56 <__aeabi_fdiv+0xba>
 8000fc0:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000fc4:	f47f af5c 	bne.w	8000e80 <__aeabi_fmul+0x14c>
 8000fc8:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000fcc:	f47f af3c 	bne.w	8000e48 <__aeabi_fmul+0x114>
 8000fd0:	e75f      	b.n	8000e92 <__aeabi_fmul+0x15e>
 8000fd2:	bf00      	nop

08000fd4 <__gesf2>:
 8000fd4:	f04f 3cff 	mov.w	ip, #4294967295
 8000fd8:	e006      	b.n	8000fe8 <__cmpsf2+0x4>
 8000fda:	bf00      	nop

08000fdc <__lesf2>:
 8000fdc:	f04f 0c01 	mov.w	ip, #1
 8000fe0:	e002      	b.n	8000fe8 <__cmpsf2+0x4>
 8000fe2:	bf00      	nop

08000fe4 <__cmpsf2>:
 8000fe4:	f04f 0c01 	mov.w	ip, #1
 8000fe8:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000fec:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000ff0:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000ff4:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000ff8:	bf18      	it	ne
 8000ffa:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000ffe:	d011      	beq.n	8001024 <__cmpsf2+0x40>
 8001000:	b001      	add	sp, #4
 8001002:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8001006:	bf18      	it	ne
 8001008:	ea90 0f01 	teqne	r0, r1
 800100c:	bf58      	it	pl
 800100e:	ebb2 0003 	subspl.w	r0, r2, r3
 8001012:	bf88      	it	hi
 8001014:	17c8      	asrhi	r0, r1, #31
 8001016:	bf38      	it	cc
 8001018:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 800101c:	bf18      	it	ne
 800101e:	f040 0001 	orrne.w	r0, r0, #1
 8001022:	4770      	bx	lr
 8001024:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001028:	d102      	bne.n	8001030 <__cmpsf2+0x4c>
 800102a:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 800102e:	d105      	bne.n	800103c <__cmpsf2+0x58>
 8001030:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8001034:	d1e4      	bne.n	8001000 <__cmpsf2+0x1c>
 8001036:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 800103a:	d0e1      	beq.n	8001000 <__cmpsf2+0x1c>
 800103c:	f85d 0b04 	ldr.w	r0, [sp], #4
 8001040:	4770      	bx	lr
 8001042:	bf00      	nop

08001044 <__aeabi_cfrcmple>:
 8001044:	4684      	mov	ip, r0
 8001046:	4608      	mov	r0, r1
 8001048:	4661      	mov	r1, ip
 800104a:	e7ff      	b.n	800104c <__aeabi_cfcmpeq>

0800104c <__aeabi_cfcmpeq>:
 800104c:	b50f      	push	{r0, r1, r2, r3, lr}
 800104e:	f7ff ffc9 	bl	8000fe4 <__cmpsf2>
 8001052:	2800      	cmp	r0, #0
 8001054:	bf48      	it	mi
 8001056:	f110 0f00 	cmnmi.w	r0, #0
 800105a:	bd0f      	pop	{r0, r1, r2, r3, pc}

0800105c <__aeabi_fcmpeq>:
 800105c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001060:	f7ff fff4 	bl	800104c <__aeabi_cfcmpeq>
 8001064:	bf0c      	ite	eq
 8001066:	2001      	moveq	r0, #1
 8001068:	2000      	movne	r0, #0
 800106a:	f85d fb08 	ldr.w	pc, [sp], #8
 800106e:	bf00      	nop

08001070 <__aeabi_fcmplt>:
 8001070:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001074:	f7ff ffea 	bl	800104c <__aeabi_cfcmpeq>
 8001078:	bf34      	ite	cc
 800107a:	2001      	movcc	r0, #1
 800107c:	2000      	movcs	r0, #0
 800107e:	f85d fb08 	ldr.w	pc, [sp], #8
 8001082:	bf00      	nop

08001084 <__aeabi_fcmple>:
 8001084:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001088:	f7ff ffe0 	bl	800104c <__aeabi_cfcmpeq>
 800108c:	bf94      	ite	ls
 800108e:	2001      	movls	r0, #1
 8001090:	2000      	movhi	r0, #0
 8001092:	f85d fb08 	ldr.w	pc, [sp], #8
 8001096:	bf00      	nop

08001098 <__aeabi_fcmpge>:
 8001098:	f84d ed08 	str.w	lr, [sp, #-8]!
 800109c:	f7ff ffd2 	bl	8001044 <__aeabi_cfrcmple>
 80010a0:	bf94      	ite	ls
 80010a2:	2001      	movls	r0, #1
 80010a4:	2000      	movhi	r0, #0
 80010a6:	f85d fb08 	ldr.w	pc, [sp], #8
 80010aa:	bf00      	nop

080010ac <__aeabi_fcmpgt>:
 80010ac:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010b0:	f7ff ffc8 	bl	8001044 <__aeabi_cfrcmple>
 80010b4:	bf34      	ite	cc
 80010b6:	2001      	movcc	r0, #1
 80010b8:	2000      	movcs	r0, #0
 80010ba:	f85d fb08 	ldr.w	pc, [sp], #8
 80010be:	bf00      	nop

080010c0 <__aeabi_f2uiz>:
 80010c0:	0042      	lsls	r2, r0, #1
 80010c2:	d20e      	bcs.n	80010e2 <__aeabi_f2uiz+0x22>
 80010c4:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 80010c8:	d30b      	bcc.n	80010e2 <__aeabi_f2uiz+0x22>
 80010ca:	f04f 039e 	mov.w	r3, #158	; 0x9e
 80010ce:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 80010d2:	d409      	bmi.n	80010e8 <__aeabi_f2uiz+0x28>
 80010d4:	ea4f 2300 	mov.w	r3, r0, lsl #8
 80010d8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80010dc:	fa23 f002 	lsr.w	r0, r3, r2
 80010e0:	4770      	bx	lr
 80010e2:	f04f 0000 	mov.w	r0, #0
 80010e6:	4770      	bx	lr
 80010e8:	f112 0f61 	cmn.w	r2, #97	; 0x61
 80010ec:	d101      	bne.n	80010f2 <__aeabi_f2uiz+0x32>
 80010ee:	0242      	lsls	r2, r0, #9
 80010f0:	d102      	bne.n	80010f8 <__aeabi_f2uiz+0x38>
 80010f2:	f04f 30ff 	mov.w	r0, #4294967295
 80010f6:	4770      	bx	lr
 80010f8:	f04f 0000 	mov.w	r0, #0
 80010fc:	4770      	bx	lr
 80010fe:	bf00      	nop

08001100 <__aeabi_ldivmod>:
 8001100:	b97b      	cbnz	r3, 8001122 <__aeabi_ldivmod+0x22>
 8001102:	b972      	cbnz	r2, 8001122 <__aeabi_ldivmod+0x22>
 8001104:	2900      	cmp	r1, #0
 8001106:	bfbe      	ittt	lt
 8001108:	2000      	movlt	r0, #0
 800110a:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
 800110e:	e006      	blt.n	800111e <__aeabi_ldivmod+0x1e>
 8001110:	bf08      	it	eq
 8001112:	2800      	cmpeq	r0, #0
 8001114:	bf1c      	itt	ne
 8001116:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
 800111a:	f04f 30ff 	movne.w	r0, #4294967295
 800111e:	f000 b9a9 	b.w	8001474 <__aeabi_idiv0>
 8001122:	f1ad 0c08 	sub.w	ip, sp, #8
 8001126:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800112a:	2900      	cmp	r1, #0
 800112c:	db09      	blt.n	8001142 <__aeabi_ldivmod+0x42>
 800112e:	2b00      	cmp	r3, #0
 8001130:	db1a      	blt.n	8001168 <__aeabi_ldivmod+0x68>
 8001132:	f000 f835 	bl	80011a0 <__udivmoddi4>
 8001136:	f8dd e004 	ldr.w	lr, [sp, #4]
 800113a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800113e:	b004      	add	sp, #16
 8001140:	4770      	bx	lr
 8001142:	4240      	negs	r0, r0
 8001144:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8001148:	2b00      	cmp	r3, #0
 800114a:	db1b      	blt.n	8001184 <__aeabi_ldivmod+0x84>
 800114c:	f000 f828 	bl	80011a0 <__udivmoddi4>
 8001150:	f8dd e004 	ldr.w	lr, [sp, #4]
 8001154:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8001158:	b004      	add	sp, #16
 800115a:	4240      	negs	r0, r0
 800115c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8001160:	4252      	negs	r2, r2
 8001162:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8001166:	4770      	bx	lr
 8001168:	4252      	negs	r2, r2
 800116a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800116e:	f000 f817 	bl	80011a0 <__udivmoddi4>
 8001172:	f8dd e004 	ldr.w	lr, [sp, #4]
 8001176:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800117a:	b004      	add	sp, #16
 800117c:	4240      	negs	r0, r0
 800117e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8001182:	4770      	bx	lr
 8001184:	4252      	negs	r2, r2
 8001186:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800118a:	f000 f809 	bl	80011a0 <__udivmoddi4>
 800118e:	f8dd e004 	ldr.w	lr, [sp, #4]
 8001192:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8001196:	b004      	add	sp, #16
 8001198:	4252      	negs	r2, r2
 800119a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800119e:	4770      	bx	lr

080011a0 <__udivmoddi4>:
 80011a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80011a4:	9e08      	ldr	r6, [sp, #32]
 80011a6:	460d      	mov	r5, r1
 80011a8:	4604      	mov	r4, r0
 80011aa:	4688      	mov	r8, r1
 80011ac:	2b00      	cmp	r3, #0
 80011ae:	d14d      	bne.n	800124c <__udivmoddi4+0xac>
 80011b0:	428a      	cmp	r2, r1
 80011b2:	4694      	mov	ip, r2
 80011b4:	d968      	bls.n	8001288 <__udivmoddi4+0xe8>
 80011b6:	fab2 f282 	clz	r2, r2
 80011ba:	b152      	cbz	r2, 80011d2 <__udivmoddi4+0x32>
 80011bc:	fa01 f302 	lsl.w	r3, r1, r2
 80011c0:	f1c2 0120 	rsb	r1, r2, #32
 80011c4:	fa20 f101 	lsr.w	r1, r0, r1
 80011c8:	fa0c fc02 	lsl.w	ip, ip, r2
 80011cc:	ea41 0803 	orr.w	r8, r1, r3
 80011d0:	4094      	lsls	r4, r2
 80011d2:	ea4f 411c 	mov.w	r1, ip, lsr #16
 80011d6:	fbb8 f7f1 	udiv	r7, r8, r1
 80011da:	fa1f fe8c 	uxth.w	lr, ip
 80011de:	fb01 8817 	mls	r8, r1, r7, r8
 80011e2:	fb07 f00e 	mul.w	r0, r7, lr
 80011e6:	0c23      	lsrs	r3, r4, #16
 80011e8:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80011ec:	4298      	cmp	r0, r3
 80011ee:	d90a      	bls.n	8001206 <__udivmoddi4+0x66>
 80011f0:	eb1c 0303 	adds.w	r3, ip, r3
 80011f4:	f107 35ff 	add.w	r5, r7, #4294967295
 80011f8:	f080 811e 	bcs.w	8001438 <__udivmoddi4+0x298>
 80011fc:	4298      	cmp	r0, r3
 80011fe:	f240 811b 	bls.w	8001438 <__udivmoddi4+0x298>
 8001202:	3f02      	subs	r7, #2
 8001204:	4463      	add	r3, ip
 8001206:	1a1b      	subs	r3, r3, r0
 8001208:	fbb3 f0f1 	udiv	r0, r3, r1
 800120c:	fb01 3310 	mls	r3, r1, r0, r3
 8001210:	fb00 fe0e 	mul.w	lr, r0, lr
 8001214:	b2a4      	uxth	r4, r4
 8001216:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800121a:	45a6      	cmp	lr, r4
 800121c:	d90a      	bls.n	8001234 <__udivmoddi4+0x94>
 800121e:	eb1c 0404 	adds.w	r4, ip, r4
 8001222:	f100 33ff 	add.w	r3, r0, #4294967295
 8001226:	f080 8109 	bcs.w	800143c <__udivmoddi4+0x29c>
 800122a:	45a6      	cmp	lr, r4
 800122c:	f240 8106 	bls.w	800143c <__udivmoddi4+0x29c>
 8001230:	4464      	add	r4, ip
 8001232:	3802      	subs	r0, #2
 8001234:	2100      	movs	r1, #0
 8001236:	eba4 040e 	sub.w	r4, r4, lr
 800123a:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 800123e:	b11e      	cbz	r6, 8001248 <__udivmoddi4+0xa8>
 8001240:	2300      	movs	r3, #0
 8001242:	40d4      	lsrs	r4, r2
 8001244:	e9c6 4300 	strd	r4, r3, [r6]
 8001248:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800124c:	428b      	cmp	r3, r1
 800124e:	d908      	bls.n	8001262 <__udivmoddi4+0xc2>
 8001250:	2e00      	cmp	r6, #0
 8001252:	f000 80ee 	beq.w	8001432 <__udivmoddi4+0x292>
 8001256:	2100      	movs	r1, #0
 8001258:	e9c6 0500 	strd	r0, r5, [r6]
 800125c:	4608      	mov	r0, r1
 800125e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001262:	fab3 f183 	clz	r1, r3
 8001266:	2900      	cmp	r1, #0
 8001268:	d14a      	bne.n	8001300 <__udivmoddi4+0x160>
 800126a:	42ab      	cmp	r3, r5
 800126c:	d302      	bcc.n	8001274 <__udivmoddi4+0xd4>
 800126e:	4282      	cmp	r2, r0
 8001270:	f200 80fc 	bhi.w	800146c <__udivmoddi4+0x2cc>
 8001274:	1a84      	subs	r4, r0, r2
 8001276:	eb65 0303 	sbc.w	r3, r5, r3
 800127a:	2001      	movs	r0, #1
 800127c:	4698      	mov	r8, r3
 800127e:	2e00      	cmp	r6, #0
 8001280:	d0e2      	beq.n	8001248 <__udivmoddi4+0xa8>
 8001282:	e9c6 4800 	strd	r4, r8, [r6]
 8001286:	e7df      	b.n	8001248 <__udivmoddi4+0xa8>
 8001288:	b902      	cbnz	r2, 800128c <__udivmoddi4+0xec>
 800128a:	deff      	udf	#255	; 0xff
 800128c:	fab2 f282 	clz	r2, r2
 8001290:	2a00      	cmp	r2, #0
 8001292:	f040 8091 	bne.w	80013b8 <__udivmoddi4+0x218>
 8001296:	eba1 000c 	sub.w	r0, r1, ip
 800129a:	2101      	movs	r1, #1
 800129c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80012a0:	fa1f fe8c 	uxth.w	lr, ip
 80012a4:	fbb0 f3f7 	udiv	r3, r0, r7
 80012a8:	fb07 0013 	mls	r0, r7, r3, r0
 80012ac:	0c25      	lsrs	r5, r4, #16
 80012ae:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
 80012b2:	fb0e f003 	mul.w	r0, lr, r3
 80012b6:	42a8      	cmp	r0, r5
 80012b8:	d908      	bls.n	80012cc <__udivmoddi4+0x12c>
 80012ba:	eb1c 0505 	adds.w	r5, ip, r5
 80012be:	f103 38ff 	add.w	r8, r3, #4294967295
 80012c2:	d202      	bcs.n	80012ca <__udivmoddi4+0x12a>
 80012c4:	42a8      	cmp	r0, r5
 80012c6:	f200 80ce 	bhi.w	8001466 <__udivmoddi4+0x2c6>
 80012ca:	4643      	mov	r3, r8
 80012cc:	1a2d      	subs	r5, r5, r0
 80012ce:	fbb5 f0f7 	udiv	r0, r5, r7
 80012d2:	fb07 5510 	mls	r5, r7, r0, r5
 80012d6:	fb0e fe00 	mul.w	lr, lr, r0
 80012da:	b2a4      	uxth	r4, r4
 80012dc:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80012e0:	45a6      	cmp	lr, r4
 80012e2:	d908      	bls.n	80012f6 <__udivmoddi4+0x156>
 80012e4:	eb1c 0404 	adds.w	r4, ip, r4
 80012e8:	f100 35ff 	add.w	r5, r0, #4294967295
 80012ec:	d202      	bcs.n	80012f4 <__udivmoddi4+0x154>
 80012ee:	45a6      	cmp	lr, r4
 80012f0:	f200 80b6 	bhi.w	8001460 <__udivmoddi4+0x2c0>
 80012f4:	4628      	mov	r0, r5
 80012f6:	eba4 040e 	sub.w	r4, r4, lr
 80012fa:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80012fe:	e79e      	b.n	800123e <__udivmoddi4+0x9e>
 8001300:	f1c1 0720 	rsb	r7, r1, #32
 8001304:	408b      	lsls	r3, r1
 8001306:	fa22 fc07 	lsr.w	ip, r2, r7
 800130a:	ea4c 0c03 	orr.w	ip, ip, r3
 800130e:	fa25 fa07 	lsr.w	sl, r5, r7
 8001312:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8001316:	fbba f8f9 	udiv	r8, sl, r9
 800131a:	fa20 f307 	lsr.w	r3, r0, r7
 800131e:	fb09 aa18 	mls	sl, r9, r8, sl
 8001322:	408d      	lsls	r5, r1
 8001324:	fa1f fe8c 	uxth.w	lr, ip
 8001328:	431d      	orrs	r5, r3
 800132a:	fa00 f301 	lsl.w	r3, r0, r1
 800132e:	fb08 f00e 	mul.w	r0, r8, lr
 8001332:	0c2c      	lsrs	r4, r5, #16
 8001334:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8001338:	42a0      	cmp	r0, r4
 800133a:	fa02 f201 	lsl.w	r2, r2, r1
 800133e:	d90b      	bls.n	8001358 <__udivmoddi4+0x1b8>
 8001340:	eb1c 0404 	adds.w	r4, ip, r4
 8001344:	f108 3aff 	add.w	sl, r8, #4294967295
 8001348:	f080 8088 	bcs.w	800145c <__udivmoddi4+0x2bc>
 800134c:	42a0      	cmp	r0, r4
 800134e:	f240 8085 	bls.w	800145c <__udivmoddi4+0x2bc>
 8001352:	f1a8 0802 	sub.w	r8, r8, #2
 8001356:	4464      	add	r4, ip
 8001358:	1a24      	subs	r4, r4, r0
 800135a:	fbb4 f0f9 	udiv	r0, r4, r9
 800135e:	fb09 4410 	mls	r4, r9, r0, r4
 8001362:	fb00 fe0e 	mul.w	lr, r0, lr
 8001366:	b2ad      	uxth	r5, r5
 8001368:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 800136c:	45a6      	cmp	lr, r4
 800136e:	d908      	bls.n	8001382 <__udivmoddi4+0x1e2>
 8001370:	eb1c 0404 	adds.w	r4, ip, r4
 8001374:	f100 35ff 	add.w	r5, r0, #4294967295
 8001378:	d26c      	bcs.n	8001454 <__udivmoddi4+0x2b4>
 800137a:	45a6      	cmp	lr, r4
 800137c:	d96a      	bls.n	8001454 <__udivmoddi4+0x2b4>
 800137e:	3802      	subs	r0, #2
 8001380:	4464      	add	r4, ip
 8001382:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8001386:	fba0 9502 	umull	r9, r5, r0, r2
 800138a:	eba4 040e 	sub.w	r4, r4, lr
 800138e:	42ac      	cmp	r4, r5
 8001390:	46c8      	mov	r8, r9
 8001392:	46ae      	mov	lr, r5
 8001394:	d356      	bcc.n	8001444 <__udivmoddi4+0x2a4>
 8001396:	d053      	beq.n	8001440 <__udivmoddi4+0x2a0>
 8001398:	2e00      	cmp	r6, #0
 800139a:	d069      	beq.n	8001470 <__udivmoddi4+0x2d0>
 800139c:	ebb3 0208 	subs.w	r2, r3, r8
 80013a0:	eb64 040e 	sbc.w	r4, r4, lr
 80013a4:	fa22 f301 	lsr.w	r3, r2, r1
 80013a8:	fa04 f707 	lsl.w	r7, r4, r7
 80013ac:	431f      	orrs	r7, r3
 80013ae:	40cc      	lsrs	r4, r1
 80013b0:	e9c6 7400 	strd	r7, r4, [r6]
 80013b4:	2100      	movs	r1, #0
 80013b6:	e747      	b.n	8001248 <__udivmoddi4+0xa8>
 80013b8:	fa0c fc02 	lsl.w	ip, ip, r2
 80013bc:	f1c2 0120 	rsb	r1, r2, #32
 80013c0:	fa25 f301 	lsr.w	r3, r5, r1
 80013c4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80013c8:	fa20 f101 	lsr.w	r1, r0, r1
 80013cc:	4095      	lsls	r5, r2
 80013ce:	430d      	orrs	r5, r1
 80013d0:	fbb3 f1f7 	udiv	r1, r3, r7
 80013d4:	fb07 3311 	mls	r3, r7, r1, r3
 80013d8:	fa1f fe8c 	uxth.w	lr, ip
 80013dc:	0c28      	lsrs	r0, r5, #16
 80013de:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80013e2:	fb01 f30e 	mul.w	r3, r1, lr
 80013e6:	4283      	cmp	r3, r0
 80013e8:	fa04 f402 	lsl.w	r4, r4, r2
 80013ec:	d908      	bls.n	8001400 <__udivmoddi4+0x260>
 80013ee:	eb1c 0000 	adds.w	r0, ip, r0
 80013f2:	f101 38ff 	add.w	r8, r1, #4294967295
 80013f6:	d22f      	bcs.n	8001458 <__udivmoddi4+0x2b8>
 80013f8:	4283      	cmp	r3, r0
 80013fa:	d92d      	bls.n	8001458 <__udivmoddi4+0x2b8>
 80013fc:	3902      	subs	r1, #2
 80013fe:	4460      	add	r0, ip
 8001400:	1ac0      	subs	r0, r0, r3
 8001402:	fbb0 f3f7 	udiv	r3, r0, r7
 8001406:	fb07 0013 	mls	r0, r7, r3, r0
 800140a:	b2ad      	uxth	r5, r5
 800140c:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
 8001410:	fb03 f00e 	mul.w	r0, r3, lr
 8001414:	42a8      	cmp	r0, r5
 8001416:	d908      	bls.n	800142a <__udivmoddi4+0x28a>
 8001418:	eb1c 0505 	adds.w	r5, ip, r5
 800141c:	f103 38ff 	add.w	r8, r3, #4294967295
 8001420:	d216      	bcs.n	8001450 <__udivmoddi4+0x2b0>
 8001422:	42a8      	cmp	r0, r5
 8001424:	d914      	bls.n	8001450 <__udivmoddi4+0x2b0>
 8001426:	3b02      	subs	r3, #2
 8001428:	4465      	add	r5, ip
 800142a:	1a28      	subs	r0, r5, r0
 800142c:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8001430:	e738      	b.n	80012a4 <__udivmoddi4+0x104>
 8001432:	4631      	mov	r1, r6
 8001434:	4630      	mov	r0, r6
 8001436:	e707      	b.n	8001248 <__udivmoddi4+0xa8>
 8001438:	462f      	mov	r7, r5
 800143a:	e6e4      	b.n	8001206 <__udivmoddi4+0x66>
 800143c:	4618      	mov	r0, r3
 800143e:	e6f9      	b.n	8001234 <__udivmoddi4+0x94>
 8001440:	454b      	cmp	r3, r9
 8001442:	d2a9      	bcs.n	8001398 <__udivmoddi4+0x1f8>
 8001444:	ebb9 0802 	subs.w	r8, r9, r2
 8001448:	eb65 0e0c 	sbc.w	lr, r5, ip
 800144c:	3801      	subs	r0, #1
 800144e:	e7a3      	b.n	8001398 <__udivmoddi4+0x1f8>
 8001450:	4643      	mov	r3, r8
 8001452:	e7ea      	b.n	800142a <__udivmoddi4+0x28a>
 8001454:	4628      	mov	r0, r5
 8001456:	e794      	b.n	8001382 <__udivmoddi4+0x1e2>
 8001458:	4641      	mov	r1, r8
 800145a:	e7d1      	b.n	8001400 <__udivmoddi4+0x260>
 800145c:	46d0      	mov	r8, sl
 800145e:	e77b      	b.n	8001358 <__udivmoddi4+0x1b8>
 8001460:	4464      	add	r4, ip
 8001462:	3802      	subs	r0, #2
 8001464:	e747      	b.n	80012f6 <__udivmoddi4+0x156>
 8001466:	3b02      	subs	r3, #2
 8001468:	4465      	add	r5, ip
 800146a:	e72f      	b.n	80012cc <__udivmoddi4+0x12c>
 800146c:	4608      	mov	r0, r1
 800146e:	e706      	b.n	800127e <__udivmoddi4+0xde>
 8001470:	4631      	mov	r1, r6
 8001472:	e6e9      	b.n	8001248 <__udivmoddi4+0xa8>

08001474 <__aeabi_idiv0>:
 8001474:	4770      	bx	lr
 8001476:	bf00      	nop

08001478 <writeRegister>:
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_SET);//spiCSNhigh();
	return value;
}

void writeRegister(uint8_t address, uint8_t value)
{
 8001478:	b580      	push	{r7, lr}
 800147a:	b082      	sub	sp, #8
 800147c:	af00      	add	r7, sp, #0
 800147e:	4603      	mov	r3, r0
 8001480:	460a      	mov	r2, r1
 8001482:	71fb      	strb	r3, [r7, #7]
 8001484:	4613      	mov	r3, r2
 8001486:	71bb      	strb	r3, [r7, #6]
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_RESET);//spiCSNlow();
 8001488:	2200      	movs	r2, #0
 800148a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800148e:	480c      	ldr	r0, [pc, #48]	; (80014c0 <writeRegister+0x48>)
 8001490:	f002 f9ff 	bl	8003892 <HAL_GPIO_WritePin>
	spiReadWrite(address & BMP280_SPI_MASK_WRITE);
 8001494:	79fb      	ldrb	r3, [r7, #7]
 8001496:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800149a:	b2db      	uxtb	r3, r3
 800149c:	4618      	mov	r0, r3
 800149e:	f000 f83d 	bl	800151c <spiReadWrite>
	spiReadWrite(value);
 80014a2:	79bb      	ldrb	r3, [r7, #6]
 80014a4:	4618      	mov	r0, r3
 80014a6:	f000 f839 	bl	800151c <spiReadWrite>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_SET);//spiCSNhigh();
 80014aa:	2201      	movs	r2, #1
 80014ac:	f44f 7180 	mov.w	r1, #256	; 0x100
 80014b0:	4803      	ldr	r0, [pc, #12]	; (80014c0 <writeRegister+0x48>)
 80014b2:	f002 f9ee 	bl	8003892 <HAL_GPIO_WritePin>
}
 80014b6:	bf00      	nop
 80014b8:	3708      	adds	r7, #8
 80014ba:	46bd      	mov	sp, r7
 80014bc:	bd80      	pop	{r7, pc}
 80014be:	bf00      	nop
 80014c0:	40010800 	.word	0x40010800

080014c4 <readMBRegister>:

void readMBRegister(uint8_t address, uint8_t *values, uint8_t length)
{
 80014c4:	b590      	push	{r4, r7, lr}
 80014c6:	b083      	sub	sp, #12
 80014c8:	af00      	add	r7, sp, #0
 80014ca:	4603      	mov	r3, r0
 80014cc:	6039      	str	r1, [r7, #0]
 80014ce:	71fb      	strb	r3, [r7, #7]
 80014d0:	4613      	mov	r3, r2
 80014d2:	71bb      	strb	r3, [r7, #6]
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_RESET);//spiCSNlow();
 80014d4:	2200      	movs	r2, #0
 80014d6:	f44f 7180 	mov.w	r1, #256	; 0x100
 80014da:	480f      	ldr	r0, [pc, #60]	; (8001518 <readMBRegister+0x54>)
 80014dc:	f002 f9d9 	bl	8003892 <HAL_GPIO_WritePin>
	spiReadWrite(address);
 80014e0:	79fb      	ldrb	r3, [r7, #7]
 80014e2:	4618      	mov	r0, r3
 80014e4:	f000 f81a 	bl	800151c <spiReadWrite>
	while (length--)
 80014e8:	e007      	b.n	80014fa <readMBRegister+0x36>
	{
		*values++ = spiReadWrite(0);
 80014ea:	683c      	ldr	r4, [r7, #0]
 80014ec:	1c63      	adds	r3, r4, #1
 80014ee:	603b      	str	r3, [r7, #0]
 80014f0:	2000      	movs	r0, #0
 80014f2:	f000 f813 	bl	800151c <spiReadWrite>
 80014f6:	4603      	mov	r3, r0
 80014f8:	7023      	strb	r3, [r4, #0]
	while (length--)
 80014fa:	79bb      	ldrb	r3, [r7, #6]
 80014fc:	1e5a      	subs	r2, r3, #1
 80014fe:	71ba      	strb	r2, [r7, #6]
 8001500:	2b00      	cmp	r3, #0
 8001502:	d1f2      	bne.n	80014ea <readMBRegister+0x26>
	}
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_SET);//spiCSNhigh();
 8001504:	2201      	movs	r2, #1
 8001506:	f44f 7180 	mov.w	r1, #256	; 0x100
 800150a:	4803      	ldr	r0, [pc, #12]	; (8001518 <readMBRegister+0x54>)
 800150c:	f002 f9c1 	bl	8003892 <HAL_GPIO_WritePin>
}
 8001510:	bf00      	nop
 8001512:	370c      	adds	r7, #12
 8001514:	46bd      	mov	sp, r7
 8001516:	bd90      	pop	{r4, r7, pc}
 8001518:	40010800 	.word	0x40010800

0800151c <spiReadWrite>:

uint8_t spiReadWrite(uint8_t tx_message)
{
 800151c:	b580      	push	{r7, lr}
 800151e:	b086      	sub	sp, #24
 8001520:	af02      	add	r7, sp, #8
 8001522:	4603      	mov	r3, r0
 8001524:	71fb      	strb	r3, [r7, #7]
	uint8_t rx_message = 255;
 8001526:	23ff      	movs	r3, #255	; 0xff
 8001528:	73fb      	strb	r3, [r7, #15]
	HAL_SPI_TransmitReceive(&hspi2, &tx_message, &rx_message, 1,HAL_MAX_DELAY);
 800152a:	f107 020f 	add.w	r2, r7, #15
 800152e:	1df9      	adds	r1, r7, #7
 8001530:	f04f 33ff 	mov.w	r3, #4294967295
 8001534:	9300      	str	r3, [sp, #0]
 8001536:	2301      	movs	r3, #1
 8001538:	4803      	ldr	r0, [pc, #12]	; (8001548 <spiReadWrite+0x2c>)
 800153a:	f003 fab9 	bl	8004ab0 <HAL_SPI_TransmitReceive>
	return rx_message;
 800153e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001540:	4618      	mov	r0, r3
 8001542:	3710      	adds	r7, #16
 8001544:	46bd      	mov	sp, r7
 8001546:	bd80      	pop	{r7, pc}
 8001548:	20000168 	.word	0x20000168

0800154c <BMP280_get_calib_values>:


void BMP280_get_calib_values(void)
{
 800154c:	b580      	push	{r7, lr}
 800154e:	b086      	sub	sp, #24
 8001550:	af00      	add	r7, sp, #0
	uint8_t rx_buff[24];
	readMBRegister(BMP280_REG_CALIB, rx_buff, 24);
 8001552:	463b      	mov	r3, r7
 8001554:	2218      	movs	r2, #24
 8001556:	4619      	mov	r1, r3
 8001558:	2088      	movs	r0, #136	; 0x88
 800155a:	f7ff ffb3 	bl	80014c4 <readMBRegister>

	dig_T1=(rx_buff[0])+(rx_buff[1]<<8);
 800155e:	783b      	ldrb	r3, [r7, #0]
 8001560:	b29a      	uxth	r2, r3
 8001562:	787b      	ldrb	r3, [r7, #1]
 8001564:	b29b      	uxth	r3, r3
 8001566:	021b      	lsls	r3, r3, #8
 8001568:	b29b      	uxth	r3, r3
 800156a:	4413      	add	r3, r2
 800156c:	b29a      	uxth	r2, r3
 800156e:	4b3f      	ldr	r3, [pc, #252]	; (800166c <BMP280_get_calib_values+0x120>)
 8001570:	801a      	strh	r2, [r3, #0]
	dig_T2=(rx_buff[2])+(rx_buff[3]<<8);
 8001572:	78bb      	ldrb	r3, [r7, #2]
 8001574:	b29a      	uxth	r2, r3
 8001576:	78fb      	ldrb	r3, [r7, #3]
 8001578:	b29b      	uxth	r3, r3
 800157a:	021b      	lsls	r3, r3, #8
 800157c:	b29b      	uxth	r3, r3
 800157e:	4413      	add	r3, r2
 8001580:	b29b      	uxth	r3, r3
 8001582:	b21a      	sxth	r2, r3
 8001584:	4b3a      	ldr	r3, [pc, #232]	; (8001670 <BMP280_get_calib_values+0x124>)
 8001586:	801a      	strh	r2, [r3, #0]
	dig_T3=(rx_buff[4])+(rx_buff[5]<<8);
 8001588:	793b      	ldrb	r3, [r7, #4]
 800158a:	b29a      	uxth	r2, r3
 800158c:	797b      	ldrb	r3, [r7, #5]
 800158e:	b29b      	uxth	r3, r3
 8001590:	021b      	lsls	r3, r3, #8
 8001592:	b29b      	uxth	r3, r3
 8001594:	4413      	add	r3, r2
 8001596:	b29b      	uxth	r3, r3
 8001598:	b21a      	sxth	r2, r3
 800159a:	4b36      	ldr	r3, [pc, #216]	; (8001674 <BMP280_get_calib_values+0x128>)
 800159c:	801a      	strh	r2, [r3, #0]
	dig_P1=(rx_buff[6])+(rx_buff[7]<<8);
 800159e:	79bb      	ldrb	r3, [r7, #6]
 80015a0:	b29a      	uxth	r2, r3
 80015a2:	79fb      	ldrb	r3, [r7, #7]
 80015a4:	b29b      	uxth	r3, r3
 80015a6:	021b      	lsls	r3, r3, #8
 80015a8:	b29b      	uxth	r3, r3
 80015aa:	4413      	add	r3, r2
 80015ac:	b29a      	uxth	r2, r3
 80015ae:	4b32      	ldr	r3, [pc, #200]	; (8001678 <BMP280_get_calib_values+0x12c>)
 80015b0:	801a      	strh	r2, [r3, #0]
	dig_P2=(rx_buff[8])+(rx_buff[9]<<8);
 80015b2:	7a3b      	ldrb	r3, [r7, #8]
 80015b4:	b29a      	uxth	r2, r3
 80015b6:	7a7b      	ldrb	r3, [r7, #9]
 80015b8:	b29b      	uxth	r3, r3
 80015ba:	021b      	lsls	r3, r3, #8
 80015bc:	b29b      	uxth	r3, r3
 80015be:	4413      	add	r3, r2
 80015c0:	b29b      	uxth	r3, r3
 80015c2:	b21a      	sxth	r2, r3
 80015c4:	4b2d      	ldr	r3, [pc, #180]	; (800167c <BMP280_get_calib_values+0x130>)
 80015c6:	801a      	strh	r2, [r3, #0]
	dig_P3=(rx_buff[10])+(rx_buff[11]<<8);
 80015c8:	7abb      	ldrb	r3, [r7, #10]
 80015ca:	b29a      	uxth	r2, r3
 80015cc:	7afb      	ldrb	r3, [r7, #11]
 80015ce:	b29b      	uxth	r3, r3
 80015d0:	021b      	lsls	r3, r3, #8
 80015d2:	b29b      	uxth	r3, r3
 80015d4:	4413      	add	r3, r2
 80015d6:	b29b      	uxth	r3, r3
 80015d8:	b21a      	sxth	r2, r3
 80015da:	4b29      	ldr	r3, [pc, #164]	; (8001680 <BMP280_get_calib_values+0x134>)
 80015dc:	801a      	strh	r2, [r3, #0]
	dig_P4=(rx_buff[12])+(rx_buff[13]<<8);
 80015de:	7b3b      	ldrb	r3, [r7, #12]
 80015e0:	b29a      	uxth	r2, r3
 80015e2:	7b7b      	ldrb	r3, [r7, #13]
 80015e4:	b29b      	uxth	r3, r3
 80015e6:	021b      	lsls	r3, r3, #8
 80015e8:	b29b      	uxth	r3, r3
 80015ea:	4413      	add	r3, r2
 80015ec:	b29b      	uxth	r3, r3
 80015ee:	b21a      	sxth	r2, r3
 80015f0:	4b24      	ldr	r3, [pc, #144]	; (8001684 <BMP280_get_calib_values+0x138>)
 80015f2:	801a      	strh	r2, [r3, #0]
	dig_P5=(rx_buff[14])+(rx_buff[15]<<8);
 80015f4:	7bbb      	ldrb	r3, [r7, #14]
 80015f6:	b29a      	uxth	r2, r3
 80015f8:	7bfb      	ldrb	r3, [r7, #15]
 80015fa:	b29b      	uxth	r3, r3
 80015fc:	021b      	lsls	r3, r3, #8
 80015fe:	b29b      	uxth	r3, r3
 8001600:	4413      	add	r3, r2
 8001602:	b29b      	uxth	r3, r3
 8001604:	b21a      	sxth	r2, r3
 8001606:	4b20      	ldr	r3, [pc, #128]	; (8001688 <BMP280_get_calib_values+0x13c>)
 8001608:	801a      	strh	r2, [r3, #0]
	dig_P6=(rx_buff[16])+(rx_buff[17]<<8);
 800160a:	7c3b      	ldrb	r3, [r7, #16]
 800160c:	b29a      	uxth	r2, r3
 800160e:	7c7b      	ldrb	r3, [r7, #17]
 8001610:	b29b      	uxth	r3, r3
 8001612:	021b      	lsls	r3, r3, #8
 8001614:	b29b      	uxth	r3, r3
 8001616:	4413      	add	r3, r2
 8001618:	b29b      	uxth	r3, r3
 800161a:	b21a      	sxth	r2, r3
 800161c:	4b1b      	ldr	r3, [pc, #108]	; (800168c <BMP280_get_calib_values+0x140>)
 800161e:	801a      	strh	r2, [r3, #0]
	dig_P7=(rx_buff[18])+(rx_buff[19]<<8);
 8001620:	7cbb      	ldrb	r3, [r7, #18]
 8001622:	b29a      	uxth	r2, r3
 8001624:	7cfb      	ldrb	r3, [r7, #19]
 8001626:	b29b      	uxth	r3, r3
 8001628:	021b      	lsls	r3, r3, #8
 800162a:	b29b      	uxth	r3, r3
 800162c:	4413      	add	r3, r2
 800162e:	b29b      	uxth	r3, r3
 8001630:	b21a      	sxth	r2, r3
 8001632:	4b17      	ldr	r3, [pc, #92]	; (8001690 <BMP280_get_calib_values+0x144>)
 8001634:	801a      	strh	r2, [r3, #0]
	dig_P8=(rx_buff[20])+(rx_buff[21]<<8);
 8001636:	7d3b      	ldrb	r3, [r7, #20]
 8001638:	b29a      	uxth	r2, r3
 800163a:	7d7b      	ldrb	r3, [r7, #21]
 800163c:	b29b      	uxth	r3, r3
 800163e:	021b      	lsls	r3, r3, #8
 8001640:	b29b      	uxth	r3, r3
 8001642:	4413      	add	r3, r2
 8001644:	b29b      	uxth	r3, r3
 8001646:	b21a      	sxth	r2, r3
 8001648:	4b12      	ldr	r3, [pc, #72]	; (8001694 <BMP280_get_calib_values+0x148>)
 800164a:	801a      	strh	r2, [r3, #0]
	dig_P9=(rx_buff[22])+(rx_buff[23]<<8);
 800164c:	7dbb      	ldrb	r3, [r7, #22]
 800164e:	b29a      	uxth	r2, r3
 8001650:	7dfb      	ldrb	r3, [r7, #23]
 8001652:	b29b      	uxth	r3, r3
 8001654:	021b      	lsls	r3, r3, #8
 8001656:	b29b      	uxth	r3, r3
 8001658:	4413      	add	r3, r2
 800165a:	b29b      	uxth	r3, r3
 800165c:	b21a      	sxth	r2, r3
 800165e:	4b0e      	ldr	r3, [pc, #56]	; (8001698 <BMP280_get_calib_values+0x14c>)
 8001660:	801a      	strh	r2, [r3, #0]

}
 8001662:	bf00      	nop
 8001664:	3718      	adds	r7, #24
 8001666:	46bd      	mov	sp, r7
 8001668:	bd80      	pop	{r7, pc}
 800166a:	bf00      	nop
 800166c:	200000ac 	.word	0x200000ac
 8001670:	200000b0 	.word	0x200000b0
 8001674:	200000b2 	.word	0x200000b2
 8001678:	200000ae 	.word	0x200000ae
 800167c:	200000b4 	.word	0x200000b4
 8001680:	200000b6 	.word	0x200000b6
 8001684:	200000b8 	.word	0x200000b8
 8001688:	200000ba 	.word	0x200000ba
 800168c:	200000bc 	.word	0x200000bc
 8001690:	200000be 	.word	0x200000be
 8001694:	200000c0 	.word	0x200000c0
 8001698:	200000c2 	.word	0x200000c2

0800169c <BMP280_init>:

void BMP280_init()
{
 800169c:	b580      	push	{r7, lr}
 800169e:	af00      	add	r7, sp, #0
	writeRegister( 0xF5,  0b10010000);
 80016a0:	2190      	movs	r1, #144	; 0x90
 80016a2:	20f5      	movs	r0, #245	; 0xf5
 80016a4:	f7ff fee8 	bl	8001478 <writeRegister>
	writeRegister( 0xF4,  0b01010111);
 80016a8:	2157      	movs	r1, #87	; 0x57
 80016aa:	20f4      	movs	r0, #244	; 0xf4
 80016ac:	f7ff fee4 	bl	8001478 <writeRegister>

	BMP280_get_calib_values();
 80016b0:	f7ff ff4c 	bl	800154c <BMP280_get_calib_values>
}
 80016b4:	bf00      	nop
 80016b6:	bd80      	pop	{r7, pc}

080016b8 <BMP280_measure>:

struct reading BMP280_measure()
{
 80016b8:	b590      	push	{r4, r7, lr}
 80016ba:	b08b      	sub	sp, #44	; 0x2c
 80016bc:	af00      	add	r7, sp, #0
 80016be:	6078      	str	r0, [r7, #4]
	read_value read_value_bmp280;
	uint8_t data[6];
	readMBRegister(BMP280_REG_DATA, data, 6);
 80016c0:	f107 030c 	add.w	r3, r7, #12
 80016c4:	2206      	movs	r2, #6
 80016c6:	4619      	mov	r1, r3
 80016c8:	20f7      	movs	r0, #247	; 0xf7
 80016ca:	f7ff fefb 	bl	80014c4 <readMBRegister>

	int32_t adc_P = data[0] << 12 | data[1] << 4 | data[2] >> 4;
 80016ce:	7b3b      	ldrb	r3, [r7, #12]
 80016d0:	031a      	lsls	r2, r3, #12
 80016d2:	7b7b      	ldrb	r3, [r7, #13]
 80016d4:	011b      	lsls	r3, r3, #4
 80016d6:	4313      	orrs	r3, r2
 80016d8:	7bba      	ldrb	r2, [r7, #14]
 80016da:	0912      	lsrs	r2, r2, #4
 80016dc:	b2d2      	uxtb	r2, r2
 80016de:	4313      	orrs	r3, r2
 80016e0:	627b      	str	r3, [r7, #36]	; 0x24
	int32_t adc_T = data[3] << 12 | data[4] << 4 | data[5] >> 4;
 80016e2:	7bfb      	ldrb	r3, [r7, #15]
 80016e4:	031a      	lsls	r2, r3, #12
 80016e6:	7c3b      	ldrb	r3, [r7, #16]
 80016e8:	011b      	lsls	r3, r3, #4
 80016ea:	4313      	orrs	r3, r2
 80016ec:	7c7a      	ldrb	r2, [r7, #17]
 80016ee:	0912      	lsrs	r2, r2, #4
 80016f0:	b2d2      	uxtb	r2, r2
 80016f2:	4313      	orrs	r3, r2
 80016f4:	623b      	str	r3, [r7, #32]

	temperature = (float) compensate_temperature(adc_T) / 100.0;
 80016f6:	6a38      	ldr	r0, [r7, #32]
 80016f8:	f000 f890 	bl	800181c <compensate_temperature>
 80016fc:	4603      	mov	r3, r0
 80016fe:	4618      	mov	r0, r3
 8001700:	f7ff fac4 	bl	8000c8c <__aeabi_i2f>
 8001704:	4603      	mov	r3, r0
 8001706:	4618      	mov	r0, r3
 8001708:	f7fe fe86 	bl	8000418 <__aeabi_f2d>
 800170c:	f04f 0200 	mov.w	r2, #0
 8001710:	4b3b      	ldr	r3, [pc, #236]	; (8001800 <BMP280_measure+0x148>)
 8001712:	f7ff f803 	bl	800071c <__aeabi_ddiv>
 8001716:	4602      	mov	r2, r0
 8001718:	460b      	mov	r3, r1
 800171a:	4610      	mov	r0, r2
 800171c:	4619      	mov	r1, r3
 800171e:	f7ff f9ab 	bl	8000a78 <__aeabi_d2f>
 8001722:	4603      	mov	r3, r0
 8001724:	4a37      	ldr	r2, [pc, #220]	; (8001804 <BMP280_measure+0x14c>)
 8001726:	6013      	str	r3, [r2, #0]
	pressure = (float) compensate_pressure(adc_P) / 256.0;
 8001728:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800172a:	f000 f8d3 	bl	80018d4 <compensate_pressure>
 800172e:	4603      	mov	r3, r0
 8001730:	4618      	mov	r0, r3
 8001732:	f7ff faa7 	bl	8000c84 <__aeabi_ui2f>
 8001736:	4603      	mov	r3, r0
 8001738:	4618      	mov	r0, r3
 800173a:	f7fe fe6d 	bl	8000418 <__aeabi_f2d>
 800173e:	f04f 0200 	mov.w	r2, #0
 8001742:	4b31      	ldr	r3, [pc, #196]	; (8001808 <BMP280_measure+0x150>)
 8001744:	f7fe ffea 	bl	800071c <__aeabi_ddiv>
 8001748:	4602      	mov	r2, r0
 800174a:	460b      	mov	r3, r1
 800174c:	4610      	mov	r0, r2
 800174e:	4619      	mov	r1, r3
 8001750:	f7ff f992 	bl	8000a78 <__aeabi_d2f>
 8001754:	4603      	mov	r3, r0
 8001756:	4a2d      	ldr	r2, [pc, #180]	; (800180c <BMP280_measure+0x154>)
 8001758:	6013      	str	r3, [r2, #0]

	if (p_reference > 0)
 800175a:	4b2d      	ldr	r3, [pc, #180]	; (8001810 <BMP280_measure+0x158>)
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	f04f 0100 	mov.w	r1, #0
 8001762:	4618      	mov	r0, r3
 8001764:	f7ff fca2 	bl	80010ac <__aeabi_fcmpgt>
 8001768:	4603      	mov	r3, r0
 800176a:	2b00      	cmp	r3, #0
 800176c:	d029      	beq.n	80017c2 <BMP280_measure+0x10a>
	{
		altitude = (1.0 - pow(pressure / p_reference, 0.1903)) * 4433076.0;
 800176e:	4b27      	ldr	r3, [pc, #156]	; (800180c <BMP280_measure+0x154>)
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	4a27      	ldr	r2, [pc, #156]	; (8001810 <BMP280_measure+0x158>)
 8001774:	6812      	ldr	r2, [r2, #0]
 8001776:	4611      	mov	r1, r2
 8001778:	4618      	mov	r0, r3
 800177a:	f7ff fb8f 	bl	8000e9c <__aeabi_fdiv>
 800177e:	4603      	mov	r3, r0
 8001780:	4618      	mov	r0, r3
 8001782:	f7fe fe49 	bl	8000418 <__aeabi_f2d>
 8001786:	a31a      	add	r3, pc, #104	; (adr r3, 80017f0 <BMP280_measure+0x138>)
 8001788:	e9d3 2300 	ldrd	r2, r3, [r3]
 800178c:	f006 fc2a 	bl	8007fe4 <pow>
 8001790:	4602      	mov	r2, r0
 8001792:	460b      	mov	r3, r1
 8001794:	f04f 0000 	mov.w	r0, #0
 8001798:	491e      	ldr	r1, [pc, #120]	; (8001814 <BMP280_measure+0x15c>)
 800179a:	f7fe fcdd 	bl	8000158 <__aeabi_dsub>
 800179e:	4602      	mov	r2, r0
 80017a0:	460b      	mov	r3, r1
 80017a2:	4610      	mov	r0, r2
 80017a4:	4619      	mov	r1, r3
 80017a6:	a314      	add	r3, pc, #80	; (adr r3, 80017f8 <BMP280_measure+0x140>)
 80017a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017ac:	f7fe fe8c 	bl	80004c8 <__aeabi_dmul>
 80017b0:	4602      	mov	r2, r0
 80017b2:	460b      	mov	r3, r1
 80017b4:	4610      	mov	r0, r2
 80017b6:	4619      	mov	r1, r3
 80017b8:	f7ff f95e 	bl	8000a78 <__aeabi_d2f>
 80017bc:	4603      	mov	r3, r0
 80017be:	4a16      	ldr	r2, [pc, #88]	; (8001818 <BMP280_measure+0x160>)
 80017c0:	6013      	str	r3, [r2, #0]
	gcvt(pressure/4, 10, buf2);

	HD44780_PrintStr(buf2);	*/	//print pressure values to LCD
	/**********************************************************************************************/
	/******************************Returing Values in a Structure**********************************/
	read_value_bmp280.temp=temperature;
 80017c2:	4b10      	ldr	r3, [pc, #64]	; (8001804 <BMP280_measure+0x14c>)
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	617b      	str	r3, [r7, #20]
	read_value_bmp280.press=pressure;
 80017c8:	4b10      	ldr	r3, [pc, #64]	; (800180c <BMP280_measure+0x154>)
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	61bb      	str	r3, [r7, #24]
	read_value_bmp280.alti=altitude;
 80017ce:	4b12      	ldr	r3, [pc, #72]	; (8001818 <BMP280_measure+0x160>)
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	61fb      	str	r3, [r7, #28]

	return read_value_bmp280;
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	461c      	mov	r4, r3
 80017d8:	f107 0314 	add.w	r3, r7, #20
 80017dc:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80017e0:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 80017e4:	6878      	ldr	r0, [r7, #4]
 80017e6:	372c      	adds	r7, #44	; 0x2c
 80017e8:	46bd      	mov	sp, r7
 80017ea:	bd90      	pop	{r4, r7, pc}
 80017ec:	f3af 8000 	nop.w
 80017f0:	1a36e2eb 	.word	0x1a36e2eb
 80017f4:	3fc85bc0 	.word	0x3fc85bc0
 80017f8:	00000000 	.word	0x00000000
 80017fc:	4150e92d 	.word	0x4150e92d
 8001800:	40590000 	.word	0x40590000
 8001804:	200000c4 	.word	0x200000c4
 8001808:	40700000 	.word	0x40700000
 800180c:	200000c8 	.word	0x200000c8
 8001810:	20000000 	.word	0x20000000
 8001814:	3ff00000 	.word	0x3ff00000
 8001818:	200000cc 	.word	0x200000cc

0800181c <compensate_temperature>:

int32_t compensate_temperature(int32_t uncomp_temp)
{
 800181c:	b480      	push	{r7}
 800181e:	b085      	sub	sp, #20
 8001820:	af00      	add	r7, sp, #0
 8001822:	6078      	str	r0, [r7, #4]
	int32_t var1, var2;
	var1 = ((((uncomp_temp / 8)- ((int32_t)dig_T1 << 1))) * ((int32_t)dig_T2)) / 2048;
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	2b00      	cmp	r3, #0
 8001828:	da00      	bge.n	800182c <compensate_temperature+0x10>
 800182a:	3307      	adds	r3, #7
 800182c:	10db      	asrs	r3, r3, #3
 800182e:	461a      	mov	r2, r3
 8001830:	4b24      	ldr	r3, [pc, #144]	; (80018c4 <compensate_temperature+0xa8>)
 8001832:	881b      	ldrh	r3, [r3, #0]
 8001834:	005b      	lsls	r3, r3, #1
 8001836:	1ad3      	subs	r3, r2, r3
 8001838:	4a23      	ldr	r2, [pc, #140]	; (80018c8 <compensate_temperature+0xac>)
 800183a:	f9b2 2000 	ldrsh.w	r2, [r2]
 800183e:	fb02 f303 	mul.w	r3, r2, r3
 8001842:	2b00      	cmp	r3, #0
 8001844:	da01      	bge.n	800184a <compensate_temperature+0x2e>
 8001846:	f203 73ff 	addw	r3, r3, #2047	; 0x7ff
 800184a:	12db      	asrs	r3, r3, #11
 800184c:	60fb      	str	r3, [r7, #12]
	var2 = (((((uncomp_temp / 16) - ((int32_t)dig_T1)) * ((uncomp_temp / 16) - ((int32_t)dig_T1))) / 4096) * ((int32_t)dig_T3)) / 16384;
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	2b00      	cmp	r3, #0
 8001852:	da00      	bge.n	8001856 <compensate_temperature+0x3a>
 8001854:	330f      	adds	r3, #15
 8001856:	111b      	asrs	r3, r3, #4
 8001858:	461a      	mov	r2, r3
 800185a:	4b1a      	ldr	r3, [pc, #104]	; (80018c4 <compensate_temperature+0xa8>)
 800185c:	881b      	ldrh	r3, [r3, #0]
 800185e:	1ad2      	subs	r2, r2, r3
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	2b00      	cmp	r3, #0
 8001864:	da00      	bge.n	8001868 <compensate_temperature+0x4c>
 8001866:	330f      	adds	r3, #15
 8001868:	111b      	asrs	r3, r3, #4
 800186a:	4619      	mov	r1, r3
 800186c:	4b15      	ldr	r3, [pc, #84]	; (80018c4 <compensate_temperature+0xa8>)
 800186e:	881b      	ldrh	r3, [r3, #0]
 8001870:	1acb      	subs	r3, r1, r3
 8001872:	fb02 f303 	mul.w	r3, r2, r3
 8001876:	2b00      	cmp	r3, #0
 8001878:	da01      	bge.n	800187e <compensate_temperature+0x62>
 800187a:	f603 73ff 	addw	r3, r3, #4095	; 0xfff
 800187e:	131b      	asrs	r3, r3, #12
 8001880:	461a      	mov	r2, r3
 8001882:	4b12      	ldr	r3, [pc, #72]	; (80018cc <compensate_temperature+0xb0>)
 8001884:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001888:	fb02 f303 	mul.w	r3, r2, r3
 800188c:	2b00      	cmp	r3, #0
 800188e:	da02      	bge.n	8001896 <compensate_temperature+0x7a>
 8001890:	f503 537f 	add.w	r3, r3, #16320	; 0x3fc0
 8001894:	333f      	adds	r3, #63	; 0x3f
 8001896:	139b      	asrs	r3, r3, #14
 8001898:	60bb      	str	r3, [r7, #8]
	t_fine = var1 + var2;
 800189a:	68fa      	ldr	r2, [r7, #12]
 800189c:	68bb      	ldr	r3, [r7, #8]
 800189e:	4413      	add	r3, r2
 80018a0:	4a0b      	ldr	r2, [pc, #44]	; (80018d0 <compensate_temperature+0xb4>)
 80018a2:	6013      	str	r3, [r2, #0]
	return (t_fine * 5 + 128) / 256;
 80018a4:	4b0a      	ldr	r3, [pc, #40]	; (80018d0 <compensate_temperature+0xb4>)
 80018a6:	681a      	ldr	r2, [r3, #0]
 80018a8:	4613      	mov	r3, r2
 80018aa:	009b      	lsls	r3, r3, #2
 80018ac:	4413      	add	r3, r2
 80018ae:	3380      	adds	r3, #128	; 0x80
 80018b0:	2b00      	cmp	r3, #0
 80018b2:	da00      	bge.n	80018b6 <compensate_temperature+0x9a>
 80018b4:	33ff      	adds	r3, #255	; 0xff
 80018b6:	121b      	asrs	r3, r3, #8
}
 80018b8:	4618      	mov	r0, r3
 80018ba:	3714      	adds	r7, #20
 80018bc:	46bd      	mov	sp, r7
 80018be:	bc80      	pop	{r7}
 80018c0:	4770      	bx	lr
 80018c2:	bf00      	nop
 80018c4:	200000ac 	.word	0x200000ac
 80018c8:	200000b0 	.word	0x200000b0
 80018cc:	200000b2 	.word	0x200000b2
 80018d0:	200000d0 	.word	0x200000d0

080018d4 <compensate_pressure>:

uint32_t compensate_pressure(int32_t uncomp_pres)
{
 80018d4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80018d8:	b0d6      	sub	sp, #344	; 0x158
 80018da:	af00      	add	r7, sp, #0
 80018dc:	f8c7 013c 	str.w	r0, [r7, #316]	; 0x13c
	int64_t var1, var2, p;

	var1 = ((int64_t) (t_fine)) - 128000;
 80018e0:	4bb5      	ldr	r3, [pc, #724]	; (8001bb8 <compensate_pressure+0x2e4>)
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	17da      	asrs	r2, r3, #31
 80018e6:	461c      	mov	r4, r3
 80018e8:	4615      	mov	r5, r2
 80018ea:	f5b4 3afa 	subs.w	sl, r4, #128000	; 0x1f400
 80018ee:	f145 3bff 	adc.w	fp, r5, #4294967295
 80018f2:	e9c7 ab54 	strd	sl, fp, [r7, #336]	; 0x150
	var2 = var1 * var1 * (int64_t)dig_P6;
 80018f6:	f8d7 2154 	ldr.w	r2, [r7, #340]	; 0x154
 80018fa:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 80018fe:	fb03 f102 	mul.w	r1, r3, r2
 8001902:	f8d7 2154 	ldr.w	r2, [r7, #340]	; 0x154
 8001906:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 800190a:	fb02 f303 	mul.w	r3, r2, r3
 800190e:	18ca      	adds	r2, r1, r3
 8001910:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8001914:	fba3 8903 	umull	r8, r9, r3, r3
 8001918:	eb02 0309 	add.w	r3, r2, r9
 800191c:	4699      	mov	r9, r3
 800191e:	4ba7      	ldr	r3, [pc, #668]	; (8001bbc <compensate_pressure+0x2e8>)
 8001920:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001924:	b21b      	sxth	r3, r3
 8001926:	17da      	asrs	r2, r3, #31
 8001928:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800192c:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8001930:	e9d7 013a 	ldrd	r0, r1, [r7, #232]	; 0xe8
 8001934:	4603      	mov	r3, r0
 8001936:	fb03 f209 	mul.w	r2, r3, r9
 800193a:	460b      	mov	r3, r1
 800193c:	fb08 f303 	mul.w	r3, r8, r3
 8001940:	4413      	add	r3, r2
 8001942:	4602      	mov	r2, r0
 8001944:	fba8 2102 	umull	r2, r1, r8, r2
 8001948:	f8c7 10f4 	str.w	r1, [r7, #244]	; 0xf4
 800194c:	f8c7 20f0 	str.w	r2, [r7, #240]	; 0xf0
 8001950:	f8d7 20f4 	ldr.w	r2, [r7, #244]	; 0xf4
 8001954:	4413      	add	r3, r2
 8001956:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800195a:	e9d7 343c 	ldrd	r3, r4, [r7, #240]	; 0xf0
 800195e:	e9c7 3452 	strd	r3, r4, [r7, #328]	; 0x148
 8001962:	e9c7 3452 	strd	r3, r4, [r7, #328]	; 0x148
	var2 = var2 + ((var1 * (int64_t)dig_P5) * 131072);
 8001966:	4b96      	ldr	r3, [pc, #600]	; (8001bc0 <compensate_pressure+0x2ec>)
 8001968:	f9b3 3000 	ldrsh.w	r3, [r3]
 800196c:	b21b      	sxth	r3, r3
 800196e:	17da      	asrs	r2, r3, #31
 8001970:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8001974:	f8c7 20e4 	str.w	r2, [r7, #228]	; 0xe4
 8001978:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 800197c:	e9d7 4538 	ldrd	r4, r5, [r7, #224]	; 0xe0
 8001980:	462a      	mov	r2, r5
 8001982:	fb02 f203 	mul.w	r2, r2, r3
 8001986:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 800198a:	4621      	mov	r1, r4
 800198c:	fb01 f303 	mul.w	r3, r1, r3
 8001990:	441a      	add	r2, r3
 8001992:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8001996:	4621      	mov	r1, r4
 8001998:	fba3 3101 	umull	r3, r1, r3, r1
 800199c:	f8c7 1134 	str.w	r1, [r7, #308]	; 0x134
 80019a0:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
 80019a4:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80019a8:	18d3      	adds	r3, r2, r3
 80019aa:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
 80019ae:	f04f 0000 	mov.w	r0, #0
 80019b2:	f04f 0100 	mov.w	r1, #0
 80019b6:	e9d7 454c 	ldrd	r4, r5, [r7, #304]	; 0x130
 80019ba:	462b      	mov	r3, r5
 80019bc:	0459      	lsls	r1, r3, #17
 80019be:	4622      	mov	r2, r4
 80019c0:	ea41 31d2 	orr.w	r1, r1, r2, lsr #15
 80019c4:	4623      	mov	r3, r4
 80019c6:	0458      	lsls	r0, r3, #17
 80019c8:	e9d7 2352 	ldrd	r2, r3, [r7, #328]	; 0x148
 80019cc:	1814      	adds	r4, r2, r0
 80019ce:	67bc      	str	r4, [r7, #120]	; 0x78
 80019d0:	414b      	adcs	r3, r1
 80019d2:	67fb      	str	r3, [r7, #124]	; 0x7c
 80019d4:	e9d7 341e 	ldrd	r3, r4, [r7, #120]	; 0x78
 80019d8:	e9c7 3452 	strd	r3, r4, [r7, #328]	; 0x148
	var2 = var2 + (((int64_t)dig_P4) * 34359738368);
 80019dc:	4b79      	ldr	r3, [pc, #484]	; (8001bc4 <compensate_pressure+0x2f0>)
 80019de:	f9b3 3000 	ldrsh.w	r3, [r3]
 80019e2:	b21b      	sxth	r3, r3
 80019e4:	17da      	asrs	r2, r3, #31
 80019e6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80019ea:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80019ee:	f04f 0000 	mov.w	r0, #0
 80019f2:	f04f 0100 	mov.w	r1, #0
 80019f6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80019fa:	00d9      	lsls	r1, r3, #3
 80019fc:	2000      	movs	r0, #0
 80019fe:	e9d7 2352 	ldrd	r2, r3, [r7, #328]	; 0x148
 8001a02:	1814      	adds	r4, r2, r0
 8001a04:	673c      	str	r4, [r7, #112]	; 0x70
 8001a06:	414b      	adcs	r3, r1
 8001a08:	677b      	str	r3, [r7, #116]	; 0x74
 8001a0a:	e9d7 341c 	ldrd	r3, r4, [r7, #112]	; 0x70
 8001a0e:	e9c7 3452 	strd	r3, r4, [r7, #328]	; 0x148
	var1 = ((var1 * var1 * (int64_t)dig_P3) / 256) + ((var1 * (int64_t)dig_P2) * 4096);
 8001a12:	f8d7 2154 	ldr.w	r2, [r7, #340]	; 0x154
 8001a16:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8001a1a:	fb03 f102 	mul.w	r1, r3, r2
 8001a1e:	f8d7 2154 	ldr.w	r2, [r7, #340]	; 0x154
 8001a22:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8001a26:	fb02 f303 	mul.w	r3, r2, r3
 8001a2a:	18ca      	adds	r2, r1, r3
 8001a2c:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8001a30:	fba3 3103 	umull	r3, r1, r3, r3
 8001a34:	f8c7 112c 	str.w	r1, [r7, #300]	; 0x12c
 8001a38:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8001a3c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8001a40:	18d3      	adds	r3, r2, r3
 8001a42:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 8001a46:	4b60      	ldr	r3, [pc, #384]	; (8001bc8 <compensate_pressure+0x2f4>)
 8001a48:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001a4c:	b21b      	sxth	r3, r3
 8001a4e:	17da      	asrs	r2, r3, #31
 8001a50:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8001a54:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8001a58:	e9d7 344a 	ldrd	r3, r4, [r7, #296]	; 0x128
 8001a5c:	4622      	mov	r2, r4
 8001a5e:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8001a62:	4641      	mov	r1, r8
 8001a64:	fb01 f202 	mul.w	r2, r1, r2
 8001a68:	464d      	mov	r5, r9
 8001a6a:	4618      	mov	r0, r3
 8001a6c:	4621      	mov	r1, r4
 8001a6e:	4603      	mov	r3, r0
 8001a70:	fb03 f305 	mul.w	r3, r3, r5
 8001a74:	4413      	add	r3, r2
 8001a76:	4602      	mov	r2, r0
 8001a78:	4641      	mov	r1, r8
 8001a7a:	fba2 2101 	umull	r2, r1, r2, r1
 8001a7e:	f8c7 1124 	str.w	r1, [r7, #292]	; 0x124
 8001a82:	f8c7 2120 	str.w	r2, [r7, #288]	; 0x120
 8001a86:	f8d7 2124 	ldr.w	r2, [r7, #292]	; 0x124
 8001a8a:	4413      	add	r3, r2
 8001a8c:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8001a90:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	; 0x120
 8001a94:	2b00      	cmp	r3, #0
 8001a96:	da07      	bge.n	8001aa8 <compensate_pressure+0x1d4>
 8001a98:	f112 01ff 	adds.w	r1, r2, #255	; 0xff
 8001a9c:	66b9      	str	r1, [r7, #104]	; 0x68
 8001a9e:	f143 0300 	adc.w	r3, r3, #0
 8001aa2:	66fb      	str	r3, [r7, #108]	; 0x6c
 8001aa4:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 8001aa8:	f04f 0000 	mov.w	r0, #0
 8001aac:	f04f 0100 	mov.w	r1, #0
 8001ab0:	0a10      	lsrs	r0, r2, #8
 8001ab2:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
 8001ab6:	1219      	asrs	r1, r3, #8
 8001ab8:	4b44      	ldr	r3, [pc, #272]	; (8001bcc <compensate_pressure+0x2f8>)
 8001aba:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001abe:	b21b      	sxth	r3, r3
 8001ac0:	17da      	asrs	r2, r3, #31
 8001ac2:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8001ac6:	f8c7 20cc 	str.w	r2, [r7, #204]	; 0xcc
 8001aca:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8001ace:	e9d7 8932 	ldrd	r8, r9, [r7, #200]	; 0xc8
 8001ad2:	464a      	mov	r2, r9
 8001ad4:	fb02 f203 	mul.w	r2, r2, r3
 8001ad8:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 8001adc:	4644      	mov	r4, r8
 8001ade:	fb04 f303 	mul.w	r3, r4, r3
 8001ae2:	441a      	add	r2, r3
 8001ae4:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8001ae8:	4644      	mov	r4, r8
 8001aea:	fba3 3404 	umull	r3, r4, r3, r4
 8001aee:	f8c7 411c 	str.w	r4, [r7, #284]	; 0x11c
 8001af2:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8001af6:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8001afa:	18d3      	adds	r3, r2, r3
 8001afc:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8001b00:	f04f 0200 	mov.w	r2, #0
 8001b04:	f04f 0300 	mov.w	r3, #0
 8001b08:	e9d7 8946 	ldrd	r8, r9, [r7, #280]	; 0x118
 8001b0c:	464c      	mov	r4, r9
 8001b0e:	0323      	lsls	r3, r4, #12
 8001b10:	46c4      	mov	ip, r8
 8001b12:	ea43 531c 	orr.w	r3, r3, ip, lsr #20
 8001b16:	4644      	mov	r4, r8
 8001b18:	0322      	lsls	r2, r4, #12
 8001b1a:	1884      	adds	r4, r0, r2
 8001b1c:	663c      	str	r4, [r7, #96]	; 0x60
 8001b1e:	eb41 0303 	adc.w	r3, r1, r3
 8001b22:	667b      	str	r3, [r7, #100]	; 0x64
 8001b24:	e9d7 3418 	ldrd	r3, r4, [r7, #96]	; 0x60
 8001b28:	e9c7 3454 	strd	r3, r4, [r7, #336]	; 0x150
	var1 = ((INT64_C(0x800000000000) + var1) * ((int64_t)dig_P1)) / 8589934592;
 8001b2c:	e9d7 2354 	ldrd	r2, r3, [r7, #336]	; 0x150
 8001b30:	f503 4100 	add.w	r1, r3, #32768	; 0x8000
 8001b34:	f8c7 10c4 	str.w	r1, [r7, #196]	; 0xc4
 8001b38:	f8c7 20c0 	str.w	r2, [r7, #192]	; 0xc0
 8001b3c:	4b24      	ldr	r3, [pc, #144]	; (8001bd0 <compensate_pressure+0x2fc>)
 8001b3e:	881b      	ldrh	r3, [r3, #0]
 8001b40:	b29b      	uxth	r3, r3
 8001b42:	2200      	movs	r2, #0
 8001b44:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8001b48:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8001b4c:	e9d7 3430 	ldrd	r3, r4, [r7, #192]	; 0xc0
 8001b50:	4622      	mov	r2, r4
 8001b52:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8001b56:	4641      	mov	r1, r8
 8001b58:	fb01 f202 	mul.w	r2, r1, r2
 8001b5c:	464d      	mov	r5, r9
 8001b5e:	4618      	mov	r0, r3
 8001b60:	4621      	mov	r1, r4
 8001b62:	4603      	mov	r3, r0
 8001b64:	fb03 f305 	mul.w	r3, r3, r5
 8001b68:	4413      	add	r3, r2
 8001b6a:	4602      	mov	r2, r0
 8001b6c:	4641      	mov	r1, r8
 8001b6e:	fba2 2101 	umull	r2, r1, r2, r1
 8001b72:	f8c7 1114 	str.w	r1, [r7, #276]	; 0x114
 8001b76:	f8c7 2110 	str.w	r2, [r7, #272]	; 0x110
 8001b7a:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8001b7e:	4413      	add	r3, r2
 8001b80:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8001b84:	e9d7 2344 	ldrd	r2, r3, [r7, #272]	; 0x110
 8001b88:	2b00      	cmp	r3, #0
 8001b8a:	da06      	bge.n	8001b9a <compensate_pressure+0x2c6>
 8001b8c:	1e51      	subs	r1, r2, #1
 8001b8e:	65b9      	str	r1, [r7, #88]	; 0x58
 8001b90:	f143 0301 	adc.w	r3, r3, #1
 8001b94:	65fb      	str	r3, [r7, #92]	; 0x5c
 8001b96:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8001b9a:	f04f 0000 	mov.w	r0, #0
 8001b9e:	f04f 0100 	mov.w	r1, #0
 8001ba2:	1058      	asrs	r0, r3, #1
 8001ba4:	17d9      	asrs	r1, r3, #31
 8001ba6:	e9c7 0154 	strd	r0, r1, [r7, #336]	; 0x150
	if (var1 == 0)
 8001baa:	e9d7 2354 	ldrd	r2, r3, [r7, #336]	; 0x150
 8001bae:	4313      	orrs	r3, r2
 8001bb0:	d110      	bne.n	8001bd4 <compensate_pressure+0x300>
	{
		return 0;
 8001bb2:	2300      	movs	r3, #0
 8001bb4:	e18b      	b.n	8001ece <compensate_pressure+0x5fa>
 8001bb6:	bf00      	nop
 8001bb8:	200000d0 	.word	0x200000d0
 8001bbc:	200000bc 	.word	0x200000bc
 8001bc0:	200000ba 	.word	0x200000ba
 8001bc4:	200000b8 	.word	0x200000b8
 8001bc8:	200000b6 	.word	0x200000b6
 8001bcc:	200000b4 	.word	0x200000b4
 8001bd0:	200000ae 	.word	0x200000ae
	}
	p = 1048576 - uncomp_pres;
 8001bd4:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8001bd8:	f5c3 1380 	rsb	r3, r3, #1048576	; 0x100000
 8001bdc:	17da      	asrs	r2, r3, #31
 8001bde:	653b      	str	r3, [r7, #80]	; 0x50
 8001be0:	657a      	str	r2, [r7, #84]	; 0x54
 8001be2:	e9d7 3414 	ldrd	r3, r4, [r7, #80]	; 0x50
 8001be6:	e9c7 3450 	strd	r3, r4, [r7, #320]	; 0x140
	p = (((((p * 2147483648U)) - var2) * 3125) / var1);
 8001bea:	e9d7 2350 	ldrd	r2, r3, [r7, #320]	; 0x140
 8001bee:	f04f 0000 	mov.w	r0, #0
 8001bf2:	f04f 0100 	mov.w	r1, #0
 8001bf6:	07d9      	lsls	r1, r3, #31
 8001bf8:	ea41 0152 	orr.w	r1, r1, r2, lsr #1
 8001bfc:	07d0      	lsls	r0, r2, #31
 8001bfe:	e9d7 2352 	ldrd	r2, r3, [r7, #328]	; 0x148
 8001c02:	1a84      	subs	r4, r0, r2
 8001c04:	f8c7 40b0 	str.w	r4, [r7, #176]	; 0xb0
 8001c08:	eb61 0303 	sbc.w	r3, r1, r3
 8001c0c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8001c10:	e9d7 452c 	ldrd	r4, r5, [r7, #176]	; 0xb0
 8001c14:	4622      	mov	r2, r4
 8001c16:	462b      	mov	r3, r5
 8001c18:	1891      	adds	r1, r2, r2
 8001c1a:	64b9      	str	r1, [r7, #72]	; 0x48
 8001c1c:	415b      	adcs	r3, r3
 8001c1e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001c20:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8001c24:	4621      	mov	r1, r4
 8001c26:	1851      	adds	r1, r2, r1
 8001c28:	6439      	str	r1, [r7, #64]	; 0x40
 8001c2a:	4629      	mov	r1, r5
 8001c2c:	414b      	adcs	r3, r1
 8001c2e:	647b      	str	r3, [r7, #68]	; 0x44
 8001c30:	f04f 0200 	mov.w	r2, #0
 8001c34:	f04f 0300 	mov.w	r3, #0
 8001c38:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 8001c3c:	4649      	mov	r1, r9
 8001c3e:	018b      	lsls	r3, r1, #6
 8001c40:	4641      	mov	r1, r8
 8001c42:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001c46:	4641      	mov	r1, r8
 8001c48:	018a      	lsls	r2, r1, #6
 8001c4a:	4641      	mov	r1, r8
 8001c4c:	1889      	adds	r1, r1, r2
 8001c4e:	63b9      	str	r1, [r7, #56]	; 0x38
 8001c50:	4649      	mov	r1, r9
 8001c52:	eb43 0101 	adc.w	r1, r3, r1
 8001c56:	63f9      	str	r1, [r7, #60]	; 0x3c
 8001c58:	f04f 0200 	mov.w	r2, #0
 8001c5c:	f04f 0300 	mov.w	r3, #0
 8001c60:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	; 0x38
 8001c64:	4649      	mov	r1, r9
 8001c66:	008b      	lsls	r3, r1, #2
 8001c68:	46c4      	mov	ip, r8
 8001c6a:	ea43 739c 	orr.w	r3, r3, ip, lsr #30
 8001c6e:	4641      	mov	r1, r8
 8001c70:	008a      	lsls	r2, r1, #2
 8001c72:	4610      	mov	r0, r2
 8001c74:	4619      	mov	r1, r3
 8001c76:	4603      	mov	r3, r0
 8001c78:	4622      	mov	r2, r4
 8001c7a:	189b      	adds	r3, r3, r2
 8001c7c:	633b      	str	r3, [r7, #48]	; 0x30
 8001c7e:	460b      	mov	r3, r1
 8001c80:	462a      	mov	r2, r5
 8001c82:	eb42 0303 	adc.w	r3, r2, r3
 8001c86:	637b      	str	r3, [r7, #52]	; 0x34
 8001c88:	f04f 0200 	mov.w	r2, #0
 8001c8c:	f04f 0300 	mov.w	r3, #0
 8001c90:	e9d7 890c 	ldrd	r8, r9, [r7, #48]	; 0x30
 8001c94:	4649      	mov	r1, r9
 8001c96:	008b      	lsls	r3, r1, #2
 8001c98:	46c4      	mov	ip, r8
 8001c9a:	ea43 739c 	orr.w	r3, r3, ip, lsr #30
 8001c9e:	4641      	mov	r1, r8
 8001ca0:	008a      	lsls	r2, r1, #2
 8001ca2:	4610      	mov	r0, r2
 8001ca4:	4619      	mov	r1, r3
 8001ca6:	4603      	mov	r3, r0
 8001ca8:	4622      	mov	r2, r4
 8001caa:	189b      	adds	r3, r3, r2
 8001cac:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8001cb0:	462b      	mov	r3, r5
 8001cb2:	460a      	mov	r2, r1
 8001cb4:	eb42 0303 	adc.w	r3, r2, r3
 8001cb8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8001cbc:	e9d7 2354 	ldrd	r2, r3, [r7, #336]	; 0x150
 8001cc0:	e9d7 012a 	ldrd	r0, r1, [r7, #168]	; 0xa8
 8001cc4:	f7ff fa1c 	bl	8001100 <__aeabi_ldivmod>
 8001cc8:	4602      	mov	r2, r0
 8001cca:	460b      	mov	r3, r1
 8001ccc:	e9c7 2350 	strd	r2, r3, [r7, #320]	; 0x140
	var1 = (((int64_t)dig_P9) * (p / 8192) * (p / 8192)) / 33554432;
 8001cd0:	4b82      	ldr	r3, [pc, #520]	; (8001edc <compensate_pressure+0x608>)
 8001cd2:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001cd6:	b21b      	sxth	r3, r3
 8001cd8:	17da      	asrs	r2, r3, #31
 8001cda:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8001cde:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8001ce2:	e9d7 2350 	ldrd	r2, r3, [r7, #320]	; 0x140
 8001ce6:	2b00      	cmp	r3, #0
 8001ce8:	da08      	bge.n	8001cfc <compensate_pressure+0x428>
 8001cea:	f641 71ff 	movw	r1, #8191	; 0x1fff
 8001cee:	1851      	adds	r1, r2, r1
 8001cf0:	62b9      	str	r1, [r7, #40]	; 0x28
 8001cf2:	f143 0300 	adc.w	r3, r3, #0
 8001cf6:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001cf8:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8001cfc:	f04f 0000 	mov.w	r0, #0
 8001d00:	f04f 0100 	mov.w	r1, #0
 8001d04:	0b50      	lsrs	r0, r2, #13
 8001d06:	ea40 40c3 	orr.w	r0, r0, r3, lsl #19
 8001d0a:	1359      	asrs	r1, r3, #13
 8001d0c:	4602      	mov	r2, r0
 8001d0e:	460b      	mov	r3, r1
 8001d10:	e9d7 4528 	ldrd	r4, r5, [r7, #160]	; 0xa0
 8001d14:	4629      	mov	r1, r5
 8001d16:	fb02 f001 	mul.w	r0, r2, r1
 8001d1a:	4621      	mov	r1, r4
 8001d1c:	fb01 f103 	mul.w	r1, r1, r3
 8001d20:	4401      	add	r1, r0
 8001d22:	4620      	mov	r0, r4
 8001d24:	fba0 3202 	umull	r3, r2, r0, r2
 8001d28:	f8c7 210c 	str.w	r2, [r7, #268]	; 0x10c
 8001d2c:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8001d30:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8001d34:	18cb      	adds	r3, r1, r3
 8001d36:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8001d3a:	e9d7 2350 	ldrd	r2, r3, [r7, #320]	; 0x140
 8001d3e:	2b00      	cmp	r3, #0
 8001d40:	da08      	bge.n	8001d54 <compensate_pressure+0x480>
 8001d42:	f641 71ff 	movw	r1, #8191	; 0x1fff
 8001d46:	1851      	adds	r1, r2, r1
 8001d48:	6239      	str	r1, [r7, #32]
 8001d4a:	f143 0300 	adc.w	r3, r3, #0
 8001d4e:	627b      	str	r3, [r7, #36]	; 0x24
 8001d50:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001d54:	f04f 0000 	mov.w	r0, #0
 8001d58:	f04f 0100 	mov.w	r1, #0
 8001d5c:	0b50      	lsrs	r0, r2, #13
 8001d5e:	ea40 40c3 	orr.w	r0, r0, r3, lsl #19
 8001d62:	1359      	asrs	r1, r3, #13
 8001d64:	4602      	mov	r2, r0
 8001d66:	460b      	mov	r3, r1
 8001d68:	e9d7 4542 	ldrd	r4, r5, [r7, #264]	; 0x108
 8001d6c:	4629      	mov	r1, r5
 8001d6e:	fb02 f001 	mul.w	r0, r2, r1
 8001d72:	4621      	mov	r1, r4
 8001d74:	fb01 f103 	mul.w	r1, r1, r3
 8001d78:	4401      	add	r1, r0
 8001d7a:	4620      	mov	r0, r4
 8001d7c:	fba0 3202 	umull	r3, r2, r0, r2
 8001d80:	f8c7 2104 	str.w	r2, [r7, #260]	; 0x104
 8001d84:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8001d88:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8001d8c:	18cb      	adds	r3, r1, r3
 8001d8e:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8001d92:	e9d7 2340 	ldrd	r2, r3, [r7, #256]	; 0x100
 8001d96:	2b00      	cmp	r3, #0
 8001d98:	da08      	bge.n	8001dac <compensate_pressure+0x4d8>
 8001d9a:	f06f 417e 	mvn.w	r1, #4261412864	; 0xfe000000
 8001d9e:	1851      	adds	r1, r2, r1
 8001da0:	61b9      	str	r1, [r7, #24]
 8001da2:	f143 0300 	adc.w	r3, r3, #0
 8001da6:	61fb      	str	r3, [r7, #28]
 8001da8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001dac:	f04f 0000 	mov.w	r0, #0
 8001db0:	f04f 0100 	mov.w	r1, #0
 8001db4:	0e50      	lsrs	r0, r2, #25
 8001db6:	ea40 10c3 	orr.w	r0, r0, r3, lsl #7
 8001dba:	1659      	asrs	r1, r3, #25
 8001dbc:	e9c7 0154 	strd	r0, r1, [r7, #336]	; 0x150
	var2 = (((int64_t)dig_P8) * p) / 524288;
 8001dc0:	4b47      	ldr	r3, [pc, #284]	; (8001ee0 <compensate_pressure+0x60c>)
 8001dc2:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001dc6:	b21b      	sxth	r3, r3
 8001dc8:	17da      	asrs	r2, r3, #31
 8001dca:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8001dce:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 8001dd2:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 8001dd6:	e9d7 4526 	ldrd	r4, r5, [r7, #152]	; 0x98
 8001dda:	462a      	mov	r2, r5
 8001ddc:	fb02 f203 	mul.w	r2, r2, r3
 8001de0:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 8001de4:	4621      	mov	r1, r4
 8001de6:	fb01 f303 	mul.w	r3, r1, r3
 8001dea:	441a      	add	r2, r3
 8001dec:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 8001df0:	4621      	mov	r1, r4
 8001df2:	fba3 3101 	umull	r3, r1, r3, r1
 8001df6:	f8c7 10fc 	str.w	r1, [r7, #252]	; 0xfc
 8001dfa:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8001dfe:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8001e02:	18d3      	adds	r3, r2, r3
 8001e04:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8001e08:	e9d7 013e 	ldrd	r0, r1, [r7, #248]	; 0xf8
 8001e0c:	2900      	cmp	r1, #0
 8001e0e:	da07      	bge.n	8001e20 <compensate_pressure+0x54c>
 8001e10:	4b34      	ldr	r3, [pc, #208]	; (8001ee4 <compensate_pressure+0x610>)
 8001e12:	18c3      	adds	r3, r0, r3
 8001e14:	613b      	str	r3, [r7, #16]
 8001e16:	f141 0300 	adc.w	r3, r1, #0
 8001e1a:	617b      	str	r3, [r7, #20]
 8001e1c:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001e20:	f04f 0200 	mov.w	r2, #0
 8001e24:	f04f 0300 	mov.w	r3, #0
 8001e28:	0cc2      	lsrs	r2, r0, #19
 8001e2a:	ea42 3241 	orr.w	r2, r2, r1, lsl #13
 8001e2e:	14cb      	asrs	r3, r1, #19
 8001e30:	e9c7 2352 	strd	r2, r3, [r7, #328]	; 0x148
	p = ((p + var1 + var2) / 256) + (((int64_t)dig_P7) * 16);
 8001e34:	e9d7 0150 	ldrd	r0, r1, [r7, #320]	; 0x140
 8001e38:	e9d7 2354 	ldrd	r2, r3, [r7, #336]	; 0x150
 8001e3c:	1884      	adds	r4, r0, r2
 8001e3e:	f8c7 4090 	str.w	r4, [r7, #144]	; 0x90
 8001e42:	eb41 0303 	adc.w	r3, r1, r3
 8001e46:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8001e4a:	e9d7 2352 	ldrd	r2, r3, [r7, #328]	; 0x148
 8001e4e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8001e52:	4621      	mov	r1, r4
 8001e54:	1889      	adds	r1, r1, r2
 8001e56:	f8c7 1088 	str.w	r1, [r7, #136]	; 0x88
 8001e5a:	4629      	mov	r1, r5
 8001e5c:	eb43 0101 	adc.w	r1, r3, r1
 8001e60:	f8c7 108c 	str.w	r1, [r7, #140]	; 0x8c
 8001e64:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8001e68:	2b00      	cmp	r3, #0
 8001e6a:	da07      	bge.n	8001e7c <compensate_pressure+0x5a8>
 8001e6c:	f112 01ff 	adds.w	r1, r2, #255	; 0xff
 8001e70:	60b9      	str	r1, [r7, #8]
 8001e72:	f143 0300 	adc.w	r3, r3, #0
 8001e76:	60fb      	str	r3, [r7, #12]
 8001e78:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001e7c:	f04f 0000 	mov.w	r0, #0
 8001e80:	f04f 0100 	mov.w	r1, #0
 8001e84:	0a10      	lsrs	r0, r2, #8
 8001e86:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
 8001e8a:	1219      	asrs	r1, r3, #8
 8001e8c:	4b16      	ldr	r3, [pc, #88]	; (8001ee8 <compensate_pressure+0x614>)
 8001e8e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001e92:	b21b      	sxth	r3, r3
 8001e94:	17da      	asrs	r2, r3, #31
 8001e96:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8001e9a:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 8001e9e:	f04f 0200 	mov.w	r2, #0
 8001ea2:	f04f 0300 	mov.w	r3, #0
 8001ea6:	e9d7 8920 	ldrd	r8, r9, [r7, #128]	; 0x80
 8001eaa:	464c      	mov	r4, r9
 8001eac:	0123      	lsls	r3, r4, #4
 8001eae:	46c4      	mov	ip, r8
 8001eb0:	ea43 731c 	orr.w	r3, r3, ip, lsr #28
 8001eb4:	4644      	mov	r4, r8
 8001eb6:	0122      	lsls	r2, r4, #4
 8001eb8:	1884      	adds	r4, r0, r2
 8001eba:	603c      	str	r4, [r7, #0]
 8001ebc:	eb41 0303 	adc.w	r3, r1, r3
 8001ec0:	607b      	str	r3, [r7, #4]
 8001ec2:	e9d7 3400 	ldrd	r3, r4, [r7]
 8001ec6:	e9c7 3450 	strd	r3, r4, [r7, #320]	; 0x140
	return (uint32_t) p;
 8001eca:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
}
 8001ece:	4618      	mov	r0, r3
 8001ed0:	f507 77ac 	add.w	r7, r7, #344	; 0x158
 8001ed4:	46bd      	mov	sp, r7
 8001ed6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001eda:	bf00      	nop
 8001edc:	200000c2 	.word	0x200000c2
 8001ee0:	200000c0 	.word	0x200000c0
 8001ee4:	0007ffff 	.word	0x0007ffff
 8001ee8:	200000be 	.word	0x200000be

08001eec <delay>:
float Humidity = 0;
uint8_t Presence = 0;
DHT11_read_value DHT11_read_value1;

void delay (uint16_t delay)
{
 8001eec:	b480      	push	{r7}
 8001eee:	b083      	sub	sp, #12
 8001ef0:	af00      	add	r7, sp, #0
 8001ef2:	4603      	mov	r3, r0
 8001ef4:	80fb      	strh	r3, [r7, #6]
  __HAL_TIM_SET_COUNTER(&htim1, 0);
 8001ef6:	4b08      	ldr	r3, [pc, #32]	; (8001f18 <delay+0x2c>)
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	2200      	movs	r2, #0
 8001efc:	625a      	str	r2, [r3, #36]	; 0x24
  while (__HAL_TIM_GET_COUNTER(&htim1) < delay);
 8001efe:	bf00      	nop
 8001f00:	4b05      	ldr	r3, [pc, #20]	; (8001f18 <delay+0x2c>)
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001f06:	88fb      	ldrh	r3, [r7, #6]
 8001f08:	429a      	cmp	r2, r3
 8001f0a:	d3f9      	bcc.n	8001f00 <delay+0x14>
}
 8001f0c:	bf00      	nop
 8001f0e:	bf00      	nop
 8001f10:	370c      	adds	r7, #12
 8001f12:	46bd      	mov	sp, r7
 8001f14:	bc80      	pop	{r7}
 8001f16:	4770      	bx	lr
 8001f18:	200001c0 	.word	0x200001c0

08001f1c <Set_Pin_Output>:

/***********************************GPIO configuration function*********************************/
void Set_Pin_Output (GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001f1c:	b580      	push	{r7, lr}
 8001f1e:	b086      	sub	sp, #24
 8001f20:	af00      	add	r7, sp, #0
 8001f22:	6078      	str	r0, [r7, #4]
 8001f24:	460b      	mov	r3, r1
 8001f26:	807b      	strh	r3, [r7, #2]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f28:	f107 0308 	add.w	r3, r7, #8
 8001f2c:	2200      	movs	r2, #0
 8001f2e:	601a      	str	r2, [r3, #0]
 8001f30:	605a      	str	r2, [r3, #4]
 8001f32:	609a      	str	r2, [r3, #8]
 8001f34:	60da      	str	r2, [r3, #12]
	GPIO_InitStruct.Pin = GPIO_Pin;
 8001f36:	887b      	ldrh	r3, [r7, #2]
 8001f38:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001f3a:	2301      	movs	r3, #1
 8001f3c:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f3e:	2302      	movs	r3, #2
 8001f40:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(GPIOx, &GPIO_InitStruct);
 8001f42:	f107 0308 	add.w	r3, r7, #8
 8001f46:	4619      	mov	r1, r3
 8001f48:	6878      	ldr	r0, [r7, #4]
 8001f4a:	f001 fb07 	bl	800355c <HAL_GPIO_Init>
}
 8001f4e:	bf00      	nop
 8001f50:	3718      	adds	r7, #24
 8001f52:	46bd      	mov	sp, r7
 8001f54:	bd80      	pop	{r7, pc}

08001f56 <Set_Pin_Input>:

void Set_Pin_Input (GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001f56:	b580      	push	{r7, lr}
 8001f58:	b086      	sub	sp, #24
 8001f5a:	af00      	add	r7, sp, #0
 8001f5c:	6078      	str	r0, [r7, #4]
 8001f5e:	460b      	mov	r3, r1
 8001f60:	807b      	strh	r3, [r7, #2]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f62:	f107 0308 	add.w	r3, r7, #8
 8001f66:	2200      	movs	r2, #0
 8001f68:	601a      	str	r2, [r3, #0]
 8001f6a:	605a      	str	r2, [r3, #4]
 8001f6c:	609a      	str	r2, [r3, #8]
 8001f6e:	60da      	str	r2, [r3, #12]
	GPIO_InitStruct.Pin = GPIO_Pin;
 8001f70:	887b      	ldrh	r3, [r7, #2]
 8001f72:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001f74:	2300      	movs	r3, #0
 8001f76:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001f78:	2301      	movs	r3, #1
 8001f7a:	613b      	str	r3, [r7, #16]
	HAL_GPIO_Init(GPIOx, &GPIO_InitStruct);
 8001f7c:	f107 0308 	add.w	r3, r7, #8
 8001f80:	4619      	mov	r1, r3
 8001f82:	6878      	ldr	r0, [r7, #4]
 8001f84:	f001 faea 	bl	800355c <HAL_GPIO_Init>
}
 8001f88:	bf00      	nop
 8001f8a:	3718      	adds	r7, #24
 8001f8c:	46bd      	mov	sp, r7
 8001f8e:	bd80      	pop	{r7, pc}

08001f90 <DHT11_Start>:

/***********************************DHT11 function*********************************/
void DHT11_Start (void)
{
 8001f90:	b580      	push	{r7, lr}
 8001f92:	af00      	add	r7, sp, #0
	Set_Pin_Output (DHT11_PORT, DHT11_PIN);  		// set the pin as output
 8001f94:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001f98:	480e      	ldr	r0, [pc, #56]	; (8001fd4 <DHT11_Start+0x44>)
 8001f9a:	f7ff ffbf 	bl	8001f1c <Set_Pin_Output>
	HAL_GPIO_WritePin (DHT11_PORT, DHT11_PIN, 0);   // pull the pin low
 8001f9e:	2200      	movs	r2, #0
 8001fa0:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001fa4:	480b      	ldr	r0, [pc, #44]	; (8001fd4 <DHT11_Start+0x44>)
 8001fa6:	f001 fc74 	bl	8003892 <HAL_GPIO_WritePin>
	delay (18000);   								// wait for 18ms
 8001faa:	f244 6050 	movw	r0, #18000	; 0x4650
 8001fae:	f7ff ff9d 	bl	8001eec <delay>
    HAL_GPIO_WritePin (DHT11_PORT, DHT11_PIN, 1);   // pull the pin high
 8001fb2:	2201      	movs	r2, #1
 8001fb4:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001fb8:	4806      	ldr	r0, [pc, #24]	; (8001fd4 <DHT11_Start+0x44>)
 8001fba:	f001 fc6a 	bl	8003892 <HAL_GPIO_WritePin>
	delay (20);   									// wait for 20us
 8001fbe:	2014      	movs	r0, #20
 8001fc0:	f7ff ff94 	bl	8001eec <delay>
	Set_Pin_Input(DHT11_PORT, DHT11_PIN);    		// set as input
 8001fc4:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001fc8:	4802      	ldr	r0, [pc, #8]	; (8001fd4 <DHT11_Start+0x44>)
 8001fca:	f7ff ffc4 	bl	8001f56 <Set_Pin_Input>
}
 8001fce:	bf00      	nop
 8001fd0:	bd80      	pop	{r7, pc}
 8001fd2:	bf00      	nop
 8001fd4:	40010c00 	.word	0x40010c00

08001fd8 <DHT11_Check_Response>:

uint8_t DHT11_Check_Response (void)
{
 8001fd8:	b580      	push	{r7, lr}
 8001fda:	b082      	sub	sp, #8
 8001fdc:	af00      	add	r7, sp, #0
	uint8_t Response = 0;
 8001fde:	2300      	movs	r3, #0
 8001fe0:	71fb      	strb	r3, [r7, #7]
	delay (40);
 8001fe2:	2028      	movs	r0, #40	; 0x28
 8001fe4:	f7ff ff82 	bl	8001eec <delay>
	if (!(HAL_GPIO_ReadPin (DHT11_PORT, DHT11_PIN)))
 8001fe8:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001fec:	4811      	ldr	r0, [pc, #68]	; (8002034 <DHT11_Check_Response+0x5c>)
 8001fee:	f001 fc39 	bl	8003864 <HAL_GPIO_ReadPin>
 8001ff2:	4603      	mov	r3, r0
 8001ff4:	2b00      	cmp	r3, #0
 8001ff6:	d10f      	bne.n	8002018 <DHT11_Check_Response+0x40>
	{
		delay (80);
 8001ff8:	2050      	movs	r0, #80	; 0x50
 8001ffa:	f7ff ff77 	bl	8001eec <delay>
		if ((HAL_GPIO_ReadPin(DHT11_PORT, DHT11_PIN))) Response = 1;
 8001ffe:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002002:	480c      	ldr	r0, [pc, #48]	; (8002034 <DHT11_Check_Response+0x5c>)
 8002004:	f001 fc2e 	bl	8003864 <HAL_GPIO_ReadPin>
 8002008:	4603      	mov	r3, r0
 800200a:	2b00      	cmp	r3, #0
 800200c:	d002      	beq.n	8002014 <DHT11_Check_Response+0x3c>
 800200e:	2301      	movs	r3, #1
 8002010:	71fb      	strb	r3, [r7, #7]
 8002012:	e001      	b.n	8002018 <DHT11_Check_Response+0x40>
		else Response = -1; 											// 255
 8002014:	23ff      	movs	r3, #255	; 0xff
 8002016:	71fb      	strb	r3, [r7, #7]
	}
	while ((HAL_GPIO_ReadPin (DHT11_PORT, DHT11_PIN)));   				// wait for the pin to go low
 8002018:	bf00      	nop
 800201a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800201e:	4805      	ldr	r0, [pc, #20]	; (8002034 <DHT11_Check_Response+0x5c>)
 8002020:	f001 fc20 	bl	8003864 <HAL_GPIO_ReadPin>
 8002024:	4603      	mov	r3, r0
 8002026:	2b00      	cmp	r3, #0
 8002028:	d1f7      	bne.n	800201a <DHT11_Check_Response+0x42>

	return Response;
 800202a:	79fb      	ldrb	r3, [r7, #7]
}
 800202c:	4618      	mov	r0, r3
 800202e:	3708      	adds	r7, #8
 8002030:	46bd      	mov	sp, r7
 8002032:	bd80      	pop	{r7, pc}
 8002034:	40010c00 	.word	0x40010c00

08002038 <DHT11_Read>:

uint8_t DHT11_Read (void)
{
 8002038:	b580      	push	{r7, lr}
 800203a:	b082      	sub	sp, #8
 800203c:	af00      	add	r7, sp, #0
	uint8_t i,j;
	for (j=0;j<8;j++)
 800203e:	2300      	movs	r3, #0
 8002040:	71bb      	strb	r3, [r7, #6]
 8002042:	e03a      	b.n	80020ba <DHT11_Read+0x82>
	{
		while (!(HAL_GPIO_ReadPin (DHT11_PORT, DHT11_PIN)));   	// wait for the pin to go high
 8002044:	bf00      	nop
 8002046:	f44f 7100 	mov.w	r1, #512	; 0x200
 800204a:	4820      	ldr	r0, [pc, #128]	; (80020cc <DHT11_Read+0x94>)
 800204c:	f001 fc0a 	bl	8003864 <HAL_GPIO_ReadPin>
 8002050:	4603      	mov	r3, r0
 8002052:	2b00      	cmp	r3, #0
 8002054:	d0f7      	beq.n	8002046 <DHT11_Read+0xe>
		delay (40);   											// wait for 40 us
 8002056:	2028      	movs	r0, #40	; 0x28
 8002058:	f7ff ff48 	bl	8001eec <delay>
		if (!(HAL_GPIO_ReadPin (DHT11_PORT, DHT11_PIN)))  		// if the pin is low
 800205c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002060:	481a      	ldr	r0, [pc, #104]	; (80020cc <DHT11_Read+0x94>)
 8002062:	f001 fbff 	bl	8003864 <HAL_GPIO_ReadPin>
 8002066:	4603      	mov	r3, r0
 8002068:	2b00      	cmp	r3, #0
 800206a:	d10e      	bne.n	800208a <DHT11_Read+0x52>
		{
			i&= ~(1<<(7-j));   									// write 0
 800206c:	79bb      	ldrb	r3, [r7, #6]
 800206e:	f1c3 0307 	rsb	r3, r3, #7
 8002072:	2201      	movs	r2, #1
 8002074:	fa02 f303 	lsl.w	r3, r2, r3
 8002078:	b25b      	sxtb	r3, r3
 800207a:	43db      	mvns	r3, r3
 800207c:	b25a      	sxtb	r2, r3
 800207e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002082:	4013      	ands	r3, r2
 8002084:	b25b      	sxtb	r3, r3
 8002086:	71fb      	strb	r3, [r7, #7]
 8002088:	e00b      	b.n	80020a2 <DHT11_Read+0x6a>
		}
		else i|= (1<<(7-j));  									// if the pin is high, write 1
 800208a:	79bb      	ldrb	r3, [r7, #6]
 800208c:	f1c3 0307 	rsb	r3, r3, #7
 8002090:	2201      	movs	r2, #1
 8002092:	fa02 f303 	lsl.w	r3, r2, r3
 8002096:	b25a      	sxtb	r2, r3
 8002098:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800209c:	4313      	orrs	r3, r2
 800209e:	b25b      	sxtb	r3, r3
 80020a0:	71fb      	strb	r3, [r7, #7]
		while ((HAL_GPIO_ReadPin (DHT11_PORT, DHT11_PIN)));  	// wait for the pin to go low
 80020a2:	bf00      	nop
 80020a4:	f44f 7100 	mov.w	r1, #512	; 0x200
 80020a8:	4808      	ldr	r0, [pc, #32]	; (80020cc <DHT11_Read+0x94>)
 80020aa:	f001 fbdb 	bl	8003864 <HAL_GPIO_ReadPin>
 80020ae:	4603      	mov	r3, r0
 80020b0:	2b00      	cmp	r3, #0
 80020b2:	d1f7      	bne.n	80020a4 <DHT11_Read+0x6c>
	for (j=0;j<8;j++)
 80020b4:	79bb      	ldrb	r3, [r7, #6]
 80020b6:	3301      	adds	r3, #1
 80020b8:	71bb      	strb	r3, [r7, #6]
 80020ba:	79bb      	ldrb	r3, [r7, #6]
 80020bc:	2b07      	cmp	r3, #7
 80020be:	d9c1      	bls.n	8002044 <DHT11_Read+0xc>
	}
	return i;
 80020c0:	79fb      	ldrb	r3, [r7, #7]
}
 80020c2:	4618      	mov	r0, r3
 80020c4:	3708      	adds	r7, #8
 80020c6:	46bd      	mov	sp, r7
 80020c8:	bd80      	pop	{r7, pc}
 80020ca:	bf00      	nop
 80020cc:	40010c00 	.word	0x40010c00

080020d0 <DHT11_Print_Value>:

DHT11_read_value DHT11_Print_Value(void)
{
 80020d0:	b580      	push	{r7, lr}
 80020d2:	b082      	sub	sp, #8
 80020d4:	af00      	add	r7, sp, #0
	DHT11_Start();
 80020d6:	f7ff ff5b 	bl	8001f90 <DHT11_Start>
	Presence = DHT11_Check_Response();
 80020da:	f7ff ff7d 	bl	8001fd8 <DHT11_Check_Response>
 80020de:	4603      	mov	r3, r0
 80020e0:	461a      	mov	r2, r3
 80020e2:	4b2d      	ldr	r3, [pc, #180]	; (8002198 <DHT11_Print_Value+0xc8>)
 80020e4:	701a      	strb	r2, [r3, #0]
	Rh_byte1 = DHT11_Read ();
 80020e6:	f7ff ffa7 	bl	8002038 <DHT11_Read>
 80020ea:	4603      	mov	r3, r0
 80020ec:	461a      	mov	r2, r3
 80020ee:	4b2b      	ldr	r3, [pc, #172]	; (800219c <DHT11_Print_Value+0xcc>)
 80020f0:	701a      	strb	r2, [r3, #0]
	Rh_byte2 = DHT11_Read ();
 80020f2:	f7ff ffa1 	bl	8002038 <DHT11_Read>
 80020f6:	4603      	mov	r3, r0
 80020f8:	461a      	mov	r2, r3
 80020fa:	4b29      	ldr	r3, [pc, #164]	; (80021a0 <DHT11_Print_Value+0xd0>)
 80020fc:	701a      	strb	r2, [r3, #0]
	Temp_byte1 = DHT11_Read ();
 80020fe:	f7ff ff9b 	bl	8002038 <DHT11_Read>
 8002102:	4603      	mov	r3, r0
 8002104:	461a      	mov	r2, r3
 8002106:	4b27      	ldr	r3, [pc, #156]	; (80021a4 <DHT11_Print_Value+0xd4>)
 8002108:	701a      	strb	r2, [r3, #0]
	Temp_byte2 = DHT11_Read ();
 800210a:	f7ff ff95 	bl	8002038 <DHT11_Read>
 800210e:	4603      	mov	r3, r0
 8002110:	461a      	mov	r2, r3
 8002112:	4b25      	ldr	r3, [pc, #148]	; (80021a8 <DHT11_Print_Value+0xd8>)
 8002114:	701a      	strb	r2, [r3, #0]
	SUM = DHT11_Read();
 8002116:	f7ff ff8f 	bl	8002038 <DHT11_Read>
 800211a:	4603      	mov	r3, r0
 800211c:	b29a      	uxth	r2, r3
 800211e:	4b23      	ldr	r3, [pc, #140]	; (80021ac <DHT11_Print_Value+0xdc>)
 8002120:	801a      	strh	r2, [r3, #0]
	TEMP = Temp_byte1;
 8002122:	4b20      	ldr	r3, [pc, #128]	; (80021a4 <DHT11_Print_Value+0xd4>)
 8002124:	781b      	ldrb	r3, [r3, #0]
 8002126:	b29a      	uxth	r2, r3
 8002128:	4b21      	ldr	r3, [pc, #132]	; (80021b0 <DHT11_Print_Value+0xe0>)
 800212a:	801a      	strh	r2, [r3, #0]
	RH = Rh_byte1;
 800212c:	4b1b      	ldr	r3, [pc, #108]	; (800219c <DHT11_Print_Value+0xcc>)
 800212e:	781b      	ldrb	r3, [r3, #0]
 8002130:	b29a      	uxth	r2, r3
 8002132:	4b20      	ldr	r3, [pc, #128]	; (80021b4 <DHT11_Print_Value+0xe4>)
 8002134:	801a      	strh	r2, [r3, #0]

	Temperature = (float) TEMP;
 8002136:	4b1e      	ldr	r3, [pc, #120]	; (80021b0 <DHT11_Print_Value+0xe0>)
 8002138:	881b      	ldrh	r3, [r3, #0]
 800213a:	4618      	mov	r0, r3
 800213c:	f7fe fda2 	bl	8000c84 <__aeabi_ui2f>
 8002140:	4603      	mov	r3, r0
 8002142:	4a1d      	ldr	r2, [pc, #116]	; (80021b8 <DHT11_Print_Value+0xe8>)
 8002144:	6013      	str	r3, [r2, #0]
	Humidity = (float) RH;
 8002146:	4b1b      	ldr	r3, [pc, #108]	; (80021b4 <DHT11_Print_Value+0xe4>)
 8002148:	881b      	ldrh	r3, [r3, #0]
 800214a:	4618      	mov	r0, r3
 800214c:	f7fe fd9a 	bl	8000c84 <__aeabi_ui2f>
 8002150:	4603      	mov	r3, r0
 8002152:	4a1a      	ldr	r2, [pc, #104]	; (80021bc <DHT11_Print_Value+0xec>)
 8002154:	6013      	str	r3, [r2, #0]

	DHT11_read_value1.DHT11_temp=Temperature;
 8002156:	4b18      	ldr	r3, [pc, #96]	; (80021b8 <DHT11_Print_Value+0xe8>)
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	4618      	mov	r0, r3
 800215c:	f7fe ffb0 	bl	80010c0 <__aeabi_f2uiz>
 8002160:	4603      	mov	r3, r0
 8002162:	b2da      	uxtb	r2, r3
 8002164:	4b16      	ldr	r3, [pc, #88]	; (80021c0 <DHT11_Print_Value+0xf0>)
 8002166:	701a      	strb	r2, [r3, #0]
	DHT11_read_value1.DHT11_humi=Humidity;
 8002168:	4b14      	ldr	r3, [pc, #80]	; (80021bc <DHT11_Print_Value+0xec>)
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	4618      	mov	r0, r3
 800216e:	f7fe ffa7 	bl	80010c0 <__aeabi_f2uiz>
 8002172:	4603      	mov	r3, r0
 8002174:	b2da      	uxtb	r2, r3
 8002176:	4b12      	ldr	r3, [pc, #72]	; (80021c0 <DHT11_Print_Value+0xf0>)
 8002178:	705a      	strb	r2, [r3, #1]

	return DHT11_read_value1;
 800217a:	4b11      	ldr	r3, [pc, #68]	; (80021c0 <DHT11_Print_Value+0xf0>)
 800217c:	881b      	ldrh	r3, [r3, #0]
 800217e:	80bb      	strh	r3, [r7, #4]
 8002180:	2300      	movs	r3, #0
 8002182:	793a      	ldrb	r2, [r7, #4]
 8002184:	f362 0307 	bfi	r3, r2, #0, #8
 8002188:	797a      	ldrb	r2, [r7, #5]
 800218a:	f362 230f 	bfi	r3, r2, #8, #8
}
 800218e:	4618      	mov	r0, r3
 8002190:	3708      	adds	r7, #8
 8002192:	46bd      	mov	sp, r7
 8002194:	bd80      	pop	{r7, pc}
 8002196:	bf00      	nop
 8002198:	200000e8 	.word	0x200000e8
 800219c:	200000d4 	.word	0x200000d4
 80021a0:	200000d5 	.word	0x200000d5
 80021a4:	200000d6 	.word	0x200000d6
 80021a8:	200000d7 	.word	0x200000d7
 80021ac:	200000d8 	.word	0x200000d8
 80021b0:	200000dc 	.word	0x200000dc
 80021b4:	200000da 	.word	0x200000da
 80021b8:	200000e0 	.word	0x200000e0
 80021bc:	200000e4 	.word	0x200000e4
 80021c0:	200000ec 	.word	0x200000ec

080021c4 <Menu>:
int view_count=0;

/****************************************************************************************************************/
/************************************************Interrupt Button Code ******************************************/
void Menu()
{
 80021c4:	b580      	push	{r7, lr}
 80021c6:	b084      	sub	sp, #16
 80021c8:	af00      	add	r7, sp, #0
	char buf1[10];
	while(menu_button>0)
 80021ca:	e11b      	b.n	8002404 <Menu+0x240>
	{
		if (Welcom_count==0)
 80021cc:	4b92      	ldr	r3, [pc, #584]	; (8002418 <Menu+0x254>)
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	2b00      	cmp	r3, #0
 80021d2:	d111      	bne.n	80021f8 <Menu+0x34>
		{
			HD44780_Clear();
 80021d4:	f000 f9c2 	bl	800255c <HD44780_Clear>
			HD44780_SetCursor(1,0);
 80021d8:	2100      	movs	r1, #0
 80021da:	2001      	movs	r0, #1
 80021dc:	f000 f9d4 	bl	8002588 <HD44780_SetCursor>
			HD44780_PrintStr("THRESHOLD MENU");
 80021e0:	488e      	ldr	r0, [pc, #568]	; (800241c <Menu+0x258>)
 80021e2:	f000 fa42 	bl	800266a <HD44780_PrintStr>
			HAL_Delay(1000);
 80021e6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80021ea:	f001 f885 	bl	80032f8 <HAL_Delay>
			Welcom_count++;
 80021ee:	4b8a      	ldr	r3, [pc, #552]	; (8002418 <Menu+0x254>)
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	3301      	adds	r3, #1
 80021f4:	4a88      	ldr	r2, [pc, #544]	; (8002418 <Menu+0x254>)
 80021f6:	6013      	str	r3, [r2, #0]
		}

		if (count==1)
 80021f8:	4b89      	ldr	r3, [pc, #548]	; (8002420 <Menu+0x25c>)
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	2b01      	cmp	r3, #1
 80021fe:	d14d      	bne.n	800229c <Menu+0xd8>
		{
			if (view_count==0)
 8002200:	4b88      	ldr	r3, [pc, #544]	; (8002424 <Menu+0x260>)
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	2b00      	cmp	r3, #0
 8002206:	d10d      	bne.n	8002224 <Menu+0x60>
			{
				HD44780_Clear();
 8002208:	f000 f9a8 	bl	800255c <HD44780_Clear>
				HD44780_SetCursor(2,0);
 800220c:	2100      	movs	r1, #0
 800220e:	2002      	movs	r0, #2
 8002210:	f000 f9ba 	bl	8002588 <HD44780_SetCursor>
				HD44780_PrintStr("Temperature");
 8002214:	4884      	ldr	r0, [pc, #528]	; (8002428 <Menu+0x264>)
 8002216:	f000 fa28 	bl	800266a <HD44780_PrintStr>
				view_count++;
 800221a:	4b82      	ldr	r3, [pc, #520]	; (8002424 <Menu+0x260>)
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	3301      	adds	r3, #1
 8002220:	4a80      	ldr	r2, [pc, #512]	; (8002424 <Menu+0x260>)
 8002222:	6013      	str	r3, [r2, #0]
			}

			if (pos_button==1 )
 8002224:	4b81      	ldr	r3, [pc, #516]	; (800242c <Menu+0x268>)
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	2b01      	cmp	r3, #1
 800222a:	d119      	bne.n	8002260 <Menu+0x9c>
			{
				time_elapsed=0;
 800222c:	4b80      	ldr	r3, [pc, #512]	; (8002430 <Menu+0x26c>)
 800222e:	2200      	movs	r2, #0
 8002230:	601a      	str	r2, [r3, #0]
				temp_threshold++;
 8002232:	4b80      	ldr	r3, [pc, #512]	; (8002434 <Menu+0x270>)
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	3301      	adds	r3, #1
 8002238:	4a7e      	ldr	r2, [pc, #504]	; (8002434 <Menu+0x270>)
 800223a:	6013      	str	r3, [r2, #0]
				pos_button=0;
 800223c:	4b7b      	ldr	r3, [pc, #492]	; (800242c <Menu+0x268>)
 800223e:	2200      	movs	r2, #0
 8002240:	601a      	str	r2, [r3, #0]
				// to print updated Threshold Value
				sprintf(buf1, "%d", temp_threshold);
 8002242:	4b7c      	ldr	r3, [pc, #496]	; (8002434 <Menu+0x270>)
 8002244:	681a      	ldr	r2, [r3, #0]
 8002246:	1d3b      	adds	r3, r7, #4
 8002248:	497b      	ldr	r1, [pc, #492]	; (8002438 <Menu+0x274>)
 800224a:	4618      	mov	r0, r3
 800224c:	f003 f982 	bl	8005554 <siprintf>
				HD44780_SetCursor(5,1);
 8002250:	2101      	movs	r1, #1
 8002252:	2005      	movs	r0, #5
 8002254:	f000 f998 	bl	8002588 <HD44780_SetCursor>
				HD44780_PrintStr(buf1);
 8002258:	1d3b      	adds	r3, r7, #4
 800225a:	4618      	mov	r0, r3
 800225c:	f000 fa05 	bl	800266a <HD44780_PrintStr>
			}

			if (neg_button==1)
 8002260:	4b76      	ldr	r3, [pc, #472]	; (800243c <Menu+0x278>)
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	2b01      	cmp	r3, #1
 8002266:	d119      	bne.n	800229c <Menu+0xd8>
			{
				time_elapsed=0;
 8002268:	4b71      	ldr	r3, [pc, #452]	; (8002430 <Menu+0x26c>)
 800226a:	2200      	movs	r2, #0
 800226c:	601a      	str	r2, [r3, #0]
				temp_threshold--;
 800226e:	4b71      	ldr	r3, [pc, #452]	; (8002434 <Menu+0x270>)
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	3b01      	subs	r3, #1
 8002274:	4a6f      	ldr	r2, [pc, #444]	; (8002434 <Menu+0x270>)
 8002276:	6013      	str	r3, [r2, #0]
				neg_button=0;
 8002278:	4b70      	ldr	r3, [pc, #448]	; (800243c <Menu+0x278>)
 800227a:	2200      	movs	r2, #0
 800227c:	601a      	str	r2, [r3, #0]
				// to print updated Threshold Value
				sprintf(buf1, "%d", temp_threshold);
 800227e:	4b6d      	ldr	r3, [pc, #436]	; (8002434 <Menu+0x270>)
 8002280:	681a      	ldr	r2, [r3, #0]
 8002282:	1d3b      	adds	r3, r7, #4
 8002284:	496c      	ldr	r1, [pc, #432]	; (8002438 <Menu+0x274>)
 8002286:	4618      	mov	r0, r3
 8002288:	f003 f964 	bl	8005554 <siprintf>
				HD44780_SetCursor(5,1);
 800228c:	2101      	movs	r1, #1
 800228e:	2005      	movs	r0, #5
 8002290:	f000 f97a 	bl	8002588 <HD44780_SetCursor>
				HD44780_PrintStr(buf1);
 8002294:	1d3b      	adds	r3, r7, #4
 8002296:	4618      	mov	r0, r3
 8002298:	f000 f9e7 	bl	800266a <HD44780_PrintStr>
			}
		}

		if (count==2)
 800229c:	4b60      	ldr	r3, [pc, #384]	; (8002420 <Menu+0x25c>)
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	2b02      	cmp	r3, #2
 80022a2:	d14d      	bne.n	8002340 <Menu+0x17c>
		{
			if (view_count==0)
 80022a4:	4b5f      	ldr	r3, [pc, #380]	; (8002424 <Menu+0x260>)
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	2b00      	cmp	r3, #0
 80022aa:	d10d      	bne.n	80022c8 <Menu+0x104>
			{
				HD44780_Clear();
 80022ac:	f000 f956 	bl	800255c <HD44780_Clear>
				HD44780_SetCursor(2,0);
 80022b0:	2100      	movs	r1, #0
 80022b2:	2002      	movs	r0, #2
 80022b4:	f000 f968 	bl	8002588 <HD44780_SetCursor>
				HD44780_PrintStr("Humidity");
 80022b8:	4861      	ldr	r0, [pc, #388]	; (8002440 <Menu+0x27c>)
 80022ba:	f000 f9d6 	bl	800266a <HD44780_PrintStr>
				view_count++;
 80022be:	4b59      	ldr	r3, [pc, #356]	; (8002424 <Menu+0x260>)
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	3301      	adds	r3, #1
 80022c4:	4a57      	ldr	r2, [pc, #348]	; (8002424 <Menu+0x260>)
 80022c6:	6013      	str	r3, [r2, #0]
			}

			if (pos_button==1)
 80022c8:	4b58      	ldr	r3, [pc, #352]	; (800242c <Menu+0x268>)
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	2b01      	cmp	r3, #1
 80022ce:	d119      	bne.n	8002304 <Menu+0x140>
			{
				time_elapsed=0;
 80022d0:	4b57      	ldr	r3, [pc, #348]	; (8002430 <Menu+0x26c>)
 80022d2:	2200      	movs	r2, #0
 80022d4:	601a      	str	r2, [r3, #0]
				humi_threshold++;
 80022d6:	4b5b      	ldr	r3, [pc, #364]	; (8002444 <Menu+0x280>)
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	3301      	adds	r3, #1
 80022dc:	4a59      	ldr	r2, [pc, #356]	; (8002444 <Menu+0x280>)
 80022de:	6013      	str	r3, [r2, #0]
				pos_button=0;
 80022e0:	4b52      	ldr	r3, [pc, #328]	; (800242c <Menu+0x268>)
 80022e2:	2200      	movs	r2, #0
 80022e4:	601a      	str	r2, [r3, #0]
				// to print updated Threshold Value
				sprintf(buf1, "%d", humi_threshold);
 80022e6:	4b57      	ldr	r3, [pc, #348]	; (8002444 <Menu+0x280>)
 80022e8:	681a      	ldr	r2, [r3, #0]
 80022ea:	1d3b      	adds	r3, r7, #4
 80022ec:	4952      	ldr	r1, [pc, #328]	; (8002438 <Menu+0x274>)
 80022ee:	4618      	mov	r0, r3
 80022f0:	f003 f930 	bl	8005554 <siprintf>
				HD44780_SetCursor(5,1);
 80022f4:	2101      	movs	r1, #1
 80022f6:	2005      	movs	r0, #5
 80022f8:	f000 f946 	bl	8002588 <HD44780_SetCursor>
				HD44780_PrintStr(buf1);
 80022fc:	1d3b      	adds	r3, r7, #4
 80022fe:	4618      	mov	r0, r3
 8002300:	f000 f9b3 	bl	800266a <HD44780_PrintStr>
			}

			if (neg_button==1)
 8002304:	4b4d      	ldr	r3, [pc, #308]	; (800243c <Menu+0x278>)
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	2b01      	cmp	r3, #1
 800230a:	d119      	bne.n	8002340 <Menu+0x17c>
			{
				time_elapsed=0;
 800230c:	4b48      	ldr	r3, [pc, #288]	; (8002430 <Menu+0x26c>)
 800230e:	2200      	movs	r2, #0
 8002310:	601a      	str	r2, [r3, #0]
				humi_threshold--;
 8002312:	4b4c      	ldr	r3, [pc, #304]	; (8002444 <Menu+0x280>)
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	3b01      	subs	r3, #1
 8002318:	4a4a      	ldr	r2, [pc, #296]	; (8002444 <Menu+0x280>)
 800231a:	6013      	str	r3, [r2, #0]
				neg_button=0;
 800231c:	4b47      	ldr	r3, [pc, #284]	; (800243c <Menu+0x278>)
 800231e:	2200      	movs	r2, #0
 8002320:	601a      	str	r2, [r3, #0]
				// to print updated Threshold Value
				sprintf(buf1, "%d", humi_threshold);
 8002322:	4b48      	ldr	r3, [pc, #288]	; (8002444 <Menu+0x280>)
 8002324:	681a      	ldr	r2, [r3, #0]
 8002326:	1d3b      	adds	r3, r7, #4
 8002328:	4943      	ldr	r1, [pc, #268]	; (8002438 <Menu+0x274>)
 800232a:	4618      	mov	r0, r3
 800232c:	f003 f912 	bl	8005554 <siprintf>
				HD44780_SetCursor(5,1);
 8002330:	2101      	movs	r1, #1
 8002332:	2005      	movs	r0, #5
 8002334:	f000 f928 	bl	8002588 <HD44780_SetCursor>
				HD44780_PrintStr(buf1);
 8002338:	1d3b      	adds	r3, r7, #4
 800233a:	4618      	mov	r0, r3
 800233c:	f000 f995 	bl	800266a <HD44780_PrintStr>
			}
		}

		if (count==3)
 8002340:	4b37      	ldr	r3, [pc, #220]	; (8002420 <Menu+0x25c>)
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	2b03      	cmp	r3, #3
 8002346:	d14d      	bne.n	80023e4 <Menu+0x220>
		{
			if (view_count==0)
 8002348:	4b36      	ldr	r3, [pc, #216]	; (8002424 <Menu+0x260>)
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	2b00      	cmp	r3, #0
 800234e:	d10d      	bne.n	800236c <Menu+0x1a8>
			{
				HD44780_Clear();
 8002350:	f000 f904 	bl	800255c <HD44780_Clear>
				HD44780_SetCursor(2,0);
 8002354:	2100      	movs	r1, #0
 8002356:	2002      	movs	r0, #2
 8002358:	f000 f916 	bl	8002588 <HD44780_SetCursor>
				HD44780_PrintStr("Pressure");
 800235c:	483a      	ldr	r0, [pc, #232]	; (8002448 <Menu+0x284>)
 800235e:	f000 f984 	bl	800266a <HD44780_PrintStr>
				view_count++;
 8002362:	4b30      	ldr	r3, [pc, #192]	; (8002424 <Menu+0x260>)
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	3301      	adds	r3, #1
 8002368:	4a2e      	ldr	r2, [pc, #184]	; (8002424 <Menu+0x260>)
 800236a:	6013      	str	r3, [r2, #0]
			}

			if (pos_button==1)
 800236c:	4b2f      	ldr	r3, [pc, #188]	; (800242c <Menu+0x268>)
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	2b01      	cmp	r3, #1
 8002372:	d119      	bne.n	80023a8 <Menu+0x1e4>
			{
				time_elapsed=0;
 8002374:	4b2e      	ldr	r3, [pc, #184]	; (8002430 <Menu+0x26c>)
 8002376:	2200      	movs	r2, #0
 8002378:	601a      	str	r2, [r3, #0]
				press_threshold++;
 800237a:	4b34      	ldr	r3, [pc, #208]	; (800244c <Menu+0x288>)
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	3301      	adds	r3, #1
 8002380:	4a32      	ldr	r2, [pc, #200]	; (800244c <Menu+0x288>)
 8002382:	6013      	str	r3, [r2, #0]
				pos_button=0;
 8002384:	4b29      	ldr	r3, [pc, #164]	; (800242c <Menu+0x268>)
 8002386:	2200      	movs	r2, #0
 8002388:	601a      	str	r2, [r3, #0]
				// to print updated Threshold Value
				sprintf(buf1, "%d", press_threshold);
 800238a:	4b30      	ldr	r3, [pc, #192]	; (800244c <Menu+0x288>)
 800238c:	681a      	ldr	r2, [r3, #0]
 800238e:	1d3b      	adds	r3, r7, #4
 8002390:	4929      	ldr	r1, [pc, #164]	; (8002438 <Menu+0x274>)
 8002392:	4618      	mov	r0, r3
 8002394:	f003 f8de 	bl	8005554 <siprintf>
				HD44780_SetCursor(5,1);
 8002398:	2101      	movs	r1, #1
 800239a:	2005      	movs	r0, #5
 800239c:	f000 f8f4 	bl	8002588 <HD44780_SetCursor>
				HD44780_PrintStr(buf1);
 80023a0:	1d3b      	adds	r3, r7, #4
 80023a2:	4618      	mov	r0, r3
 80023a4:	f000 f961 	bl	800266a <HD44780_PrintStr>
			}

			if (neg_button==1)
 80023a8:	4b24      	ldr	r3, [pc, #144]	; (800243c <Menu+0x278>)
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	2b01      	cmp	r3, #1
 80023ae:	d119      	bne.n	80023e4 <Menu+0x220>
			{
				time_elapsed=0;
 80023b0:	4b1f      	ldr	r3, [pc, #124]	; (8002430 <Menu+0x26c>)
 80023b2:	2200      	movs	r2, #0
 80023b4:	601a      	str	r2, [r3, #0]
				press_threshold--;
 80023b6:	4b25      	ldr	r3, [pc, #148]	; (800244c <Menu+0x288>)
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	3b01      	subs	r3, #1
 80023bc:	4a23      	ldr	r2, [pc, #140]	; (800244c <Menu+0x288>)
 80023be:	6013      	str	r3, [r2, #0]
				neg_button=0;
 80023c0:	4b1e      	ldr	r3, [pc, #120]	; (800243c <Menu+0x278>)
 80023c2:	2200      	movs	r2, #0
 80023c4:	601a      	str	r2, [r3, #0]
				// to print updated Threshold Value
				sprintf(buf1, "%d", press_threshold);
 80023c6:	4b21      	ldr	r3, [pc, #132]	; (800244c <Menu+0x288>)
 80023c8:	681a      	ldr	r2, [r3, #0]
 80023ca:	1d3b      	adds	r3, r7, #4
 80023cc:	491a      	ldr	r1, [pc, #104]	; (8002438 <Menu+0x274>)
 80023ce:	4618      	mov	r0, r3
 80023d0:	f003 f8c0 	bl	8005554 <siprintf>
				HD44780_SetCursor(5,1);
 80023d4:	2101      	movs	r1, #1
 80023d6:	2005      	movs	r0, #5
 80023d8:	f000 f8d6 	bl	8002588 <HD44780_SetCursor>
				HD44780_PrintStr(buf1);
 80023dc:	1d3b      	adds	r3, r7, #4
 80023de:	4618      	mov	r0, r3
 80023e0:	f000 f943 	bl	800266a <HD44780_PrintStr>
			}
		}

		if (count>5)
 80023e4:	4b0e      	ldr	r3, [pc, #56]	; (8002420 <Menu+0x25c>)
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	2b05      	cmp	r3, #5
 80023ea:	dd0b      	ble.n	8002404 <Menu+0x240>
		{
			count=0;
 80023ec:	4b0c      	ldr	r3, [pc, #48]	; (8002420 <Menu+0x25c>)
 80023ee:	2200      	movs	r2, #0
 80023f0:	601a      	str	r2, [r3, #0]
			menu_button=0;
 80023f2:	4b17      	ldr	r3, [pc, #92]	; (8002450 <Menu+0x28c>)
 80023f4:	2200      	movs	r2, #0
 80023f6:	601a      	str	r2, [r3, #0]
			Welcom_count=0;
 80023f8:	4b07      	ldr	r3, [pc, #28]	; (8002418 <Menu+0x254>)
 80023fa:	2200      	movs	r2, #0
 80023fc:	601a      	str	r2, [r3, #0]
			view_count=0;
 80023fe:	4b09      	ldr	r3, [pc, #36]	; (8002424 <Menu+0x260>)
 8002400:	2200      	movs	r2, #0
 8002402:	601a      	str	r2, [r3, #0]
	while(menu_button>0)
 8002404:	4b12      	ldr	r3, [pc, #72]	; (8002450 <Menu+0x28c>)
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	2b00      	cmp	r3, #0
 800240a:	f73f aedf 	bgt.w	80021cc <Menu+0x8>
	{
		count=0;
		menu_button=0;
	}*/
	}
}
 800240e:	bf00      	nop
 8002410:	bf00      	nop
 8002412:	3710      	adds	r7, #16
 8002414:	46bd      	mov	sp, r7
 8002416:	bd80      	pop	{r7, pc}
 8002418:	20000104 	.word	0x20000104
 800241c:	08008dc8 	.word	0x08008dc8
 8002420:	200000f0 	.word	0x200000f0
 8002424:	20000108 	.word	0x20000108
 8002428:	08008dd8 	.word	0x08008dd8
 800242c:	200000f8 	.word	0x200000f8
 8002430:	200000f4 	.word	0x200000f4
 8002434:	20000004 	.word	0x20000004
 8002438:	08008de4 	.word	0x08008de4
 800243c:	200000fc 	.word	0x200000fc
 8002440:	08008de8 	.word	0x08008de8
 8002444:	20000008 	.word	0x20000008
 8002448:	08008df4 	.word	0x08008df4
 800244c:	2000000c 	.word	0x2000000c
 8002450:	20000100 	.word	0x20000100

08002454 <HD44780_Init>:
        0b00110,
        0b00000
};

void HD44780_Init(uint8_t rows)
{
 8002454:	b580      	push	{r7, lr}
 8002456:	b082      	sub	sp, #8
 8002458:	af00      	add	r7, sp, #0
 800245a:	4603      	mov	r3, r0
 800245c:	71fb      	strb	r3, [r7, #7]
  dpRows = rows;
 800245e:	4a38      	ldr	r2, [pc, #224]	; (8002540 <HD44780_Init+0xec>)
 8002460:	79fb      	ldrb	r3, [r7, #7]
 8002462:	7013      	strb	r3, [r2, #0]

  dpBacklight = LCD_BACKLIGHT;
 8002464:	4b37      	ldr	r3, [pc, #220]	; (8002544 <HD44780_Init+0xf0>)
 8002466:	2208      	movs	r2, #8
 8002468:	701a      	strb	r2, [r3, #0]

  dpFunction = LCD_4BITMODE | LCD_1LINE | LCD_5x8DOTS;
 800246a:	4b37      	ldr	r3, [pc, #220]	; (8002548 <HD44780_Init+0xf4>)
 800246c:	2200      	movs	r2, #0
 800246e:	701a      	strb	r2, [r3, #0]

  if (dpRows > 1)
 8002470:	4b33      	ldr	r3, [pc, #204]	; (8002540 <HD44780_Init+0xec>)
 8002472:	781b      	ldrb	r3, [r3, #0]
 8002474:	2b01      	cmp	r3, #1
 8002476:	d907      	bls.n	8002488 <HD44780_Init+0x34>
  {
    dpFunction |= LCD_2LINE;
 8002478:	4b33      	ldr	r3, [pc, #204]	; (8002548 <HD44780_Init+0xf4>)
 800247a:	781b      	ldrb	r3, [r3, #0]
 800247c:	f043 0308 	orr.w	r3, r3, #8
 8002480:	b2da      	uxtb	r2, r3
 8002482:	4b31      	ldr	r3, [pc, #196]	; (8002548 <HD44780_Init+0xf4>)
 8002484:	701a      	strb	r2, [r3, #0]
 8002486:	e006      	b.n	8002496 <HD44780_Init+0x42>
  }
  else
  {
    dpFunction |= LCD_5x10DOTS;
 8002488:	4b2f      	ldr	r3, [pc, #188]	; (8002548 <HD44780_Init+0xf4>)
 800248a:	781b      	ldrb	r3, [r3, #0]
 800248c:	f043 0304 	orr.w	r3, r3, #4
 8002490:	b2da      	uxtb	r2, r3
 8002492:	4b2d      	ldr	r3, [pc, #180]	; (8002548 <HD44780_Init+0xf4>)
 8002494:	701a      	strb	r2, [r3, #0]
  }

  /* Wait for initialization */
  DelayInit();
 8002496:	f000 f985 	bl	80027a4 <DelayInit>
  HAL_Delay(50);
 800249a:	2032      	movs	r0, #50	; 0x32
 800249c:	f000 ff2c 	bl	80032f8 <HAL_Delay>

  ExpanderWrite(dpBacklight);
 80024a0:	4b28      	ldr	r3, [pc, #160]	; (8002544 <HD44780_Init+0xf0>)
 80024a2:	781b      	ldrb	r3, [r3, #0]
 80024a4:	4618      	mov	r0, r3
 80024a6:	f000 f943 	bl	8002730 <ExpanderWrite>
  HAL_Delay(1000);
 80024aa:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80024ae:	f000 ff23 	bl	80032f8 <HAL_Delay>

  /* 4bit Mode */
  Write4Bits(0x03 << 4);
 80024b2:	2030      	movs	r0, #48	; 0x30
 80024b4:	f000 f92b 	bl	800270e <Write4Bits>
  DelayUS(4500);
 80024b8:	f241 1094 	movw	r0, #4500	; 0x1194
 80024bc:	f000 f99a 	bl	80027f4 <DelayUS>

  Write4Bits(0x03 << 4);
 80024c0:	2030      	movs	r0, #48	; 0x30
 80024c2:	f000 f924 	bl	800270e <Write4Bits>
  DelayUS(4500);
 80024c6:	f241 1094 	movw	r0, #4500	; 0x1194
 80024ca:	f000 f993 	bl	80027f4 <DelayUS>

  Write4Bits(0x03 << 4);
 80024ce:	2030      	movs	r0, #48	; 0x30
 80024d0:	f000 f91d 	bl	800270e <Write4Bits>
  DelayUS(4500);
 80024d4:	f241 1094 	movw	r0, #4500	; 0x1194
 80024d8:	f000 f98c 	bl	80027f4 <DelayUS>

  Write4Bits(0x02 << 4);
 80024dc:	2020      	movs	r0, #32
 80024de:	f000 f916 	bl	800270e <Write4Bits>
  DelayUS(100);
 80024e2:	2064      	movs	r0, #100	; 0x64
 80024e4:	f000 f986 	bl	80027f4 <DelayUS>

  /* Display Control */
  SendCommand(LCD_FUNCTIONSET | dpFunction);
 80024e8:	4b17      	ldr	r3, [pc, #92]	; (8002548 <HD44780_Init+0xf4>)
 80024ea:	781b      	ldrb	r3, [r3, #0]
 80024ec:	f043 0320 	orr.w	r3, r3, #32
 80024f0:	b2db      	uxtb	r3, r3
 80024f2:	4618      	mov	r0, r3
 80024f4:	f000 f8ce 	bl	8002694 <SendCommand>

  dpControl = LCD_DISPLAYON | LCD_CURSOROFF | LCD_BLINKOFF;
 80024f8:	4b14      	ldr	r3, [pc, #80]	; (800254c <HD44780_Init+0xf8>)
 80024fa:	2204      	movs	r2, #4
 80024fc:	701a      	strb	r2, [r3, #0]
  HD44780_Display();
 80024fe:	f000 f875 	bl	80025ec <HD44780_Display>
  HD44780_Clear();
 8002502:	f000 f82b 	bl	800255c <HD44780_Clear>

  /* Display Mode */
  dpMode = LCD_ENTRYLEFT | LCD_ENTRYSHIFTDECREMENT;
 8002506:	4b12      	ldr	r3, [pc, #72]	; (8002550 <HD44780_Init+0xfc>)
 8002508:	2202      	movs	r2, #2
 800250a:	701a      	strb	r2, [r3, #0]
  SendCommand(LCD_ENTRYMODESET | dpMode);
 800250c:	4b10      	ldr	r3, [pc, #64]	; (8002550 <HD44780_Init+0xfc>)
 800250e:	781b      	ldrb	r3, [r3, #0]
 8002510:	f043 0304 	orr.w	r3, r3, #4
 8002514:	b2db      	uxtb	r3, r3
 8002516:	4618      	mov	r0, r3
 8002518:	f000 f8bc 	bl	8002694 <SendCommand>
  DelayUS(4500);
 800251c:	f241 1094 	movw	r0, #4500	; 0x1194
 8002520:	f000 f968 	bl	80027f4 <DelayUS>

  HD44780_CreateSpecialChar(0, special1);
 8002524:	490b      	ldr	r1, [pc, #44]	; (8002554 <HD44780_Init+0x100>)
 8002526:	2000      	movs	r0, #0
 8002528:	f000 f876 	bl	8002618 <HD44780_CreateSpecialChar>
  HD44780_CreateSpecialChar(1, special2);
 800252c:	490a      	ldr	r1, [pc, #40]	; (8002558 <HD44780_Init+0x104>)
 800252e:	2001      	movs	r0, #1
 8002530:	f000 f872 	bl	8002618 <HD44780_CreateSpecialChar>

  HD44780_Home();
 8002534:	f000 f81d 	bl	8002572 <HD44780_Home>
}
 8002538:	bf00      	nop
 800253a:	3708      	adds	r7, #8
 800253c:	46bd      	mov	sp, r7
 800253e:	bd80      	pop	{r7, pc}
 8002540:	2000010f 	.word	0x2000010f
 8002544:	20000110 	.word	0x20000110
 8002548:	2000010c 	.word	0x2000010c
 800254c:	2000010d 	.word	0x2000010d
 8002550:	2000010e 	.word	0x2000010e
 8002554:	20000010 	.word	0x20000010
 8002558:	20000018 	.word	0x20000018

0800255c <HD44780_Clear>:

void HD44780_Clear()
{
 800255c:	b580      	push	{r7, lr}
 800255e:	af00      	add	r7, sp, #0
  SendCommand(LCD_CLEARDISPLAY);
 8002560:	2001      	movs	r0, #1
 8002562:	f000 f897 	bl	8002694 <SendCommand>
  DelayUS(2000);
 8002566:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800256a:	f000 f943 	bl	80027f4 <DelayUS>
}
 800256e:	bf00      	nop
 8002570:	bd80      	pop	{r7, pc}

08002572 <HD44780_Home>:

void HD44780_Home()
{
 8002572:	b580      	push	{r7, lr}
 8002574:	af00      	add	r7, sp, #0
  SendCommand(LCD_RETURNHOME);
 8002576:	2002      	movs	r0, #2
 8002578:	f000 f88c 	bl	8002694 <SendCommand>
  DelayUS(2000);
 800257c:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8002580:	f000 f938 	bl	80027f4 <DelayUS>
}
 8002584:	bf00      	nop
 8002586:	bd80      	pop	{r7, pc}

08002588 <HD44780_SetCursor>:

void HD44780_SetCursor(uint8_t col, uint8_t row)
{
 8002588:	b590      	push	{r4, r7, lr}
 800258a:	b087      	sub	sp, #28
 800258c:	af00      	add	r7, sp, #0
 800258e:	4603      	mov	r3, r0
 8002590:	460a      	mov	r2, r1
 8002592:	71fb      	strb	r3, [r7, #7]
 8002594:	4613      	mov	r3, r2
 8002596:	71bb      	strb	r3, [r7, #6]
  int row_offsets[] = { 0x00, 0x40, 0x14, 0x54 };
 8002598:	4b12      	ldr	r3, [pc, #72]	; (80025e4 <HD44780_SetCursor+0x5c>)
 800259a:	f107 0408 	add.w	r4, r7, #8
 800259e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80025a0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  if (row >= dpRows)
 80025a4:	4b10      	ldr	r3, [pc, #64]	; (80025e8 <HD44780_SetCursor+0x60>)
 80025a6:	781b      	ldrb	r3, [r3, #0]
 80025a8:	79ba      	ldrb	r2, [r7, #6]
 80025aa:	429a      	cmp	r2, r3
 80025ac:	d303      	bcc.n	80025b6 <HD44780_SetCursor+0x2e>
  {
    row = dpRows-1;
 80025ae:	4b0e      	ldr	r3, [pc, #56]	; (80025e8 <HD44780_SetCursor+0x60>)
 80025b0:	781b      	ldrb	r3, [r3, #0]
 80025b2:	3b01      	subs	r3, #1
 80025b4:	71bb      	strb	r3, [r7, #6]
  }
  SendCommand(LCD_SETDDRAMADDR | (col + row_offsets[row]));
 80025b6:	79bb      	ldrb	r3, [r7, #6]
 80025b8:	009b      	lsls	r3, r3, #2
 80025ba:	3318      	adds	r3, #24
 80025bc:	443b      	add	r3, r7
 80025be:	f853 3c10 	ldr.w	r3, [r3, #-16]
 80025c2:	b2da      	uxtb	r2, r3
 80025c4:	79fb      	ldrb	r3, [r7, #7]
 80025c6:	4413      	add	r3, r2
 80025c8:	b2db      	uxtb	r3, r3
 80025ca:	b25b      	sxtb	r3, r3
 80025cc:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80025d0:	b25b      	sxtb	r3, r3
 80025d2:	b2db      	uxtb	r3, r3
 80025d4:	4618      	mov	r0, r3
 80025d6:	f000 f85d 	bl	8002694 <SendCommand>
}
 80025da:	bf00      	nop
 80025dc:	371c      	adds	r7, #28
 80025de:	46bd      	mov	sp, r7
 80025e0:	bd90      	pop	{r4, r7, pc}
 80025e2:	bf00      	nop
 80025e4:	08008e00 	.word	0x08008e00
 80025e8:	2000010f 	.word	0x2000010f

080025ec <HD44780_Display>:



void HD44780_Display()
{
 80025ec:	b580      	push	{r7, lr}
 80025ee:	af00      	add	r7, sp, #0
  dpControl |= LCD_DISPLAYON;
 80025f0:	4b08      	ldr	r3, [pc, #32]	; (8002614 <HD44780_Display+0x28>)
 80025f2:	781b      	ldrb	r3, [r3, #0]
 80025f4:	f043 0304 	orr.w	r3, r3, #4
 80025f8:	b2da      	uxtb	r2, r3
 80025fa:	4b06      	ldr	r3, [pc, #24]	; (8002614 <HD44780_Display+0x28>)
 80025fc:	701a      	strb	r2, [r3, #0]
  SendCommand(LCD_DISPLAYCONTROL | dpControl);
 80025fe:	4b05      	ldr	r3, [pc, #20]	; (8002614 <HD44780_Display+0x28>)
 8002600:	781b      	ldrb	r3, [r3, #0]
 8002602:	f043 0308 	orr.w	r3, r3, #8
 8002606:	b2db      	uxtb	r3, r3
 8002608:	4618      	mov	r0, r3
 800260a:	f000 f843 	bl	8002694 <SendCommand>
}
 800260e:	bf00      	nop
 8002610:	bd80      	pop	{r7, pc}
 8002612:	bf00      	nop
 8002614:	2000010d 	.word	0x2000010d

08002618 <HD44780_CreateSpecialChar>:

void HD44780_CreateSpecialChar(uint8_t location, uint8_t charmap[])
{
 8002618:	b580      	push	{r7, lr}
 800261a:	b084      	sub	sp, #16
 800261c:	af00      	add	r7, sp, #0
 800261e:	4603      	mov	r3, r0
 8002620:	6039      	str	r1, [r7, #0]
 8002622:	71fb      	strb	r3, [r7, #7]
  location &= 0x7;
 8002624:	79fb      	ldrb	r3, [r7, #7]
 8002626:	f003 0307 	and.w	r3, r3, #7
 800262a:	71fb      	strb	r3, [r7, #7]
  SendCommand(LCD_SETCGRAMADDR | (location << 3));
 800262c:	79fb      	ldrb	r3, [r7, #7]
 800262e:	00db      	lsls	r3, r3, #3
 8002630:	b25b      	sxtb	r3, r3
 8002632:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002636:	b25b      	sxtb	r3, r3
 8002638:	b2db      	uxtb	r3, r3
 800263a:	4618      	mov	r0, r3
 800263c:	f000 f82a 	bl	8002694 <SendCommand>
  for (int i=0; i<8; i++)
 8002640:	2300      	movs	r3, #0
 8002642:	60fb      	str	r3, [r7, #12]
 8002644:	e009      	b.n	800265a <HD44780_CreateSpecialChar+0x42>
  {
    SendChar(charmap[i]);
 8002646:	68fb      	ldr	r3, [r7, #12]
 8002648:	683a      	ldr	r2, [r7, #0]
 800264a:	4413      	add	r3, r2
 800264c:	781b      	ldrb	r3, [r3, #0]
 800264e:	4618      	mov	r0, r3
 8002650:	f000 f82e 	bl	80026b0 <SendChar>
  for (int i=0; i<8; i++)
 8002654:	68fb      	ldr	r3, [r7, #12]
 8002656:	3301      	adds	r3, #1
 8002658:	60fb      	str	r3, [r7, #12]
 800265a:	68fb      	ldr	r3, [r7, #12]
 800265c:	2b07      	cmp	r3, #7
 800265e:	ddf2      	ble.n	8002646 <HD44780_CreateSpecialChar+0x2e>
  }
}
 8002660:	bf00      	nop
 8002662:	bf00      	nop
 8002664:	3710      	adds	r7, #16
 8002666:	46bd      	mov	sp, r7
 8002668:	bd80      	pop	{r7, pc}

0800266a <HD44780_PrintStr>:

void HD44780_PrintStr(const char c[])
{
 800266a:	b580      	push	{r7, lr}
 800266c:	b082      	sub	sp, #8
 800266e:	af00      	add	r7, sp, #0
 8002670:	6078      	str	r0, [r7, #4]
  while(*c) SendChar(*c++);
 8002672:	e006      	b.n	8002682 <HD44780_PrintStr+0x18>
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	1c5a      	adds	r2, r3, #1
 8002678:	607a      	str	r2, [r7, #4]
 800267a:	781b      	ldrb	r3, [r3, #0]
 800267c:	4618      	mov	r0, r3
 800267e:	f000 f817 	bl	80026b0 <SendChar>
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	781b      	ldrb	r3, [r3, #0]
 8002686:	2b00      	cmp	r3, #0
 8002688:	d1f4      	bne.n	8002674 <HD44780_PrintStr+0xa>
}
 800268a:	bf00      	nop
 800268c:	bf00      	nop
 800268e:	3708      	adds	r7, #8
 8002690:	46bd      	mov	sp, r7
 8002692:	bd80      	pop	{r7, pc}

08002694 <SendCommand>:


static void SendCommand(uint8_t cmd)
{
 8002694:	b580      	push	{r7, lr}
 8002696:	b082      	sub	sp, #8
 8002698:	af00      	add	r7, sp, #0
 800269a:	4603      	mov	r3, r0
 800269c:	71fb      	strb	r3, [r7, #7]
  Send(cmd, 0);
 800269e:	79fb      	ldrb	r3, [r7, #7]
 80026a0:	2100      	movs	r1, #0
 80026a2:	4618      	mov	r0, r3
 80026a4:	f000 f812 	bl	80026cc <Send>
}
 80026a8:	bf00      	nop
 80026aa:	3708      	adds	r7, #8
 80026ac:	46bd      	mov	sp, r7
 80026ae:	bd80      	pop	{r7, pc}

080026b0 <SendChar>:

static void SendChar(uint8_t ch)
{
 80026b0:	b580      	push	{r7, lr}
 80026b2:	b082      	sub	sp, #8
 80026b4:	af00      	add	r7, sp, #0
 80026b6:	4603      	mov	r3, r0
 80026b8:	71fb      	strb	r3, [r7, #7]
  Send(ch, RS);
 80026ba:	79fb      	ldrb	r3, [r7, #7]
 80026bc:	2101      	movs	r1, #1
 80026be:	4618      	mov	r0, r3
 80026c0:	f000 f804 	bl	80026cc <Send>
}
 80026c4:	bf00      	nop
 80026c6:	3708      	adds	r7, #8
 80026c8:	46bd      	mov	sp, r7
 80026ca:	bd80      	pop	{r7, pc}

080026cc <Send>:

static void Send(uint8_t value, uint8_t mode)
{
 80026cc:	b580      	push	{r7, lr}
 80026ce:	b084      	sub	sp, #16
 80026d0:	af00      	add	r7, sp, #0
 80026d2:	4603      	mov	r3, r0
 80026d4:	460a      	mov	r2, r1
 80026d6:	71fb      	strb	r3, [r7, #7]
 80026d8:	4613      	mov	r3, r2
 80026da:	71bb      	strb	r3, [r7, #6]
  uint8_t highnib = value & 0xF0;
 80026dc:	79fb      	ldrb	r3, [r7, #7]
 80026de:	f023 030f 	bic.w	r3, r3, #15
 80026e2:	73fb      	strb	r3, [r7, #15]
  uint8_t lownib = (value<<4) & 0xF0;
 80026e4:	79fb      	ldrb	r3, [r7, #7]
 80026e6:	011b      	lsls	r3, r3, #4
 80026e8:	73bb      	strb	r3, [r7, #14]
  Write4Bits((highnib)|mode);
 80026ea:	7bfa      	ldrb	r2, [r7, #15]
 80026ec:	79bb      	ldrb	r3, [r7, #6]
 80026ee:	4313      	orrs	r3, r2
 80026f0:	b2db      	uxtb	r3, r3
 80026f2:	4618      	mov	r0, r3
 80026f4:	f000 f80b 	bl	800270e <Write4Bits>
  Write4Bits((lownib)|mode);
 80026f8:	7bba      	ldrb	r2, [r7, #14]
 80026fa:	79bb      	ldrb	r3, [r7, #6]
 80026fc:	4313      	orrs	r3, r2
 80026fe:	b2db      	uxtb	r3, r3
 8002700:	4618      	mov	r0, r3
 8002702:	f000 f804 	bl	800270e <Write4Bits>
}
 8002706:	bf00      	nop
 8002708:	3710      	adds	r7, #16
 800270a:	46bd      	mov	sp, r7
 800270c:	bd80      	pop	{r7, pc}

0800270e <Write4Bits>:

static void Write4Bits(uint8_t value)
{
 800270e:	b580      	push	{r7, lr}
 8002710:	b082      	sub	sp, #8
 8002712:	af00      	add	r7, sp, #0
 8002714:	4603      	mov	r3, r0
 8002716:	71fb      	strb	r3, [r7, #7]
  ExpanderWrite(value);
 8002718:	79fb      	ldrb	r3, [r7, #7]
 800271a:	4618      	mov	r0, r3
 800271c:	f000 f808 	bl	8002730 <ExpanderWrite>
  PulseEnable(value);
 8002720:	79fb      	ldrb	r3, [r7, #7]
 8002722:	4618      	mov	r0, r3
 8002724:	f000 f820 	bl	8002768 <PulseEnable>
}
 8002728:	bf00      	nop
 800272a:	3708      	adds	r7, #8
 800272c:	46bd      	mov	sp, r7
 800272e:	bd80      	pop	{r7, pc}

08002730 <ExpanderWrite>:

static void ExpanderWrite(uint8_t _data)
{
 8002730:	b580      	push	{r7, lr}
 8002732:	b086      	sub	sp, #24
 8002734:	af02      	add	r7, sp, #8
 8002736:	4603      	mov	r3, r0
 8002738:	71fb      	strb	r3, [r7, #7]
  uint8_t data = _data | dpBacklight;
 800273a:	4b09      	ldr	r3, [pc, #36]	; (8002760 <ExpanderWrite+0x30>)
 800273c:	781a      	ldrb	r2, [r3, #0]
 800273e:	79fb      	ldrb	r3, [r7, #7]
 8002740:	4313      	orrs	r3, r2
 8002742:	b2db      	uxtb	r3, r3
 8002744:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_Master_Transmit(&hi2c1, DEVICE_ADDR, (uint8_t*)&data, 1, 10);
 8002746:	f107 020f 	add.w	r2, r7, #15
 800274a:	230a      	movs	r3, #10
 800274c:	9300      	str	r3, [sp, #0]
 800274e:	2301      	movs	r3, #1
 8002750:	214e      	movs	r1, #78	; 0x4e
 8002752:	4804      	ldr	r0, [pc, #16]	; (8002764 <ExpanderWrite+0x34>)
 8002754:	f001 fa1c 	bl	8003b90 <HAL_I2C_Master_Transmit>
}
 8002758:	bf00      	nop
 800275a:	3710      	adds	r7, #16
 800275c:	46bd      	mov	sp, r7
 800275e:	bd80      	pop	{r7, pc}
 8002760:	20000110 	.word	0x20000110
 8002764:	20000114 	.word	0x20000114

08002768 <PulseEnable>:

static void PulseEnable(uint8_t _data)
{
 8002768:	b580      	push	{r7, lr}
 800276a:	b082      	sub	sp, #8
 800276c:	af00      	add	r7, sp, #0
 800276e:	4603      	mov	r3, r0
 8002770:	71fb      	strb	r3, [r7, #7]
  ExpanderWrite(_data | ENABLE);
 8002772:	79fb      	ldrb	r3, [r7, #7]
 8002774:	f043 0304 	orr.w	r3, r3, #4
 8002778:	b2db      	uxtb	r3, r3
 800277a:	4618      	mov	r0, r3
 800277c:	f7ff ffd8 	bl	8002730 <ExpanderWrite>
  DelayUS(20);
 8002780:	2014      	movs	r0, #20
 8002782:	f000 f837 	bl	80027f4 <DelayUS>

  ExpanderWrite(_data & ~ENABLE);
 8002786:	79fb      	ldrb	r3, [r7, #7]
 8002788:	f023 0304 	bic.w	r3, r3, #4
 800278c:	b2db      	uxtb	r3, r3
 800278e:	4618      	mov	r0, r3
 8002790:	f7ff ffce 	bl	8002730 <ExpanderWrite>
  DelayUS(20);
 8002794:	2014      	movs	r0, #20
 8002796:	f000 f82d 	bl	80027f4 <DelayUS>
}
 800279a:	bf00      	nop
 800279c:	3708      	adds	r7, #8
 800279e:	46bd      	mov	sp, r7
 80027a0:	bd80      	pop	{r7, pc}
	...

080027a4 <DelayInit>:

static void DelayInit(void)
{
 80027a4:	b480      	push	{r7}
 80027a6:	af00      	add	r7, sp, #0
  CoreDebug->DEMCR &= ~CoreDebug_DEMCR_TRCENA_Msk;
 80027a8:	4b10      	ldr	r3, [pc, #64]	; (80027ec <DelayInit+0x48>)
 80027aa:	68db      	ldr	r3, [r3, #12]
 80027ac:	4a0f      	ldr	r2, [pc, #60]	; (80027ec <DelayInit+0x48>)
 80027ae:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80027b2:	60d3      	str	r3, [r2, #12]
  CoreDebug->DEMCR |=  CoreDebug_DEMCR_TRCENA_Msk;
 80027b4:	4b0d      	ldr	r3, [pc, #52]	; (80027ec <DelayInit+0x48>)
 80027b6:	68db      	ldr	r3, [r3, #12]
 80027b8:	4a0c      	ldr	r2, [pc, #48]	; (80027ec <DelayInit+0x48>)
 80027ba:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80027be:	60d3      	str	r3, [r2, #12]

  DWT->CTRL &= ~DWT_CTRL_CYCCNTENA_Msk; //~0x00000001;
 80027c0:	4b0b      	ldr	r3, [pc, #44]	; (80027f0 <DelayInit+0x4c>)
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	4a0a      	ldr	r2, [pc, #40]	; (80027f0 <DelayInit+0x4c>)
 80027c6:	f023 0301 	bic.w	r3, r3, #1
 80027ca:	6013      	str	r3, [r2, #0]
  DWT->CTRL |=  DWT_CTRL_CYCCNTENA_Msk; //0x00000001;
 80027cc:	4b08      	ldr	r3, [pc, #32]	; (80027f0 <DelayInit+0x4c>)
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	4a07      	ldr	r2, [pc, #28]	; (80027f0 <DelayInit+0x4c>)
 80027d2:	f043 0301 	orr.w	r3, r3, #1
 80027d6:	6013      	str	r3, [r2, #0]

  DWT->CYCCNT = 0;
 80027d8:	4b05      	ldr	r3, [pc, #20]	; (80027f0 <DelayInit+0x4c>)
 80027da:	2200      	movs	r2, #0
 80027dc:	605a      	str	r2, [r3, #4]

  /* 3 NO OPERATION instructions */
  __ASM volatile ("NOP");
 80027de:	bf00      	nop
  __ASM volatile ("NOP");
 80027e0:	bf00      	nop
  __ASM volatile ("NOP");
 80027e2:	bf00      	nop
}
 80027e4:	bf00      	nop
 80027e6:	46bd      	mov	sp, r7
 80027e8:	bc80      	pop	{r7}
 80027ea:	4770      	bx	lr
 80027ec:	e000edf0 	.word	0xe000edf0
 80027f0:	e0001000 	.word	0xe0001000

080027f4 <DelayUS>:

static void DelayUS(uint32_t us) {
 80027f4:	b480      	push	{r7}
 80027f6:	b087      	sub	sp, #28
 80027f8:	af00      	add	r7, sp, #0
 80027fa:	6078      	str	r0, [r7, #4]
  uint32_t cycles = (SystemCoreClock/1000000L)*us;
 80027fc:	4b0d      	ldr	r3, [pc, #52]	; (8002834 <DelayUS+0x40>)
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	4a0d      	ldr	r2, [pc, #52]	; (8002838 <DelayUS+0x44>)
 8002802:	fba2 2303 	umull	r2, r3, r2, r3
 8002806:	0c9a      	lsrs	r2, r3, #18
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	fb02 f303 	mul.w	r3, r2, r3
 800280e:	617b      	str	r3, [r7, #20]
  uint32_t start = DWT->CYCCNT;
 8002810:	4b0a      	ldr	r3, [pc, #40]	; (800283c <DelayUS+0x48>)
 8002812:	685b      	ldr	r3, [r3, #4]
 8002814:	613b      	str	r3, [r7, #16]
  volatile uint32_t cnt;

  do
  {
    cnt = DWT->CYCCNT - start;
 8002816:	4b09      	ldr	r3, [pc, #36]	; (800283c <DelayUS+0x48>)
 8002818:	685a      	ldr	r2, [r3, #4]
 800281a:	693b      	ldr	r3, [r7, #16]
 800281c:	1ad3      	subs	r3, r2, r3
 800281e:	60fb      	str	r3, [r7, #12]
  } while(cnt < cycles);
 8002820:	68fb      	ldr	r3, [r7, #12]
 8002822:	697a      	ldr	r2, [r7, #20]
 8002824:	429a      	cmp	r2, r3
 8002826:	d8f6      	bhi.n	8002816 <DelayUS+0x22>
}
 8002828:	bf00      	nop
 800282a:	bf00      	nop
 800282c:	371c      	adds	r7, #28
 800282e:	46bd      	mov	sp, r7
 8002830:	bc80      	pop	{r7}
 8002832:	4770      	bx	lr
 8002834:	20000020 	.word	0x20000020
 8002838:	431bde83 	.word	0x431bde83
 800283c:	e0001000 	.word	0xe0001000

08002840 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002840:	b580      	push	{r7, lr}
 8002842:	b08e      	sub	sp, #56	; 0x38
 8002844:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002846:	f000 fcf5 	bl	8003234 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800284a:	f000 f8f1 	bl	8002a30 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800284e:	f000 f9e9 	bl	8002c24 <MX_GPIO_Init>
  MX_I2C1_Init();
 8002852:	f000 f933 	bl	8002abc <MX_I2C1_Init>
  MX_SPI2_Init();
 8002856:	f000 f95f 	bl	8002b18 <MX_SPI2_Init>
  MX_TIM1_Init();
 800285a:	f000 f993 	bl	8002b84 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */

  /*****************************************************************************************************/
  /*****************************************16X2 LCD Initialization*************************************/

  HD44780_Init(2);
 800285e:	2002      	movs	r0, #2
 8002860:	f7ff fdf8 	bl	8002454 <HD44780_Init>
  HD44780_PrintStr("WELCOME!!!");
 8002864:	4866      	ldr	r0, [pc, #408]	; (8002a00 <main+0x1c0>)
 8002866:	f7ff ff00 	bl	800266a <HD44780_PrintStr>

  /*****************************************************************************************************/
  /***************************************** DHT11 Timer  Start*****************************************/

  HAL_TIM_Base_Start(&htim1);
 800286a:	4866      	ldr	r0, [pc, #408]	; (8002a04 <main+0x1c4>)
 800286c:	f002 fbb8 	bl	8004fe0 <HAL_TIM_Base_Start>
  char strCopy1[15];

  /*****************************************************************************************************/
  /*****************************************BMP280   Initialization*************************************/

  BMP280_init();
 8002870:	f7fe ff14 	bl	800169c <BMP280_init>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  BMP280_get_calib_values();
 8002874:	f7fe fe6a 	bl	800154c <BMP280_get_calib_values>
	  HAL_Delay(100);
 8002878:	2064      	movs	r0, #100	; 0x64
 800287a:	f000 fd3d 	bl	80032f8 <HAL_Delay>

	  //Reading BMP280 sensor value in a structure
	  read_value_main=BMP280_measure();
 800287e:	f107 030c 	add.w	r3, r7, #12
 8002882:	4618      	mov	r0, r3
 8002884:	f7fe ff18 	bl	80016b8 <BMP280_measure>

	  t[0]=read_value_main.temp;
 8002888:	68fb      	ldr	r3, [r7, #12]
 800288a:	603b      	str	r3, [r7, #0]
	  t[1]=read_value_main.press/100;
 800288c:	693b      	ldr	r3, [r7, #16]
 800288e:	495e      	ldr	r1, [pc, #376]	; (8002a08 <main+0x1c8>)
 8002890:	4618      	mov	r0, r3
 8002892:	f7fe fb03 	bl	8000e9c <__aeabi_fdiv>
 8002896:	4603      	mov	r3, r0
 8002898:	607b      	str	r3, [r7, #4]
	  t[2]=-1*read_value_main.alti/100;
 800289a:	697b      	ldr	r3, [r7, #20]
 800289c:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 80028a0:	4959      	ldr	r1, [pc, #356]	; (8002a08 <main+0x1c8>)
 80028a2:	4618      	mov	r0, r3
 80028a4:	f7fe fafa 	bl	8000e9c <__aeabi_fdiv>
 80028a8:	4603      	mov	r3, r0
 80028aa:	60bb      	str	r3, [r7, #8]

	  //Displaying The value collected from BMP289 sensor
	  HD44780_Clear();
 80028ac:	f7ff fe56 	bl	800255c <HD44780_Clear>
	  HD44780_SetCursor(2,0);
 80028b0:	2100      	movs	r1, #0
 80028b2:	2002      	movs	r0, #2
 80028b4:	f7ff fe68 	bl	8002588 <HD44780_SetCursor>
	  gcvt(t[0], 7, buf1);
 80028b8:	683b      	ldr	r3, [r7, #0]
 80028ba:	4618      	mov	r0, r3
 80028bc:	f7fd fdac 	bl	8000418 <__aeabi_f2d>
 80028c0:	f107 0318 	add.w	r3, r7, #24
 80028c4:	2207      	movs	r2, #7
 80028c6:	f002 fdef 	bl	80054a8 <gcvt>
	  HD44780_PrintStr("Temperature:");
 80028ca:	4850      	ldr	r0, [pc, #320]	; (8002a0c <main+0x1cc>)
 80028cc:	f7ff fecd 	bl	800266a <HD44780_PrintStr>
	  HD44780_SetCursor(5,1);
 80028d0:	2101      	movs	r1, #1
 80028d2:	2005      	movs	r0, #5
 80028d4:	f7ff fe58 	bl	8002588 <HD44780_SetCursor>
	  HD44780_PrintStr(buf1);
 80028d8:	f107 0318 	add.w	r3, r7, #24
 80028dc:	4618      	mov	r0, r3
 80028de:	f7ff fec4 	bl	800266a <HD44780_PrintStr>
 	  HAL_Delay(1000);
 80028e2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80028e6:	f000 fd07 	bl	80032f8 <HAL_Delay>

	  HD44780_Clear();
 80028ea:	f7ff fe37 	bl	800255c <HD44780_Clear>
	  HD44780_SetCursor(2,0);
 80028ee:	2100      	movs	r1, #0
 80028f0:	2002      	movs	r0, #2
 80028f2:	f7ff fe49 	bl	8002588 <HD44780_SetCursor>
	  gcvt(t[1], 5, buf1);
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	4618      	mov	r0, r3
 80028fa:	f7fd fd8d 	bl	8000418 <__aeabi_f2d>
 80028fe:	f107 0318 	add.w	r3, r7, #24
 8002902:	2205      	movs	r2, #5
 8002904:	f002 fdd0 	bl	80054a8 <gcvt>
	  HD44780_PrintStr("Pressure:");
 8002908:	4841      	ldr	r0, [pc, #260]	; (8002a10 <main+0x1d0>)
 800290a:	f7ff feae 	bl	800266a <HD44780_PrintStr>
	  HD44780_SetCursor(5,1);
 800290e:	2101      	movs	r1, #1
 8002910:	2005      	movs	r0, #5
 8002912:	f7ff fe39 	bl	8002588 <HD44780_SetCursor>
	  HD44780_PrintStr(buf1);
 8002916:	f107 0318 	add.w	r3, r7, #24
 800291a:	4618      	mov	r0, r3
 800291c:	f7ff fea5 	bl	800266a <HD44780_PrintStr>
	  HAL_Delay(1000);
 8002920:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002924:	f000 fce8 	bl	80032f8 <HAL_Delay>

	  /*****************************************************************************************************************/
	  /************************************************Value from DHT11 sensor******************************************/

	  DHT11_read_value2=DHT11_Print_Value();
 8002928:	f7ff fbd2 	bl	80020d0 <DHT11_Print_Value>
 800292c:	4603      	mov	r3, r0
 800292e:	86bb      	strh	r3, [r7, #52]	; 0x34
	  TCI =DHT11_read_value2.DHT11_temp;
 8002930:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8002934:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	  RHI =DHT11_read_value2.DHT11_humi;
 8002938:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 800293c:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36

	  HD44780_Clear();
 8002940:	f7ff fe0c 	bl	800255c <HD44780_Clear>
	  HD44780_SetCursor(2,0);
 8002944:	2100      	movs	r1, #0
 8002946:	2002      	movs	r0, #2
 8002948:	f7ff fe1e 	bl	8002588 <HD44780_SetCursor>
	  HD44780_PrintStr("Humidity:");
 800294c:	4831      	ldr	r0, [pc, #196]	; (8002a14 <main+0x1d4>)
 800294e:	f7ff fe8c 	bl	800266a <HD44780_PrintStr>
	  HD44780_SetCursor(5,1);
 8002952:	2101      	movs	r1, #1
 8002954:	2005      	movs	r0, #5
 8002956:	f7ff fe17 	bl	8002588 <HD44780_SetCursor>
	  sprintf(strCopy1, "%d.%d %% ",RHI);
 800295a:	f897 2036 	ldrb.w	r2, [r7, #54]	; 0x36
 800295e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002962:	492d      	ldr	r1, [pc, #180]	; (8002a18 <main+0x1d8>)
 8002964:	4618      	mov	r0, r3
 8002966:	f002 fdf5 	bl	8005554 <siprintf>
	  HD44780_PrintStr(strCopy1);
 800296a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800296e:	4618      	mov	r0, r3
 8002970:	f7ff fe7b 	bl	800266a <HD44780_PrintStr>
	  HAL_Delay(1000);
 8002974:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002978:	f000 fcbe 	bl	80032f8 <HAL_Delay>

	  /*****************************************************************************************************************/
	  /***************************************Relay program to Take corrective measures*********************************/

	  if (t[0]>31)   //Temperature
 800297c:	683b      	ldr	r3, [r7, #0]
 800297e:	4927      	ldr	r1, [pc, #156]	; (8002a1c <main+0x1dc>)
 8002980:	4618      	mov	r0, r3
 8002982:	f7fe fb93 	bl	80010ac <__aeabi_fcmpgt>
 8002986:	4603      	mov	r3, r0
 8002988:	2b00      	cmp	r3, #0
 800298a:	d005      	beq.n	8002998 <main+0x158>
	  {
		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, GPIO_PIN_SET);
 800298c:	2201      	movs	r2, #1
 800298e:	2108      	movs	r1, #8
 8002990:	4823      	ldr	r0, [pc, #140]	; (8002a20 <main+0x1e0>)
 8002992:	f000 ff7e 	bl	8003892 <HAL_GPIO_WritePin>
 8002996:	e004      	b.n	80029a2 <main+0x162>
	  }
	  else
	  {
		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, GPIO_PIN_RESET);
 8002998:	2200      	movs	r2, #0
 800299a:	2108      	movs	r1, #8
 800299c:	4820      	ldr	r0, [pc, #128]	; (8002a20 <main+0x1e0>)
 800299e:	f000 ff78 	bl	8003892 <HAL_GPIO_WritePin>
	  }

	  if (t[1]>970)	//Pressure
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	491f      	ldr	r1, [pc, #124]	; (8002a24 <main+0x1e4>)
 80029a6:	4618      	mov	r0, r3
 80029a8:	f7fe fb80 	bl	80010ac <__aeabi_fcmpgt>
 80029ac:	4603      	mov	r3, r0
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	d005      	beq.n	80029be <main+0x17e>
	  {
		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_SET);
 80029b2:	2201      	movs	r2, #1
 80029b4:	2110      	movs	r1, #16
 80029b6:	481a      	ldr	r0, [pc, #104]	; (8002a20 <main+0x1e0>)
 80029b8:	f000 ff6b 	bl	8003892 <HAL_GPIO_WritePin>
 80029bc:	e004      	b.n	80029c8 <main+0x188>
	  }
	  else
	  {
		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_RESET);
 80029be:	2200      	movs	r2, #0
 80029c0:	2110      	movs	r1, #16
 80029c2:	4817      	ldr	r0, [pc, #92]	; (8002a20 <main+0x1e0>)
 80029c4:	f000 ff65 	bl	8003892 <HAL_GPIO_WritePin>
	  }

	  if (RHI>45)		//Humidity
 80029c8:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 80029cc:	2b2d      	cmp	r3, #45	; 0x2d
 80029ce:	d905      	bls.n	80029dc <main+0x19c>
	  {
		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_SET);
 80029d0:	2201      	movs	r2, #1
 80029d2:	2120      	movs	r1, #32
 80029d4:	4812      	ldr	r0, [pc, #72]	; (8002a20 <main+0x1e0>)
 80029d6:	f000 ff5c 	bl	8003892 <HAL_GPIO_WritePin>
 80029da:	e004      	b.n	80029e6 <main+0x1a6>
	  }
	  else
	  {
		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_RESET);
 80029dc:	2200      	movs	r2, #0
 80029de:	2120      	movs	r1, #32
 80029e0:	480f      	ldr	r0, [pc, #60]	; (8002a20 <main+0x1e0>)
 80029e2:	f000 ff56 	bl	8003892 <HAL_GPIO_WritePin>
	  }

	  /****************************************************************************************************************/
	  /************************************************Interrupt Button Code ******************************************/

	  if (menu_button==1 && count>0)   //interrupt
 80029e6:	4b10      	ldr	r3, [pc, #64]	; (8002a28 <main+0x1e8>)
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	2b01      	cmp	r3, #1
 80029ec:	f47f af42 	bne.w	8002874 <main+0x34>
 80029f0:	4b0e      	ldr	r3, [pc, #56]	; (8002a2c <main+0x1ec>)
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	2b00      	cmp	r3, #0
 80029f6:	f77f af3d 	ble.w	8002874 <main+0x34>
	  {
		  Menu();
 80029fa:	f7ff fbe3 	bl	80021c4 <Menu>
  {
 80029fe:	e739      	b.n	8002874 <main+0x34>
 8002a00:	08008e10 	.word	0x08008e10
 8002a04:	200001c0 	.word	0x200001c0
 8002a08:	42c80000 	.word	0x42c80000
 8002a0c:	08008e1c 	.word	0x08008e1c
 8002a10:	08008e2c 	.word	0x08008e2c
 8002a14:	08008e38 	.word	0x08008e38
 8002a18:	08008e44 	.word	0x08008e44
 8002a1c:	41f80000 	.word	0x41f80000
 8002a20:	40010c00 	.word	0x40010c00
 8002a24:	44728000 	.word	0x44728000
 8002a28:	20000100 	.word	0x20000100
 8002a2c:	200000f0 	.word	0x200000f0

08002a30 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002a30:	b580      	push	{r7, lr}
 8002a32:	b090      	sub	sp, #64	; 0x40
 8002a34:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002a36:	f107 0318 	add.w	r3, r7, #24
 8002a3a:	2228      	movs	r2, #40	; 0x28
 8002a3c:	2100      	movs	r1, #0
 8002a3e:	4618      	mov	r0, r3
 8002a40:	f002 fd80 	bl	8005544 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002a44:	1d3b      	adds	r3, r7, #4
 8002a46:	2200      	movs	r2, #0
 8002a48:	601a      	str	r2, [r3, #0]
 8002a4a:	605a      	str	r2, [r3, #4]
 8002a4c:	609a      	str	r2, [r3, #8]
 8002a4e:	60da      	str	r2, [r3, #12]
 8002a50:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002a52:	2301      	movs	r3, #1
 8002a54:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002a56:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002a5a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8002a5c:	2300      	movs	r3, #0
 8002a5e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002a60:	2301      	movs	r3, #1
 8002a62:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002a64:	2302      	movs	r3, #2
 8002a66:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002a68:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002a6c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8002a6e:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8002a72:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002a74:	f107 0318 	add.w	r3, r7, #24
 8002a78:	4618      	mov	r0, r3
 8002a7a:	f001 fb8f 	bl	800419c <HAL_RCC_OscConfig>
 8002a7e:	4603      	mov	r3, r0
 8002a80:	2b00      	cmp	r3, #0
 8002a82:	d001      	beq.n	8002a88 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8002a84:	f000 f962 	bl	8002d4c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002a88:	230f      	movs	r3, #15
 8002a8a:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002a8c:	2302      	movs	r3, #2
 8002a8e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002a90:	2300      	movs	r3, #0
 8002a92:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8002a94:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002a98:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002a9a:	2300      	movs	r3, #0
 8002a9c:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8002a9e:	1d3b      	adds	r3, r7, #4
 8002aa0:	2102      	movs	r1, #2
 8002aa2:	4618      	mov	r0, r3
 8002aa4:	f001 fdfc 	bl	80046a0 <HAL_RCC_ClockConfig>
 8002aa8:	4603      	mov	r3, r0
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	d001      	beq.n	8002ab2 <SystemClock_Config+0x82>
  {
    Error_Handler();
 8002aae:	f000 f94d 	bl	8002d4c <Error_Handler>
  }
}
 8002ab2:	bf00      	nop
 8002ab4:	3740      	adds	r7, #64	; 0x40
 8002ab6:	46bd      	mov	sp, r7
 8002ab8:	bd80      	pop	{r7, pc}
	...

08002abc <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8002abc:	b580      	push	{r7, lr}
 8002abe:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8002ac0:	4b12      	ldr	r3, [pc, #72]	; (8002b0c <MX_I2C1_Init+0x50>)
 8002ac2:	4a13      	ldr	r2, [pc, #76]	; (8002b10 <MX_I2C1_Init+0x54>)
 8002ac4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8002ac6:	4b11      	ldr	r3, [pc, #68]	; (8002b0c <MX_I2C1_Init+0x50>)
 8002ac8:	4a12      	ldr	r2, [pc, #72]	; (8002b14 <MX_I2C1_Init+0x58>)
 8002aca:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8002acc:	4b0f      	ldr	r3, [pc, #60]	; (8002b0c <MX_I2C1_Init+0x50>)
 8002ace:	2200      	movs	r2, #0
 8002ad0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8002ad2:	4b0e      	ldr	r3, [pc, #56]	; (8002b0c <MX_I2C1_Init+0x50>)
 8002ad4:	2200      	movs	r2, #0
 8002ad6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002ad8:	4b0c      	ldr	r3, [pc, #48]	; (8002b0c <MX_I2C1_Init+0x50>)
 8002ada:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002ade:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002ae0:	4b0a      	ldr	r3, [pc, #40]	; (8002b0c <MX_I2C1_Init+0x50>)
 8002ae2:	2200      	movs	r2, #0
 8002ae4:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8002ae6:	4b09      	ldr	r3, [pc, #36]	; (8002b0c <MX_I2C1_Init+0x50>)
 8002ae8:	2200      	movs	r2, #0
 8002aea:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002aec:	4b07      	ldr	r3, [pc, #28]	; (8002b0c <MX_I2C1_Init+0x50>)
 8002aee:	2200      	movs	r2, #0
 8002af0:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002af2:	4b06      	ldr	r3, [pc, #24]	; (8002b0c <MX_I2C1_Init+0x50>)
 8002af4:	2200      	movs	r2, #0
 8002af6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8002af8:	4804      	ldr	r0, [pc, #16]	; (8002b0c <MX_I2C1_Init+0x50>)
 8002afa:	f000 ff05 	bl	8003908 <HAL_I2C_Init>
 8002afe:	4603      	mov	r3, r0
 8002b00:	2b00      	cmp	r3, #0
 8002b02:	d001      	beq.n	8002b08 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8002b04:	f000 f922 	bl	8002d4c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8002b08:	bf00      	nop
 8002b0a:	bd80      	pop	{r7, pc}
 8002b0c:	20000114 	.word	0x20000114
 8002b10:	40005400 	.word	0x40005400
 8002b14:	000186a0 	.word	0x000186a0

08002b18 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8002b18:	b580      	push	{r7, lr}
 8002b1a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8002b1c:	4b17      	ldr	r3, [pc, #92]	; (8002b7c <MX_SPI2_Init+0x64>)
 8002b1e:	4a18      	ldr	r2, [pc, #96]	; (8002b80 <MX_SPI2_Init+0x68>)
 8002b20:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8002b22:	4b16      	ldr	r3, [pc, #88]	; (8002b7c <MX_SPI2_Init+0x64>)
 8002b24:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002b28:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8002b2a:	4b14      	ldr	r3, [pc, #80]	; (8002b7c <MX_SPI2_Init+0x64>)
 8002b2c:	2200      	movs	r2, #0
 8002b2e:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8002b30:	4b12      	ldr	r3, [pc, #72]	; (8002b7c <MX_SPI2_Init+0x64>)
 8002b32:	2200      	movs	r2, #0
 8002b34:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002b36:	4b11      	ldr	r3, [pc, #68]	; (8002b7c <MX_SPI2_Init+0x64>)
 8002b38:	2200      	movs	r2, #0
 8002b3a:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002b3c:	4b0f      	ldr	r3, [pc, #60]	; (8002b7c <MX_SPI2_Init+0x64>)
 8002b3e:	2200      	movs	r2, #0
 8002b40:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8002b42:	4b0e      	ldr	r3, [pc, #56]	; (8002b7c <MX_SPI2_Init+0x64>)
 8002b44:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002b48:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002b4a:	4b0c      	ldr	r3, [pc, #48]	; (8002b7c <MX_SPI2_Init+0x64>)
 8002b4c:	2200      	movs	r2, #0
 8002b4e:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002b50:	4b0a      	ldr	r3, [pc, #40]	; (8002b7c <MX_SPI2_Init+0x64>)
 8002b52:	2200      	movs	r2, #0
 8002b54:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8002b56:	4b09      	ldr	r3, [pc, #36]	; (8002b7c <MX_SPI2_Init+0x64>)
 8002b58:	2200      	movs	r2, #0
 8002b5a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002b5c:	4b07      	ldr	r3, [pc, #28]	; (8002b7c <MX_SPI2_Init+0x64>)
 8002b5e:	2200      	movs	r2, #0
 8002b60:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 8002b62:	4b06      	ldr	r3, [pc, #24]	; (8002b7c <MX_SPI2_Init+0x64>)
 8002b64:	220a      	movs	r2, #10
 8002b66:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8002b68:	4804      	ldr	r0, [pc, #16]	; (8002b7c <MX_SPI2_Init+0x64>)
 8002b6a:	f001 ff1d 	bl	80049a8 <HAL_SPI_Init>
 8002b6e:	4603      	mov	r3, r0
 8002b70:	2b00      	cmp	r3, #0
 8002b72:	d001      	beq.n	8002b78 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8002b74:	f000 f8ea 	bl	8002d4c <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8002b78:	bf00      	nop
 8002b7a:	bd80      	pop	{r7, pc}
 8002b7c:	20000168 	.word	0x20000168
 8002b80:	40003800 	.word	0x40003800

08002b84 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8002b84:	b580      	push	{r7, lr}
 8002b86:	b086      	sub	sp, #24
 8002b88:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002b8a:	f107 0308 	add.w	r3, r7, #8
 8002b8e:	2200      	movs	r2, #0
 8002b90:	601a      	str	r2, [r3, #0]
 8002b92:	605a      	str	r2, [r3, #4]
 8002b94:	609a      	str	r2, [r3, #8]
 8002b96:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002b98:	463b      	mov	r3, r7
 8002b9a:	2200      	movs	r2, #0
 8002b9c:	601a      	str	r2, [r3, #0]
 8002b9e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8002ba0:	4b1e      	ldr	r3, [pc, #120]	; (8002c1c <MX_TIM1_Init+0x98>)
 8002ba2:	4a1f      	ldr	r2, [pc, #124]	; (8002c20 <MX_TIM1_Init+0x9c>)
 8002ba4:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 71;
 8002ba6:	4b1d      	ldr	r3, [pc, #116]	; (8002c1c <MX_TIM1_Init+0x98>)
 8002ba8:	2247      	movs	r2, #71	; 0x47
 8002baa:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002bac:	4b1b      	ldr	r3, [pc, #108]	; (8002c1c <MX_TIM1_Init+0x98>)
 8002bae:	2200      	movs	r2, #0
 8002bb0:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8002bb2:	4b1a      	ldr	r3, [pc, #104]	; (8002c1c <MX_TIM1_Init+0x98>)
 8002bb4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002bb8:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002bba:	4b18      	ldr	r3, [pc, #96]	; (8002c1c <MX_TIM1_Init+0x98>)
 8002bbc:	2200      	movs	r2, #0
 8002bbe:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8002bc0:	4b16      	ldr	r3, [pc, #88]	; (8002c1c <MX_TIM1_Init+0x98>)
 8002bc2:	2200      	movs	r2, #0
 8002bc4:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002bc6:	4b15      	ldr	r3, [pc, #84]	; (8002c1c <MX_TIM1_Init+0x98>)
 8002bc8:	2200      	movs	r2, #0
 8002bca:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8002bcc:	4813      	ldr	r0, [pc, #76]	; (8002c1c <MX_TIM1_Init+0x98>)
 8002bce:	f002 f9b7 	bl	8004f40 <HAL_TIM_Base_Init>
 8002bd2:	4603      	mov	r3, r0
 8002bd4:	2b00      	cmp	r3, #0
 8002bd6:	d001      	beq.n	8002bdc <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 8002bd8:	f000 f8b8 	bl	8002d4c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002bdc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002be0:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8002be2:	f107 0308 	add.w	r3, r7, #8
 8002be6:	4619      	mov	r1, r3
 8002be8:	480c      	ldr	r0, [pc, #48]	; (8002c1c <MX_TIM1_Init+0x98>)
 8002bea:	f002 fa43 	bl	8005074 <HAL_TIM_ConfigClockSource>
 8002bee:	4603      	mov	r3, r0
 8002bf0:	2b00      	cmp	r3, #0
 8002bf2:	d001      	beq.n	8002bf8 <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 8002bf4:	f000 f8aa 	bl	8002d4c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002bf8:	2300      	movs	r3, #0
 8002bfa:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002bfc:	2300      	movs	r3, #0
 8002bfe:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8002c00:	463b      	mov	r3, r7
 8002c02:	4619      	mov	r1, r3
 8002c04:	4805      	ldr	r0, [pc, #20]	; (8002c1c <MX_TIM1_Init+0x98>)
 8002c06:	f002 fbf1 	bl	80053ec <HAL_TIMEx_MasterConfigSynchronization>
 8002c0a:	4603      	mov	r3, r0
 8002c0c:	2b00      	cmp	r3, #0
 8002c0e:	d001      	beq.n	8002c14 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8002c10:	f000 f89c 	bl	8002d4c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8002c14:	bf00      	nop
 8002c16:	3718      	adds	r7, #24
 8002c18:	46bd      	mov	sp, r7
 8002c1a:	bd80      	pop	{r7, pc}
 8002c1c:	200001c0 	.word	0x200001c0
 8002c20:	40012c00 	.word	0x40012c00

08002c24 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002c24:	b580      	push	{r7, lr}
 8002c26:	b088      	sub	sp, #32
 8002c28:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002c2a:	f107 0310 	add.w	r3, r7, #16
 8002c2e:	2200      	movs	r2, #0
 8002c30:	601a      	str	r2, [r3, #0]
 8002c32:	605a      	str	r2, [r3, #4]
 8002c34:	609a      	str	r2, [r3, #8]
 8002c36:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002c38:	4b40      	ldr	r3, [pc, #256]	; (8002d3c <MX_GPIO_Init+0x118>)
 8002c3a:	699b      	ldr	r3, [r3, #24]
 8002c3c:	4a3f      	ldr	r2, [pc, #252]	; (8002d3c <MX_GPIO_Init+0x118>)
 8002c3e:	f043 0320 	orr.w	r3, r3, #32
 8002c42:	6193      	str	r3, [r2, #24]
 8002c44:	4b3d      	ldr	r3, [pc, #244]	; (8002d3c <MX_GPIO_Init+0x118>)
 8002c46:	699b      	ldr	r3, [r3, #24]
 8002c48:	f003 0320 	and.w	r3, r3, #32
 8002c4c:	60fb      	str	r3, [r7, #12]
 8002c4e:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002c50:	4b3a      	ldr	r3, [pc, #232]	; (8002d3c <MX_GPIO_Init+0x118>)
 8002c52:	699b      	ldr	r3, [r3, #24]
 8002c54:	4a39      	ldr	r2, [pc, #228]	; (8002d3c <MX_GPIO_Init+0x118>)
 8002c56:	f043 0304 	orr.w	r3, r3, #4
 8002c5a:	6193      	str	r3, [r2, #24]
 8002c5c:	4b37      	ldr	r3, [pc, #220]	; (8002d3c <MX_GPIO_Init+0x118>)
 8002c5e:	699b      	ldr	r3, [r3, #24]
 8002c60:	f003 0304 	and.w	r3, r3, #4
 8002c64:	60bb      	str	r3, [r7, #8]
 8002c66:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002c68:	4b34      	ldr	r3, [pc, #208]	; (8002d3c <MX_GPIO_Init+0x118>)
 8002c6a:	699b      	ldr	r3, [r3, #24]
 8002c6c:	4a33      	ldr	r2, [pc, #204]	; (8002d3c <MX_GPIO_Init+0x118>)
 8002c6e:	f043 0308 	orr.w	r3, r3, #8
 8002c72:	6193      	str	r3, [r2, #24]
 8002c74:	4b31      	ldr	r3, [pc, #196]	; (8002d3c <MX_GPIO_Init+0x118>)
 8002c76:	699b      	ldr	r3, [r3, #24]
 8002c78:	f003 0308 	and.w	r3, r3, #8
 8002c7c:	607b      	str	r3, [r7, #4]
 8002c7e:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_RESET);
 8002c80:	2200      	movs	r2, #0
 8002c82:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002c86:	482e      	ldr	r0, [pc, #184]	; (8002d40 <MX_GPIO_Init+0x11c>)
 8002c88:	f000 fe03 	bl	8003892 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5, GPIO_PIN_RESET);
 8002c8c:	2200      	movs	r2, #0
 8002c8e:	2138      	movs	r1, #56	; 0x38
 8002c90:	482c      	ldr	r0, [pc, #176]	; (8002d44 <MX_GPIO_Init+0x120>)
 8002c92:	f000 fdfe 	bl	8003892 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PA0 PA1 PA2 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2;
 8002c96:	2307      	movs	r3, #7
 8002c98:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8002c9a:	4b2b      	ldr	r3, [pc, #172]	; (8002d48 <MX_GPIO_Init+0x124>)
 8002c9c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002c9e:	2301      	movs	r3, #1
 8002ca0:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002ca2:	f107 0310 	add.w	r3, r7, #16
 8002ca6:	4619      	mov	r1, r3
 8002ca8:	4825      	ldr	r0, [pc, #148]	; (8002d40 <MX_GPIO_Init+0x11c>)
 8002caa:	f000 fc57 	bl	800355c <HAL_GPIO_Init>

  /*Configure GPIO pin : PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8002cae:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002cb2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002cb4:	2301      	movs	r3, #1
 8002cb6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002cb8:	2300      	movs	r3, #0
 8002cba:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002cbc:	2302      	movs	r3, #2
 8002cbe:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002cc0:	f107 0310 	add.w	r3, r7, #16
 8002cc4:	4619      	mov	r1, r3
 8002cc6:	481e      	ldr	r0, [pc, #120]	; (8002d40 <MX_GPIO_Init+0x11c>)
 8002cc8:	f000 fc48 	bl	800355c <HAL_GPIO_Init>

  /*Configure GPIO pins : PB3 PB4 PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 8002ccc:	2338      	movs	r3, #56	; 0x38
 8002cce:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002cd0:	2301      	movs	r3, #1
 8002cd2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002cd4:	2300      	movs	r3, #0
 8002cd6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002cd8:	2302      	movs	r3, #2
 8002cda:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002cdc:	f107 0310 	add.w	r3, r7, #16
 8002ce0:	4619      	mov	r1, r3
 8002ce2:	4818      	ldr	r0, [pc, #96]	; (8002d44 <MX_GPIO_Init+0x120>)
 8002ce4:	f000 fc3a 	bl	800355c <HAL_GPIO_Init>

  /*Configure GPIO pin : PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 8002ce8:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002cec:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002cee:	2300      	movs	r3, #0
 8002cf0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002cf2:	2300      	movs	r3, #0
 8002cf4:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002cf6:	f107 0310 	add.w	r3, r7, #16
 8002cfa:	4619      	mov	r1, r3
 8002cfc:	4811      	ldr	r0, [pc, #68]	; (8002d44 <MX_GPIO_Init+0x120>)
 8002cfe:	f000 fc2d 	bl	800355c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8002d02:	2200      	movs	r2, #0
 8002d04:	2100      	movs	r1, #0
 8002d06:	2006      	movs	r0, #6
 8002d08:	f000 fbf1 	bl	80034ee <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8002d0c:	2006      	movs	r0, #6
 8002d0e:	f000 fc0a 	bl	8003526 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 8002d12:	2200      	movs	r2, #0
 8002d14:	2100      	movs	r1, #0
 8002d16:	2007      	movs	r0, #7
 8002d18:	f000 fbe9 	bl	80034ee <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8002d1c:	2007      	movs	r0, #7
 8002d1e:	f000 fc02 	bl	8003526 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI2_IRQn, 0, 0);
 8002d22:	2200      	movs	r2, #0
 8002d24:	2100      	movs	r1, #0
 8002d26:	2008      	movs	r0, #8
 8002d28:	f000 fbe1 	bl	80034ee <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 8002d2c:	2008      	movs	r0, #8
 8002d2e:	f000 fbfa 	bl	8003526 <HAL_NVIC_EnableIRQ>

}
 8002d32:	bf00      	nop
 8002d34:	3720      	adds	r7, #32
 8002d36:	46bd      	mov	sp, r7
 8002d38:	bd80      	pop	{r7, pc}
 8002d3a:	bf00      	nop
 8002d3c:	40021000 	.word	0x40021000
 8002d40:	40010800 	.word	0x40010800
 8002d44:	40010c00 	.word	0x40010c00
 8002d48:	10210000 	.word	0x10210000

08002d4c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002d4c:	b480      	push	{r7}
 8002d4e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002d50:	b672      	cpsid	i
}
 8002d52:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002d54:	e7fe      	b.n	8002d54 <Error_Handler+0x8>
	...

08002d58 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002d58:	b480      	push	{r7}
 8002d5a:	b085      	sub	sp, #20
 8002d5c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8002d5e:	4b15      	ldr	r3, [pc, #84]	; (8002db4 <HAL_MspInit+0x5c>)
 8002d60:	699b      	ldr	r3, [r3, #24]
 8002d62:	4a14      	ldr	r2, [pc, #80]	; (8002db4 <HAL_MspInit+0x5c>)
 8002d64:	f043 0301 	orr.w	r3, r3, #1
 8002d68:	6193      	str	r3, [r2, #24]
 8002d6a:	4b12      	ldr	r3, [pc, #72]	; (8002db4 <HAL_MspInit+0x5c>)
 8002d6c:	699b      	ldr	r3, [r3, #24]
 8002d6e:	f003 0301 	and.w	r3, r3, #1
 8002d72:	60bb      	str	r3, [r7, #8]
 8002d74:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002d76:	4b0f      	ldr	r3, [pc, #60]	; (8002db4 <HAL_MspInit+0x5c>)
 8002d78:	69db      	ldr	r3, [r3, #28]
 8002d7a:	4a0e      	ldr	r2, [pc, #56]	; (8002db4 <HAL_MspInit+0x5c>)
 8002d7c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002d80:	61d3      	str	r3, [r2, #28]
 8002d82:	4b0c      	ldr	r3, [pc, #48]	; (8002db4 <HAL_MspInit+0x5c>)
 8002d84:	69db      	ldr	r3, [r3, #28]
 8002d86:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d8a:	607b      	str	r3, [r7, #4]
 8002d8c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8002d8e:	4b0a      	ldr	r3, [pc, #40]	; (8002db8 <HAL_MspInit+0x60>)
 8002d90:	685b      	ldr	r3, [r3, #4]
 8002d92:	60fb      	str	r3, [r7, #12]
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8002d9a:	60fb      	str	r3, [r7, #12]
 8002d9c:	68fb      	ldr	r3, [r7, #12]
 8002d9e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002da2:	60fb      	str	r3, [r7, #12]
 8002da4:	4a04      	ldr	r2, [pc, #16]	; (8002db8 <HAL_MspInit+0x60>)
 8002da6:	68fb      	ldr	r3, [r7, #12]
 8002da8:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002daa:	bf00      	nop
 8002dac:	3714      	adds	r7, #20
 8002dae:	46bd      	mov	sp, r7
 8002db0:	bc80      	pop	{r7}
 8002db2:	4770      	bx	lr
 8002db4:	40021000 	.word	0x40021000
 8002db8:	40010000 	.word	0x40010000

08002dbc <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002dbc:	b580      	push	{r7, lr}
 8002dbe:	b088      	sub	sp, #32
 8002dc0:	af00      	add	r7, sp, #0
 8002dc2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002dc4:	f107 0310 	add.w	r3, r7, #16
 8002dc8:	2200      	movs	r2, #0
 8002dca:	601a      	str	r2, [r3, #0]
 8002dcc:	605a      	str	r2, [r3, #4]
 8002dce:	609a      	str	r2, [r3, #8]
 8002dd0:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	4a15      	ldr	r2, [pc, #84]	; (8002e2c <HAL_I2C_MspInit+0x70>)
 8002dd8:	4293      	cmp	r3, r2
 8002dda:	d123      	bne.n	8002e24 <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002ddc:	4b14      	ldr	r3, [pc, #80]	; (8002e30 <HAL_I2C_MspInit+0x74>)
 8002dde:	699b      	ldr	r3, [r3, #24]
 8002de0:	4a13      	ldr	r2, [pc, #76]	; (8002e30 <HAL_I2C_MspInit+0x74>)
 8002de2:	f043 0308 	orr.w	r3, r3, #8
 8002de6:	6193      	str	r3, [r2, #24]
 8002de8:	4b11      	ldr	r3, [pc, #68]	; (8002e30 <HAL_I2C_MspInit+0x74>)
 8002dea:	699b      	ldr	r3, [r3, #24]
 8002dec:	f003 0308 	and.w	r3, r3, #8
 8002df0:	60fb      	str	r3, [r7, #12]
 8002df2:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002df4:	23c0      	movs	r3, #192	; 0xc0
 8002df6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002df8:	2312      	movs	r3, #18
 8002dfa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002dfc:	2303      	movs	r3, #3
 8002dfe:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002e00:	f107 0310 	add.w	r3, r7, #16
 8002e04:	4619      	mov	r1, r3
 8002e06:	480b      	ldr	r0, [pc, #44]	; (8002e34 <HAL_I2C_MspInit+0x78>)
 8002e08:	f000 fba8 	bl	800355c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002e0c:	4b08      	ldr	r3, [pc, #32]	; (8002e30 <HAL_I2C_MspInit+0x74>)
 8002e0e:	69db      	ldr	r3, [r3, #28]
 8002e10:	4a07      	ldr	r2, [pc, #28]	; (8002e30 <HAL_I2C_MspInit+0x74>)
 8002e12:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002e16:	61d3      	str	r3, [r2, #28]
 8002e18:	4b05      	ldr	r3, [pc, #20]	; (8002e30 <HAL_I2C_MspInit+0x74>)
 8002e1a:	69db      	ldr	r3, [r3, #28]
 8002e1c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002e20:	60bb      	str	r3, [r7, #8]
 8002e22:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8002e24:	bf00      	nop
 8002e26:	3720      	adds	r7, #32
 8002e28:	46bd      	mov	sp, r7
 8002e2a:	bd80      	pop	{r7, pc}
 8002e2c:	40005400 	.word	0x40005400
 8002e30:	40021000 	.word	0x40021000
 8002e34:	40010c00 	.word	0x40010c00

08002e38 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002e38:	b580      	push	{r7, lr}
 8002e3a:	b088      	sub	sp, #32
 8002e3c:	af00      	add	r7, sp, #0
 8002e3e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002e40:	f107 0310 	add.w	r3, r7, #16
 8002e44:	2200      	movs	r2, #0
 8002e46:	601a      	str	r2, [r3, #0]
 8002e48:	605a      	str	r2, [r3, #4]
 8002e4a:	609a      	str	r2, [r3, #8]
 8002e4c:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI2)
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	4a1c      	ldr	r2, [pc, #112]	; (8002ec4 <HAL_SPI_MspInit+0x8c>)
 8002e54:	4293      	cmp	r3, r2
 8002e56:	d131      	bne.n	8002ebc <HAL_SPI_MspInit+0x84>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8002e58:	4b1b      	ldr	r3, [pc, #108]	; (8002ec8 <HAL_SPI_MspInit+0x90>)
 8002e5a:	69db      	ldr	r3, [r3, #28]
 8002e5c:	4a1a      	ldr	r2, [pc, #104]	; (8002ec8 <HAL_SPI_MspInit+0x90>)
 8002e5e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002e62:	61d3      	str	r3, [r2, #28]
 8002e64:	4b18      	ldr	r3, [pc, #96]	; (8002ec8 <HAL_SPI_MspInit+0x90>)
 8002e66:	69db      	ldr	r3, [r3, #28]
 8002e68:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002e6c:	60fb      	str	r3, [r7, #12]
 8002e6e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002e70:	4b15      	ldr	r3, [pc, #84]	; (8002ec8 <HAL_SPI_MspInit+0x90>)
 8002e72:	699b      	ldr	r3, [r3, #24]
 8002e74:	4a14      	ldr	r2, [pc, #80]	; (8002ec8 <HAL_SPI_MspInit+0x90>)
 8002e76:	f043 0308 	orr.w	r3, r3, #8
 8002e7a:	6193      	str	r3, [r2, #24]
 8002e7c:	4b12      	ldr	r3, [pc, #72]	; (8002ec8 <HAL_SPI_MspInit+0x90>)
 8002e7e:	699b      	ldr	r3, [r3, #24]
 8002e80:	f003 0308 	and.w	r3, r3, #8
 8002e84:	60bb      	str	r3, [r7, #8]
 8002e86:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_15;
 8002e88:	f44f 4320 	mov.w	r3, #40960	; 0xa000
 8002e8c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e8e:	2302      	movs	r3, #2
 8002e90:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002e92:	2303      	movs	r3, #3
 8002e94:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002e96:	f107 0310 	add.w	r3, r7, #16
 8002e9a:	4619      	mov	r1, r3
 8002e9c:	480b      	ldr	r0, [pc, #44]	; (8002ecc <HAL_SPI_MspInit+0x94>)
 8002e9e:	f000 fb5d 	bl	800355c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_14;
 8002ea2:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002ea6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002ea8:	2300      	movs	r3, #0
 8002eaa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002eac:	2300      	movs	r3, #0
 8002eae:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002eb0:	f107 0310 	add.w	r3, r7, #16
 8002eb4:	4619      	mov	r1, r3
 8002eb6:	4805      	ldr	r0, [pc, #20]	; (8002ecc <HAL_SPI_MspInit+0x94>)
 8002eb8:	f000 fb50 	bl	800355c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8002ebc:	bf00      	nop
 8002ebe:	3720      	adds	r7, #32
 8002ec0:	46bd      	mov	sp, r7
 8002ec2:	bd80      	pop	{r7, pc}
 8002ec4:	40003800 	.word	0x40003800
 8002ec8:	40021000 	.word	0x40021000
 8002ecc:	40010c00 	.word	0x40010c00

08002ed0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002ed0:	b480      	push	{r7}
 8002ed2:	b085      	sub	sp, #20
 8002ed4:	af00      	add	r7, sp, #0
 8002ed6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	4a09      	ldr	r2, [pc, #36]	; (8002f04 <HAL_TIM_Base_MspInit+0x34>)
 8002ede:	4293      	cmp	r3, r2
 8002ee0:	d10b      	bne.n	8002efa <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002ee2:	4b09      	ldr	r3, [pc, #36]	; (8002f08 <HAL_TIM_Base_MspInit+0x38>)
 8002ee4:	699b      	ldr	r3, [r3, #24]
 8002ee6:	4a08      	ldr	r2, [pc, #32]	; (8002f08 <HAL_TIM_Base_MspInit+0x38>)
 8002ee8:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002eec:	6193      	str	r3, [r2, #24]
 8002eee:	4b06      	ldr	r3, [pc, #24]	; (8002f08 <HAL_TIM_Base_MspInit+0x38>)
 8002ef0:	699b      	ldr	r3, [r3, #24]
 8002ef2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002ef6:	60fb      	str	r3, [r7, #12]
 8002ef8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8002efa:	bf00      	nop
 8002efc:	3714      	adds	r7, #20
 8002efe:	46bd      	mov	sp, r7
 8002f00:	bc80      	pop	{r7}
 8002f02:	4770      	bx	lr
 8002f04:	40012c00 	.word	0x40012c00
 8002f08:	40021000 	.word	0x40021000

08002f0c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002f0c:	b480      	push	{r7}
 8002f0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002f10:	e7fe      	b.n	8002f10 <NMI_Handler+0x4>

08002f12 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002f12:	b480      	push	{r7}
 8002f14:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002f16:	e7fe      	b.n	8002f16 <HardFault_Handler+0x4>

08002f18 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002f18:	b480      	push	{r7}
 8002f1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002f1c:	e7fe      	b.n	8002f1c <MemManage_Handler+0x4>

08002f1e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002f1e:	b480      	push	{r7}
 8002f20:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002f22:	e7fe      	b.n	8002f22 <BusFault_Handler+0x4>

08002f24 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002f24:	b480      	push	{r7}
 8002f26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002f28:	e7fe      	b.n	8002f28 <UsageFault_Handler+0x4>

08002f2a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002f2a:	b480      	push	{r7}
 8002f2c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002f2e:	bf00      	nop
 8002f30:	46bd      	mov	sp, r7
 8002f32:	bc80      	pop	{r7}
 8002f34:	4770      	bx	lr

08002f36 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002f36:	b480      	push	{r7}
 8002f38:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002f3a:	bf00      	nop
 8002f3c:	46bd      	mov	sp, r7
 8002f3e:	bc80      	pop	{r7}
 8002f40:	4770      	bx	lr

08002f42 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002f42:	b480      	push	{r7}
 8002f44:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002f46:	bf00      	nop
 8002f48:	46bd      	mov	sp, r7
 8002f4a:	bc80      	pop	{r7}
 8002f4c:	4770      	bx	lr

08002f4e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002f4e:	b580      	push	{r7, lr}
 8002f50:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002f52:	f000 f9b5 	bl	80032c0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002f56:	bf00      	nop
 8002f58:	bd80      	pop	{r7, pc}
	...

08002f5c <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8002f5c:	b580      	push	{r7, lr}
 8002f5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8002f60:	2001      	movs	r0, #1
 8002f62:	f000 fcaf 	bl	80038c4 <HAL_GPIO_EXTI_IRQHandler>

  currentMillis = HAL_GetTick();
 8002f66:	f000 f9bd 	bl	80032e4 <HAL_GetTick>
 8002f6a:	4603      	mov	r3, r0
 8002f6c:	4a0b      	ldr	r2, [pc, #44]	; (8002f9c <EXTI0_IRQHandler+0x40>)
 8002f6e:	6013      	str	r3, [r2, #0]
    if ((currentMillis - previousMillis > 100))
 8002f70:	4b0a      	ldr	r3, [pc, #40]	; (8002f9c <EXTI0_IRQHandler+0x40>)
 8002f72:	681a      	ldr	r2, [r3, #0]
 8002f74:	4b0a      	ldr	r3, [pc, #40]	; (8002fa0 <EXTI0_IRQHandler+0x44>)
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	1ad3      	subs	r3, r2, r3
 8002f7a:	2b64      	cmp	r3, #100	; 0x64
 8002f7c:	d90b      	bls.n	8002f96 <EXTI0_IRQHandler+0x3a>
    {
    	count++;
 8002f7e:	4b09      	ldr	r3, [pc, #36]	; (8002fa4 <EXTI0_IRQHandler+0x48>)
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	3301      	adds	r3, #1
 8002f84:	4a07      	ldr	r2, [pc, #28]	; (8002fa4 <EXTI0_IRQHandler+0x48>)
 8002f86:	6013      	str	r3, [r2, #0]
    	menu_button=1;
 8002f88:	4b07      	ldr	r3, [pc, #28]	; (8002fa8 <EXTI0_IRQHandler+0x4c>)
 8002f8a:	2201      	movs	r2, #1
 8002f8c:	601a      	str	r2, [r3, #0]
    	previousMillis = currentMillis;
 8002f8e:	4b03      	ldr	r3, [pc, #12]	; (8002f9c <EXTI0_IRQHandler+0x40>)
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	4a03      	ldr	r2, [pc, #12]	; (8002fa0 <EXTI0_IRQHandler+0x44>)
 8002f94:	6013      	str	r3, [r2, #0]
    }
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8002f96:	bf00      	nop
 8002f98:	bd80      	pop	{r7, pc}
 8002f9a:	bf00      	nop
 8002f9c:	2000020c 	.word	0x2000020c
 8002fa0:	20000208 	.word	0x20000208
 8002fa4:	200000f0 	.word	0x200000f0
 8002fa8:	20000100 	.word	0x20000100

08002fac <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8002fac:	b580      	push	{r7, lr}
 8002fae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 8002fb0:	2002      	movs	r0, #2
 8002fb2:	f000 fc87 	bl	80038c4 <HAL_GPIO_EXTI_IRQHandler>
  currentMillis = HAL_GetTick();
 8002fb6:	f000 f995 	bl	80032e4 <HAL_GetTick>
 8002fba:	4603      	mov	r3, r0
 8002fbc:	4a0c      	ldr	r2, [pc, #48]	; (8002ff0 <EXTI1_IRQHandler+0x44>)
 8002fbe:	6013      	str	r3, [r2, #0]
  if (menu_button==1 && count>0 && (currentMillis - previousMillis > 100))
 8002fc0:	4b0c      	ldr	r3, [pc, #48]	; (8002ff4 <EXTI1_IRQHandler+0x48>)
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	2b01      	cmp	r3, #1
 8002fc6:	d111      	bne.n	8002fec <EXTI1_IRQHandler+0x40>
 8002fc8:	4b0b      	ldr	r3, [pc, #44]	; (8002ff8 <EXTI1_IRQHandler+0x4c>)
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	2b00      	cmp	r3, #0
 8002fce:	dd0d      	ble.n	8002fec <EXTI1_IRQHandler+0x40>
 8002fd0:	4b07      	ldr	r3, [pc, #28]	; (8002ff0 <EXTI1_IRQHandler+0x44>)
 8002fd2:	681a      	ldr	r2, [r3, #0]
 8002fd4:	4b09      	ldr	r3, [pc, #36]	; (8002ffc <EXTI1_IRQHandler+0x50>)
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	1ad3      	subs	r3, r2, r3
 8002fda:	2b64      	cmp	r3, #100	; 0x64
 8002fdc:	d906      	bls.n	8002fec <EXTI1_IRQHandler+0x40>
  {
	  pos_button=1;
 8002fde:	4b08      	ldr	r3, [pc, #32]	; (8003000 <EXTI1_IRQHandler+0x54>)
 8002fe0:	2201      	movs	r2, #1
 8002fe2:	601a      	str	r2, [r3, #0]
	  previousMillis = currentMillis;
 8002fe4:	4b02      	ldr	r3, [pc, #8]	; (8002ff0 <EXTI1_IRQHandler+0x44>)
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	4a04      	ldr	r2, [pc, #16]	; (8002ffc <EXTI1_IRQHandler+0x50>)
 8002fea:	6013      	str	r3, [r2, #0]
  }
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8002fec:	bf00      	nop
 8002fee:	bd80      	pop	{r7, pc}
 8002ff0:	2000020c 	.word	0x2000020c
 8002ff4:	20000100 	.word	0x20000100
 8002ff8:	200000f0 	.word	0x200000f0
 8002ffc:	20000208 	.word	0x20000208
 8003000:	200000f8 	.word	0x200000f8

08003004 <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 8003004:	b580      	push	{r7, lr}
 8003006:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_2);
 8003008:	2004      	movs	r0, #4
 800300a:	f000 fc5b 	bl	80038c4 <HAL_GPIO_EXTI_IRQHandler>
  currentMillis = HAL_GetTick();
 800300e:	f000 f969 	bl	80032e4 <HAL_GetTick>
 8003012:	4603      	mov	r3, r0
 8003014:	4a0c      	ldr	r2, [pc, #48]	; (8003048 <EXTI2_IRQHandler+0x44>)
 8003016:	6013      	str	r3, [r2, #0]
  if (menu_button==1 && count>0 && (currentMillis - previousMillis > 100))
 8003018:	4b0c      	ldr	r3, [pc, #48]	; (800304c <EXTI2_IRQHandler+0x48>)
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	2b01      	cmp	r3, #1
 800301e:	d111      	bne.n	8003044 <EXTI2_IRQHandler+0x40>
 8003020:	4b0b      	ldr	r3, [pc, #44]	; (8003050 <EXTI2_IRQHandler+0x4c>)
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	2b00      	cmp	r3, #0
 8003026:	dd0d      	ble.n	8003044 <EXTI2_IRQHandler+0x40>
 8003028:	4b07      	ldr	r3, [pc, #28]	; (8003048 <EXTI2_IRQHandler+0x44>)
 800302a:	681a      	ldr	r2, [r3, #0]
 800302c:	4b09      	ldr	r3, [pc, #36]	; (8003054 <EXTI2_IRQHandler+0x50>)
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	1ad3      	subs	r3, r2, r3
 8003032:	2b64      	cmp	r3, #100	; 0x64
 8003034:	d906      	bls.n	8003044 <EXTI2_IRQHandler+0x40>
  {
	  neg_button=1;
 8003036:	4b08      	ldr	r3, [pc, #32]	; (8003058 <EXTI2_IRQHandler+0x54>)
 8003038:	2201      	movs	r2, #1
 800303a:	601a      	str	r2, [r3, #0]
	  previousMillis = currentMillis;
 800303c:	4b02      	ldr	r3, [pc, #8]	; (8003048 <EXTI2_IRQHandler+0x44>)
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	4a04      	ldr	r2, [pc, #16]	; (8003054 <EXTI2_IRQHandler+0x50>)
 8003042:	6013      	str	r3, [r2, #0]
  }
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 8003044:	bf00      	nop
 8003046:	bd80      	pop	{r7, pc}
 8003048:	2000020c 	.word	0x2000020c
 800304c:	20000100 	.word	0x20000100
 8003050:	200000f0 	.word	0x200000f0
 8003054:	20000208 	.word	0x20000208
 8003058:	200000fc 	.word	0x200000fc

0800305c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800305c:	b480      	push	{r7}
 800305e:	af00      	add	r7, sp, #0
  return 1;
 8003060:	2301      	movs	r3, #1
}
 8003062:	4618      	mov	r0, r3
 8003064:	46bd      	mov	sp, r7
 8003066:	bc80      	pop	{r7}
 8003068:	4770      	bx	lr

0800306a <_kill>:

int _kill(int pid, int sig)
{
 800306a:	b580      	push	{r7, lr}
 800306c:	b082      	sub	sp, #8
 800306e:	af00      	add	r7, sp, #0
 8003070:	6078      	str	r0, [r7, #4]
 8003072:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8003074:	f002 fa3c 	bl	80054f0 <__errno>
 8003078:	4603      	mov	r3, r0
 800307a:	2216      	movs	r2, #22
 800307c:	601a      	str	r2, [r3, #0]
  return -1;
 800307e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003082:	4618      	mov	r0, r3
 8003084:	3708      	adds	r7, #8
 8003086:	46bd      	mov	sp, r7
 8003088:	bd80      	pop	{r7, pc}

0800308a <_exit>:

void _exit (int status)
{
 800308a:	b580      	push	{r7, lr}
 800308c:	b082      	sub	sp, #8
 800308e:	af00      	add	r7, sp, #0
 8003090:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8003092:	f04f 31ff 	mov.w	r1, #4294967295
 8003096:	6878      	ldr	r0, [r7, #4]
 8003098:	f7ff ffe7 	bl	800306a <_kill>
  while (1) {}    /* Make sure we hang here */
 800309c:	e7fe      	b.n	800309c <_exit+0x12>

0800309e <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800309e:	b580      	push	{r7, lr}
 80030a0:	b086      	sub	sp, #24
 80030a2:	af00      	add	r7, sp, #0
 80030a4:	60f8      	str	r0, [r7, #12]
 80030a6:	60b9      	str	r1, [r7, #8]
 80030a8:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80030aa:	2300      	movs	r3, #0
 80030ac:	617b      	str	r3, [r7, #20]
 80030ae:	e00a      	b.n	80030c6 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80030b0:	f3af 8000 	nop.w
 80030b4:	4601      	mov	r1, r0
 80030b6:	68bb      	ldr	r3, [r7, #8]
 80030b8:	1c5a      	adds	r2, r3, #1
 80030ba:	60ba      	str	r2, [r7, #8]
 80030bc:	b2ca      	uxtb	r2, r1
 80030be:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80030c0:	697b      	ldr	r3, [r7, #20]
 80030c2:	3301      	adds	r3, #1
 80030c4:	617b      	str	r3, [r7, #20]
 80030c6:	697a      	ldr	r2, [r7, #20]
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	429a      	cmp	r2, r3
 80030cc:	dbf0      	blt.n	80030b0 <_read+0x12>
  }

  return len;
 80030ce:	687b      	ldr	r3, [r7, #4]
}
 80030d0:	4618      	mov	r0, r3
 80030d2:	3718      	adds	r7, #24
 80030d4:	46bd      	mov	sp, r7
 80030d6:	bd80      	pop	{r7, pc}

080030d8 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80030d8:	b580      	push	{r7, lr}
 80030da:	b086      	sub	sp, #24
 80030dc:	af00      	add	r7, sp, #0
 80030de:	60f8      	str	r0, [r7, #12]
 80030e0:	60b9      	str	r1, [r7, #8]
 80030e2:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80030e4:	2300      	movs	r3, #0
 80030e6:	617b      	str	r3, [r7, #20]
 80030e8:	e009      	b.n	80030fe <_write+0x26>
  {
    __io_putchar(*ptr++);
 80030ea:	68bb      	ldr	r3, [r7, #8]
 80030ec:	1c5a      	adds	r2, r3, #1
 80030ee:	60ba      	str	r2, [r7, #8]
 80030f0:	781b      	ldrb	r3, [r3, #0]
 80030f2:	4618      	mov	r0, r3
 80030f4:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80030f8:	697b      	ldr	r3, [r7, #20]
 80030fa:	3301      	adds	r3, #1
 80030fc:	617b      	str	r3, [r7, #20]
 80030fe:	697a      	ldr	r2, [r7, #20]
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	429a      	cmp	r2, r3
 8003104:	dbf1      	blt.n	80030ea <_write+0x12>
  }
  return len;
 8003106:	687b      	ldr	r3, [r7, #4]
}
 8003108:	4618      	mov	r0, r3
 800310a:	3718      	adds	r7, #24
 800310c:	46bd      	mov	sp, r7
 800310e:	bd80      	pop	{r7, pc}

08003110 <_close>:

int _close(int file)
{
 8003110:	b480      	push	{r7}
 8003112:	b083      	sub	sp, #12
 8003114:	af00      	add	r7, sp, #0
 8003116:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8003118:	f04f 33ff 	mov.w	r3, #4294967295
}
 800311c:	4618      	mov	r0, r3
 800311e:	370c      	adds	r7, #12
 8003120:	46bd      	mov	sp, r7
 8003122:	bc80      	pop	{r7}
 8003124:	4770      	bx	lr

08003126 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8003126:	b480      	push	{r7}
 8003128:	b083      	sub	sp, #12
 800312a:	af00      	add	r7, sp, #0
 800312c:	6078      	str	r0, [r7, #4]
 800312e:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8003130:	683b      	ldr	r3, [r7, #0]
 8003132:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003136:	605a      	str	r2, [r3, #4]
  return 0;
 8003138:	2300      	movs	r3, #0
}
 800313a:	4618      	mov	r0, r3
 800313c:	370c      	adds	r7, #12
 800313e:	46bd      	mov	sp, r7
 8003140:	bc80      	pop	{r7}
 8003142:	4770      	bx	lr

08003144 <_isatty>:

int _isatty(int file)
{
 8003144:	b480      	push	{r7}
 8003146:	b083      	sub	sp, #12
 8003148:	af00      	add	r7, sp, #0
 800314a:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800314c:	2301      	movs	r3, #1
}
 800314e:	4618      	mov	r0, r3
 8003150:	370c      	adds	r7, #12
 8003152:	46bd      	mov	sp, r7
 8003154:	bc80      	pop	{r7}
 8003156:	4770      	bx	lr

08003158 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003158:	b480      	push	{r7}
 800315a:	b085      	sub	sp, #20
 800315c:	af00      	add	r7, sp, #0
 800315e:	60f8      	str	r0, [r7, #12]
 8003160:	60b9      	str	r1, [r7, #8]
 8003162:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8003164:	2300      	movs	r3, #0
}
 8003166:	4618      	mov	r0, r3
 8003168:	3714      	adds	r7, #20
 800316a:	46bd      	mov	sp, r7
 800316c:	bc80      	pop	{r7}
 800316e:	4770      	bx	lr

08003170 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003170:	b580      	push	{r7, lr}
 8003172:	b086      	sub	sp, #24
 8003174:	af00      	add	r7, sp, #0
 8003176:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003178:	4a14      	ldr	r2, [pc, #80]	; (80031cc <_sbrk+0x5c>)
 800317a:	4b15      	ldr	r3, [pc, #84]	; (80031d0 <_sbrk+0x60>)
 800317c:	1ad3      	subs	r3, r2, r3
 800317e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003180:	697b      	ldr	r3, [r7, #20]
 8003182:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003184:	4b13      	ldr	r3, [pc, #76]	; (80031d4 <_sbrk+0x64>)
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	2b00      	cmp	r3, #0
 800318a:	d102      	bne.n	8003192 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800318c:	4b11      	ldr	r3, [pc, #68]	; (80031d4 <_sbrk+0x64>)
 800318e:	4a12      	ldr	r2, [pc, #72]	; (80031d8 <_sbrk+0x68>)
 8003190:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003192:	4b10      	ldr	r3, [pc, #64]	; (80031d4 <_sbrk+0x64>)
 8003194:	681a      	ldr	r2, [r3, #0]
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	4413      	add	r3, r2
 800319a:	693a      	ldr	r2, [r7, #16]
 800319c:	429a      	cmp	r2, r3
 800319e:	d207      	bcs.n	80031b0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80031a0:	f002 f9a6 	bl	80054f0 <__errno>
 80031a4:	4603      	mov	r3, r0
 80031a6:	220c      	movs	r2, #12
 80031a8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80031aa:	f04f 33ff 	mov.w	r3, #4294967295
 80031ae:	e009      	b.n	80031c4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80031b0:	4b08      	ldr	r3, [pc, #32]	; (80031d4 <_sbrk+0x64>)
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80031b6:	4b07      	ldr	r3, [pc, #28]	; (80031d4 <_sbrk+0x64>)
 80031b8:	681a      	ldr	r2, [r3, #0]
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	4413      	add	r3, r2
 80031be:	4a05      	ldr	r2, [pc, #20]	; (80031d4 <_sbrk+0x64>)
 80031c0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80031c2:	68fb      	ldr	r3, [r7, #12]
}
 80031c4:	4618      	mov	r0, r3
 80031c6:	3718      	adds	r7, #24
 80031c8:	46bd      	mov	sp, r7
 80031ca:	bd80      	pop	{r7, pc}
 80031cc:	20005000 	.word	0x20005000
 80031d0:	00000400 	.word	0x00000400
 80031d4:	20000210 	.word	0x20000210
 80031d8:	20000228 	.word	0x20000228

080031dc <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80031dc:	b480      	push	{r7}
 80031de:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80031e0:	bf00      	nop
 80031e2:	46bd      	mov	sp, r7
 80031e4:	bc80      	pop	{r7}
 80031e6:	4770      	bx	lr

080031e8 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80031e8:	480c      	ldr	r0, [pc, #48]	; (800321c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80031ea:	490d      	ldr	r1, [pc, #52]	; (8003220 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80031ec:	4a0d      	ldr	r2, [pc, #52]	; (8003224 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80031ee:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80031f0:	e002      	b.n	80031f8 <LoopCopyDataInit>

080031f2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80031f2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80031f4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80031f6:	3304      	adds	r3, #4

080031f8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80031f8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80031fa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80031fc:	d3f9      	bcc.n	80031f2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80031fe:	4a0a      	ldr	r2, [pc, #40]	; (8003228 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8003200:	4c0a      	ldr	r4, [pc, #40]	; (800322c <LoopFillZerobss+0x22>)
  movs r3, #0
 8003202:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003204:	e001      	b.n	800320a <LoopFillZerobss>

08003206 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003206:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003208:	3204      	adds	r2, #4

0800320a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800320a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800320c:	d3fb      	bcc.n	8003206 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800320e:	f7ff ffe5 	bl	80031dc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003212:	f002 f973 	bl	80054fc <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8003216:	f7ff fb13 	bl	8002840 <main>
  bx lr
 800321a:	4770      	bx	lr
  ldr r0, =_sdata
 800321c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003220:	20000090 	.word	0x20000090
  ldr r2, =_sidata
 8003224:	08009178 	.word	0x08009178
  ldr r2, =_sbss
 8003228:	20000090 	.word	0x20000090
  ldr r4, =_ebss
 800322c:	20000228 	.word	0x20000228

08003230 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8003230:	e7fe      	b.n	8003230 <ADC1_2_IRQHandler>
	...

08003234 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003234:	b580      	push	{r7, lr}
 8003236:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003238:	4b08      	ldr	r3, [pc, #32]	; (800325c <HAL_Init+0x28>)
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	4a07      	ldr	r2, [pc, #28]	; (800325c <HAL_Init+0x28>)
 800323e:	f043 0310 	orr.w	r3, r3, #16
 8003242:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003244:	2003      	movs	r0, #3
 8003246:	f000 f947 	bl	80034d8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800324a:	200f      	movs	r0, #15
 800324c:	f000 f808 	bl	8003260 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003250:	f7ff fd82 	bl	8002d58 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003254:	2300      	movs	r3, #0
}
 8003256:	4618      	mov	r0, r3
 8003258:	bd80      	pop	{r7, pc}
 800325a:	bf00      	nop
 800325c:	40022000 	.word	0x40022000

08003260 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003260:	b580      	push	{r7, lr}
 8003262:	b082      	sub	sp, #8
 8003264:	af00      	add	r7, sp, #0
 8003266:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003268:	4b12      	ldr	r3, [pc, #72]	; (80032b4 <HAL_InitTick+0x54>)
 800326a:	681a      	ldr	r2, [r3, #0]
 800326c:	4b12      	ldr	r3, [pc, #72]	; (80032b8 <HAL_InitTick+0x58>)
 800326e:	781b      	ldrb	r3, [r3, #0]
 8003270:	4619      	mov	r1, r3
 8003272:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003276:	fbb3 f3f1 	udiv	r3, r3, r1
 800327a:	fbb2 f3f3 	udiv	r3, r2, r3
 800327e:	4618      	mov	r0, r3
 8003280:	f000 f95f 	bl	8003542 <HAL_SYSTICK_Config>
 8003284:	4603      	mov	r3, r0
 8003286:	2b00      	cmp	r3, #0
 8003288:	d001      	beq.n	800328e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800328a:	2301      	movs	r3, #1
 800328c:	e00e      	b.n	80032ac <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	2b0f      	cmp	r3, #15
 8003292:	d80a      	bhi.n	80032aa <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003294:	2200      	movs	r2, #0
 8003296:	6879      	ldr	r1, [r7, #4]
 8003298:	f04f 30ff 	mov.w	r0, #4294967295
 800329c:	f000 f927 	bl	80034ee <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80032a0:	4a06      	ldr	r2, [pc, #24]	; (80032bc <HAL_InitTick+0x5c>)
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80032a6:	2300      	movs	r3, #0
 80032a8:	e000      	b.n	80032ac <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80032aa:	2301      	movs	r3, #1
}
 80032ac:	4618      	mov	r0, r3
 80032ae:	3708      	adds	r7, #8
 80032b0:	46bd      	mov	sp, r7
 80032b2:	bd80      	pop	{r7, pc}
 80032b4:	20000020 	.word	0x20000020
 80032b8:	20000028 	.word	0x20000028
 80032bc:	20000024 	.word	0x20000024

080032c0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80032c0:	b480      	push	{r7}
 80032c2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80032c4:	4b05      	ldr	r3, [pc, #20]	; (80032dc <HAL_IncTick+0x1c>)
 80032c6:	781b      	ldrb	r3, [r3, #0]
 80032c8:	461a      	mov	r2, r3
 80032ca:	4b05      	ldr	r3, [pc, #20]	; (80032e0 <HAL_IncTick+0x20>)
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	4413      	add	r3, r2
 80032d0:	4a03      	ldr	r2, [pc, #12]	; (80032e0 <HAL_IncTick+0x20>)
 80032d2:	6013      	str	r3, [r2, #0]
}
 80032d4:	bf00      	nop
 80032d6:	46bd      	mov	sp, r7
 80032d8:	bc80      	pop	{r7}
 80032da:	4770      	bx	lr
 80032dc:	20000028 	.word	0x20000028
 80032e0:	20000214 	.word	0x20000214

080032e4 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80032e4:	b480      	push	{r7}
 80032e6:	af00      	add	r7, sp, #0
  return uwTick;
 80032e8:	4b02      	ldr	r3, [pc, #8]	; (80032f4 <HAL_GetTick+0x10>)
 80032ea:	681b      	ldr	r3, [r3, #0]
}
 80032ec:	4618      	mov	r0, r3
 80032ee:	46bd      	mov	sp, r7
 80032f0:	bc80      	pop	{r7}
 80032f2:	4770      	bx	lr
 80032f4:	20000214 	.word	0x20000214

080032f8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80032f8:	b580      	push	{r7, lr}
 80032fa:	b084      	sub	sp, #16
 80032fc:	af00      	add	r7, sp, #0
 80032fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003300:	f7ff fff0 	bl	80032e4 <HAL_GetTick>
 8003304:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800330a:	68fb      	ldr	r3, [r7, #12]
 800330c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003310:	d005      	beq.n	800331e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003312:	4b0a      	ldr	r3, [pc, #40]	; (800333c <HAL_Delay+0x44>)
 8003314:	781b      	ldrb	r3, [r3, #0]
 8003316:	461a      	mov	r2, r3
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	4413      	add	r3, r2
 800331c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800331e:	bf00      	nop
 8003320:	f7ff ffe0 	bl	80032e4 <HAL_GetTick>
 8003324:	4602      	mov	r2, r0
 8003326:	68bb      	ldr	r3, [r7, #8]
 8003328:	1ad3      	subs	r3, r2, r3
 800332a:	68fa      	ldr	r2, [r7, #12]
 800332c:	429a      	cmp	r2, r3
 800332e:	d8f7      	bhi.n	8003320 <HAL_Delay+0x28>
  {
  }
}
 8003330:	bf00      	nop
 8003332:	bf00      	nop
 8003334:	3710      	adds	r7, #16
 8003336:	46bd      	mov	sp, r7
 8003338:	bd80      	pop	{r7, pc}
 800333a:	bf00      	nop
 800333c:	20000028 	.word	0x20000028

08003340 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003340:	b480      	push	{r7}
 8003342:	b085      	sub	sp, #20
 8003344:	af00      	add	r7, sp, #0
 8003346:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	f003 0307 	and.w	r3, r3, #7
 800334e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003350:	4b0c      	ldr	r3, [pc, #48]	; (8003384 <__NVIC_SetPriorityGrouping+0x44>)
 8003352:	68db      	ldr	r3, [r3, #12]
 8003354:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003356:	68ba      	ldr	r2, [r7, #8]
 8003358:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800335c:	4013      	ands	r3, r2
 800335e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003364:	68bb      	ldr	r3, [r7, #8]
 8003366:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003368:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800336c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003370:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003372:	4a04      	ldr	r2, [pc, #16]	; (8003384 <__NVIC_SetPriorityGrouping+0x44>)
 8003374:	68bb      	ldr	r3, [r7, #8]
 8003376:	60d3      	str	r3, [r2, #12]
}
 8003378:	bf00      	nop
 800337a:	3714      	adds	r7, #20
 800337c:	46bd      	mov	sp, r7
 800337e:	bc80      	pop	{r7}
 8003380:	4770      	bx	lr
 8003382:	bf00      	nop
 8003384:	e000ed00 	.word	0xe000ed00

08003388 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003388:	b480      	push	{r7}
 800338a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800338c:	4b04      	ldr	r3, [pc, #16]	; (80033a0 <__NVIC_GetPriorityGrouping+0x18>)
 800338e:	68db      	ldr	r3, [r3, #12]
 8003390:	0a1b      	lsrs	r3, r3, #8
 8003392:	f003 0307 	and.w	r3, r3, #7
}
 8003396:	4618      	mov	r0, r3
 8003398:	46bd      	mov	sp, r7
 800339a:	bc80      	pop	{r7}
 800339c:	4770      	bx	lr
 800339e:	bf00      	nop
 80033a0:	e000ed00 	.word	0xe000ed00

080033a4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80033a4:	b480      	push	{r7}
 80033a6:	b083      	sub	sp, #12
 80033a8:	af00      	add	r7, sp, #0
 80033aa:	4603      	mov	r3, r0
 80033ac:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80033ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80033b2:	2b00      	cmp	r3, #0
 80033b4:	db0b      	blt.n	80033ce <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80033b6:	79fb      	ldrb	r3, [r7, #7]
 80033b8:	f003 021f 	and.w	r2, r3, #31
 80033bc:	4906      	ldr	r1, [pc, #24]	; (80033d8 <__NVIC_EnableIRQ+0x34>)
 80033be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80033c2:	095b      	lsrs	r3, r3, #5
 80033c4:	2001      	movs	r0, #1
 80033c6:	fa00 f202 	lsl.w	r2, r0, r2
 80033ca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80033ce:	bf00      	nop
 80033d0:	370c      	adds	r7, #12
 80033d2:	46bd      	mov	sp, r7
 80033d4:	bc80      	pop	{r7}
 80033d6:	4770      	bx	lr
 80033d8:	e000e100 	.word	0xe000e100

080033dc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80033dc:	b480      	push	{r7}
 80033de:	b083      	sub	sp, #12
 80033e0:	af00      	add	r7, sp, #0
 80033e2:	4603      	mov	r3, r0
 80033e4:	6039      	str	r1, [r7, #0]
 80033e6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80033e8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80033ec:	2b00      	cmp	r3, #0
 80033ee:	db0a      	blt.n	8003406 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80033f0:	683b      	ldr	r3, [r7, #0]
 80033f2:	b2da      	uxtb	r2, r3
 80033f4:	490c      	ldr	r1, [pc, #48]	; (8003428 <__NVIC_SetPriority+0x4c>)
 80033f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80033fa:	0112      	lsls	r2, r2, #4
 80033fc:	b2d2      	uxtb	r2, r2
 80033fe:	440b      	add	r3, r1
 8003400:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003404:	e00a      	b.n	800341c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003406:	683b      	ldr	r3, [r7, #0]
 8003408:	b2da      	uxtb	r2, r3
 800340a:	4908      	ldr	r1, [pc, #32]	; (800342c <__NVIC_SetPriority+0x50>)
 800340c:	79fb      	ldrb	r3, [r7, #7]
 800340e:	f003 030f 	and.w	r3, r3, #15
 8003412:	3b04      	subs	r3, #4
 8003414:	0112      	lsls	r2, r2, #4
 8003416:	b2d2      	uxtb	r2, r2
 8003418:	440b      	add	r3, r1
 800341a:	761a      	strb	r2, [r3, #24]
}
 800341c:	bf00      	nop
 800341e:	370c      	adds	r7, #12
 8003420:	46bd      	mov	sp, r7
 8003422:	bc80      	pop	{r7}
 8003424:	4770      	bx	lr
 8003426:	bf00      	nop
 8003428:	e000e100 	.word	0xe000e100
 800342c:	e000ed00 	.word	0xe000ed00

08003430 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003430:	b480      	push	{r7}
 8003432:	b089      	sub	sp, #36	; 0x24
 8003434:	af00      	add	r7, sp, #0
 8003436:	60f8      	str	r0, [r7, #12]
 8003438:	60b9      	str	r1, [r7, #8]
 800343a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800343c:	68fb      	ldr	r3, [r7, #12]
 800343e:	f003 0307 	and.w	r3, r3, #7
 8003442:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003444:	69fb      	ldr	r3, [r7, #28]
 8003446:	f1c3 0307 	rsb	r3, r3, #7
 800344a:	2b04      	cmp	r3, #4
 800344c:	bf28      	it	cs
 800344e:	2304      	movcs	r3, #4
 8003450:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003452:	69fb      	ldr	r3, [r7, #28]
 8003454:	3304      	adds	r3, #4
 8003456:	2b06      	cmp	r3, #6
 8003458:	d902      	bls.n	8003460 <NVIC_EncodePriority+0x30>
 800345a:	69fb      	ldr	r3, [r7, #28]
 800345c:	3b03      	subs	r3, #3
 800345e:	e000      	b.n	8003462 <NVIC_EncodePriority+0x32>
 8003460:	2300      	movs	r3, #0
 8003462:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003464:	f04f 32ff 	mov.w	r2, #4294967295
 8003468:	69bb      	ldr	r3, [r7, #24]
 800346a:	fa02 f303 	lsl.w	r3, r2, r3
 800346e:	43da      	mvns	r2, r3
 8003470:	68bb      	ldr	r3, [r7, #8]
 8003472:	401a      	ands	r2, r3
 8003474:	697b      	ldr	r3, [r7, #20]
 8003476:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003478:	f04f 31ff 	mov.w	r1, #4294967295
 800347c:	697b      	ldr	r3, [r7, #20]
 800347e:	fa01 f303 	lsl.w	r3, r1, r3
 8003482:	43d9      	mvns	r1, r3
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003488:	4313      	orrs	r3, r2
         );
}
 800348a:	4618      	mov	r0, r3
 800348c:	3724      	adds	r7, #36	; 0x24
 800348e:	46bd      	mov	sp, r7
 8003490:	bc80      	pop	{r7}
 8003492:	4770      	bx	lr

08003494 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003494:	b580      	push	{r7, lr}
 8003496:	b082      	sub	sp, #8
 8003498:	af00      	add	r7, sp, #0
 800349a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	3b01      	subs	r3, #1
 80034a0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80034a4:	d301      	bcc.n	80034aa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80034a6:	2301      	movs	r3, #1
 80034a8:	e00f      	b.n	80034ca <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80034aa:	4a0a      	ldr	r2, [pc, #40]	; (80034d4 <SysTick_Config+0x40>)
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	3b01      	subs	r3, #1
 80034b0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80034b2:	210f      	movs	r1, #15
 80034b4:	f04f 30ff 	mov.w	r0, #4294967295
 80034b8:	f7ff ff90 	bl	80033dc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80034bc:	4b05      	ldr	r3, [pc, #20]	; (80034d4 <SysTick_Config+0x40>)
 80034be:	2200      	movs	r2, #0
 80034c0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80034c2:	4b04      	ldr	r3, [pc, #16]	; (80034d4 <SysTick_Config+0x40>)
 80034c4:	2207      	movs	r2, #7
 80034c6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80034c8:	2300      	movs	r3, #0
}
 80034ca:	4618      	mov	r0, r3
 80034cc:	3708      	adds	r7, #8
 80034ce:	46bd      	mov	sp, r7
 80034d0:	bd80      	pop	{r7, pc}
 80034d2:	bf00      	nop
 80034d4:	e000e010 	.word	0xe000e010

080034d8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80034d8:	b580      	push	{r7, lr}
 80034da:	b082      	sub	sp, #8
 80034dc:	af00      	add	r7, sp, #0
 80034de:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80034e0:	6878      	ldr	r0, [r7, #4]
 80034e2:	f7ff ff2d 	bl	8003340 <__NVIC_SetPriorityGrouping>
}
 80034e6:	bf00      	nop
 80034e8:	3708      	adds	r7, #8
 80034ea:	46bd      	mov	sp, r7
 80034ec:	bd80      	pop	{r7, pc}

080034ee <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80034ee:	b580      	push	{r7, lr}
 80034f0:	b086      	sub	sp, #24
 80034f2:	af00      	add	r7, sp, #0
 80034f4:	4603      	mov	r3, r0
 80034f6:	60b9      	str	r1, [r7, #8]
 80034f8:	607a      	str	r2, [r7, #4]
 80034fa:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80034fc:	2300      	movs	r3, #0
 80034fe:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003500:	f7ff ff42 	bl	8003388 <__NVIC_GetPriorityGrouping>
 8003504:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003506:	687a      	ldr	r2, [r7, #4]
 8003508:	68b9      	ldr	r1, [r7, #8]
 800350a:	6978      	ldr	r0, [r7, #20]
 800350c:	f7ff ff90 	bl	8003430 <NVIC_EncodePriority>
 8003510:	4602      	mov	r2, r0
 8003512:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003516:	4611      	mov	r1, r2
 8003518:	4618      	mov	r0, r3
 800351a:	f7ff ff5f 	bl	80033dc <__NVIC_SetPriority>
}
 800351e:	bf00      	nop
 8003520:	3718      	adds	r7, #24
 8003522:	46bd      	mov	sp, r7
 8003524:	bd80      	pop	{r7, pc}

08003526 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003526:	b580      	push	{r7, lr}
 8003528:	b082      	sub	sp, #8
 800352a:	af00      	add	r7, sp, #0
 800352c:	4603      	mov	r3, r0
 800352e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003530:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003534:	4618      	mov	r0, r3
 8003536:	f7ff ff35 	bl	80033a4 <__NVIC_EnableIRQ>
}
 800353a:	bf00      	nop
 800353c:	3708      	adds	r7, #8
 800353e:	46bd      	mov	sp, r7
 8003540:	bd80      	pop	{r7, pc}

08003542 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003542:	b580      	push	{r7, lr}
 8003544:	b082      	sub	sp, #8
 8003546:	af00      	add	r7, sp, #0
 8003548:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800354a:	6878      	ldr	r0, [r7, #4]
 800354c:	f7ff ffa2 	bl	8003494 <SysTick_Config>
 8003550:	4603      	mov	r3, r0
}
 8003552:	4618      	mov	r0, r3
 8003554:	3708      	adds	r7, #8
 8003556:	46bd      	mov	sp, r7
 8003558:	bd80      	pop	{r7, pc}
	...

0800355c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800355c:	b480      	push	{r7}
 800355e:	b08b      	sub	sp, #44	; 0x2c
 8003560:	af00      	add	r7, sp, #0
 8003562:	6078      	str	r0, [r7, #4]
 8003564:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003566:	2300      	movs	r3, #0
 8003568:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800356a:	2300      	movs	r3, #0
 800356c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800356e:	e169      	b.n	8003844 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8003570:	2201      	movs	r2, #1
 8003572:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003574:	fa02 f303 	lsl.w	r3, r2, r3
 8003578:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800357a:	683b      	ldr	r3, [r7, #0]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	69fa      	ldr	r2, [r7, #28]
 8003580:	4013      	ands	r3, r2
 8003582:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8003584:	69ba      	ldr	r2, [r7, #24]
 8003586:	69fb      	ldr	r3, [r7, #28]
 8003588:	429a      	cmp	r2, r3
 800358a:	f040 8158 	bne.w	800383e <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800358e:	683b      	ldr	r3, [r7, #0]
 8003590:	685b      	ldr	r3, [r3, #4]
 8003592:	4a9a      	ldr	r2, [pc, #616]	; (80037fc <HAL_GPIO_Init+0x2a0>)
 8003594:	4293      	cmp	r3, r2
 8003596:	d05e      	beq.n	8003656 <HAL_GPIO_Init+0xfa>
 8003598:	4a98      	ldr	r2, [pc, #608]	; (80037fc <HAL_GPIO_Init+0x2a0>)
 800359a:	4293      	cmp	r3, r2
 800359c:	d875      	bhi.n	800368a <HAL_GPIO_Init+0x12e>
 800359e:	4a98      	ldr	r2, [pc, #608]	; (8003800 <HAL_GPIO_Init+0x2a4>)
 80035a0:	4293      	cmp	r3, r2
 80035a2:	d058      	beq.n	8003656 <HAL_GPIO_Init+0xfa>
 80035a4:	4a96      	ldr	r2, [pc, #600]	; (8003800 <HAL_GPIO_Init+0x2a4>)
 80035a6:	4293      	cmp	r3, r2
 80035a8:	d86f      	bhi.n	800368a <HAL_GPIO_Init+0x12e>
 80035aa:	4a96      	ldr	r2, [pc, #600]	; (8003804 <HAL_GPIO_Init+0x2a8>)
 80035ac:	4293      	cmp	r3, r2
 80035ae:	d052      	beq.n	8003656 <HAL_GPIO_Init+0xfa>
 80035b0:	4a94      	ldr	r2, [pc, #592]	; (8003804 <HAL_GPIO_Init+0x2a8>)
 80035b2:	4293      	cmp	r3, r2
 80035b4:	d869      	bhi.n	800368a <HAL_GPIO_Init+0x12e>
 80035b6:	4a94      	ldr	r2, [pc, #592]	; (8003808 <HAL_GPIO_Init+0x2ac>)
 80035b8:	4293      	cmp	r3, r2
 80035ba:	d04c      	beq.n	8003656 <HAL_GPIO_Init+0xfa>
 80035bc:	4a92      	ldr	r2, [pc, #584]	; (8003808 <HAL_GPIO_Init+0x2ac>)
 80035be:	4293      	cmp	r3, r2
 80035c0:	d863      	bhi.n	800368a <HAL_GPIO_Init+0x12e>
 80035c2:	4a92      	ldr	r2, [pc, #584]	; (800380c <HAL_GPIO_Init+0x2b0>)
 80035c4:	4293      	cmp	r3, r2
 80035c6:	d046      	beq.n	8003656 <HAL_GPIO_Init+0xfa>
 80035c8:	4a90      	ldr	r2, [pc, #576]	; (800380c <HAL_GPIO_Init+0x2b0>)
 80035ca:	4293      	cmp	r3, r2
 80035cc:	d85d      	bhi.n	800368a <HAL_GPIO_Init+0x12e>
 80035ce:	2b12      	cmp	r3, #18
 80035d0:	d82a      	bhi.n	8003628 <HAL_GPIO_Init+0xcc>
 80035d2:	2b12      	cmp	r3, #18
 80035d4:	d859      	bhi.n	800368a <HAL_GPIO_Init+0x12e>
 80035d6:	a201      	add	r2, pc, #4	; (adr r2, 80035dc <HAL_GPIO_Init+0x80>)
 80035d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80035dc:	08003657 	.word	0x08003657
 80035e0:	08003631 	.word	0x08003631
 80035e4:	08003643 	.word	0x08003643
 80035e8:	08003685 	.word	0x08003685
 80035ec:	0800368b 	.word	0x0800368b
 80035f0:	0800368b 	.word	0x0800368b
 80035f4:	0800368b 	.word	0x0800368b
 80035f8:	0800368b 	.word	0x0800368b
 80035fc:	0800368b 	.word	0x0800368b
 8003600:	0800368b 	.word	0x0800368b
 8003604:	0800368b 	.word	0x0800368b
 8003608:	0800368b 	.word	0x0800368b
 800360c:	0800368b 	.word	0x0800368b
 8003610:	0800368b 	.word	0x0800368b
 8003614:	0800368b 	.word	0x0800368b
 8003618:	0800368b 	.word	0x0800368b
 800361c:	0800368b 	.word	0x0800368b
 8003620:	08003639 	.word	0x08003639
 8003624:	0800364d 	.word	0x0800364d
 8003628:	4a79      	ldr	r2, [pc, #484]	; (8003810 <HAL_GPIO_Init+0x2b4>)
 800362a:	4293      	cmp	r3, r2
 800362c:	d013      	beq.n	8003656 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800362e:	e02c      	b.n	800368a <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8003630:	683b      	ldr	r3, [r7, #0]
 8003632:	68db      	ldr	r3, [r3, #12]
 8003634:	623b      	str	r3, [r7, #32]
          break;
 8003636:	e029      	b.n	800368c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8003638:	683b      	ldr	r3, [r7, #0]
 800363a:	68db      	ldr	r3, [r3, #12]
 800363c:	3304      	adds	r3, #4
 800363e:	623b      	str	r3, [r7, #32]
          break;
 8003640:	e024      	b.n	800368c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8003642:	683b      	ldr	r3, [r7, #0]
 8003644:	68db      	ldr	r3, [r3, #12]
 8003646:	3308      	adds	r3, #8
 8003648:	623b      	str	r3, [r7, #32]
          break;
 800364a:	e01f      	b.n	800368c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 800364c:	683b      	ldr	r3, [r7, #0]
 800364e:	68db      	ldr	r3, [r3, #12]
 8003650:	330c      	adds	r3, #12
 8003652:	623b      	str	r3, [r7, #32]
          break;
 8003654:	e01a      	b.n	800368c <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8003656:	683b      	ldr	r3, [r7, #0]
 8003658:	689b      	ldr	r3, [r3, #8]
 800365a:	2b00      	cmp	r3, #0
 800365c:	d102      	bne.n	8003664 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800365e:	2304      	movs	r3, #4
 8003660:	623b      	str	r3, [r7, #32]
          break;
 8003662:	e013      	b.n	800368c <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8003664:	683b      	ldr	r3, [r7, #0]
 8003666:	689b      	ldr	r3, [r3, #8]
 8003668:	2b01      	cmp	r3, #1
 800366a:	d105      	bne.n	8003678 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800366c:	2308      	movs	r3, #8
 800366e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	69fa      	ldr	r2, [r7, #28]
 8003674:	611a      	str	r2, [r3, #16]
          break;
 8003676:	e009      	b.n	800368c <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003678:	2308      	movs	r3, #8
 800367a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	69fa      	ldr	r2, [r7, #28]
 8003680:	615a      	str	r2, [r3, #20]
          break;
 8003682:	e003      	b.n	800368c <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8003684:	2300      	movs	r3, #0
 8003686:	623b      	str	r3, [r7, #32]
          break;
 8003688:	e000      	b.n	800368c <HAL_GPIO_Init+0x130>
          break;
 800368a:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800368c:	69bb      	ldr	r3, [r7, #24]
 800368e:	2bff      	cmp	r3, #255	; 0xff
 8003690:	d801      	bhi.n	8003696 <HAL_GPIO_Init+0x13a>
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	e001      	b.n	800369a <HAL_GPIO_Init+0x13e>
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	3304      	adds	r3, #4
 800369a:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 800369c:	69bb      	ldr	r3, [r7, #24]
 800369e:	2bff      	cmp	r3, #255	; 0xff
 80036a0:	d802      	bhi.n	80036a8 <HAL_GPIO_Init+0x14c>
 80036a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036a4:	009b      	lsls	r3, r3, #2
 80036a6:	e002      	b.n	80036ae <HAL_GPIO_Init+0x152>
 80036a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036aa:	3b08      	subs	r3, #8
 80036ac:	009b      	lsls	r3, r3, #2
 80036ae:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80036b0:	697b      	ldr	r3, [r7, #20]
 80036b2:	681a      	ldr	r2, [r3, #0]
 80036b4:	210f      	movs	r1, #15
 80036b6:	693b      	ldr	r3, [r7, #16]
 80036b8:	fa01 f303 	lsl.w	r3, r1, r3
 80036bc:	43db      	mvns	r3, r3
 80036be:	401a      	ands	r2, r3
 80036c0:	6a39      	ldr	r1, [r7, #32]
 80036c2:	693b      	ldr	r3, [r7, #16]
 80036c4:	fa01 f303 	lsl.w	r3, r1, r3
 80036c8:	431a      	orrs	r2, r3
 80036ca:	697b      	ldr	r3, [r7, #20]
 80036cc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80036ce:	683b      	ldr	r3, [r7, #0]
 80036d0:	685b      	ldr	r3, [r3, #4]
 80036d2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80036d6:	2b00      	cmp	r3, #0
 80036d8:	f000 80b1 	beq.w	800383e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80036dc:	4b4d      	ldr	r3, [pc, #308]	; (8003814 <HAL_GPIO_Init+0x2b8>)
 80036de:	699b      	ldr	r3, [r3, #24]
 80036e0:	4a4c      	ldr	r2, [pc, #304]	; (8003814 <HAL_GPIO_Init+0x2b8>)
 80036e2:	f043 0301 	orr.w	r3, r3, #1
 80036e6:	6193      	str	r3, [r2, #24]
 80036e8:	4b4a      	ldr	r3, [pc, #296]	; (8003814 <HAL_GPIO_Init+0x2b8>)
 80036ea:	699b      	ldr	r3, [r3, #24]
 80036ec:	f003 0301 	and.w	r3, r3, #1
 80036f0:	60bb      	str	r3, [r7, #8]
 80036f2:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80036f4:	4a48      	ldr	r2, [pc, #288]	; (8003818 <HAL_GPIO_Init+0x2bc>)
 80036f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036f8:	089b      	lsrs	r3, r3, #2
 80036fa:	3302      	adds	r3, #2
 80036fc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003700:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8003702:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003704:	f003 0303 	and.w	r3, r3, #3
 8003708:	009b      	lsls	r3, r3, #2
 800370a:	220f      	movs	r2, #15
 800370c:	fa02 f303 	lsl.w	r3, r2, r3
 8003710:	43db      	mvns	r3, r3
 8003712:	68fa      	ldr	r2, [r7, #12]
 8003714:	4013      	ands	r3, r2
 8003716:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	4a40      	ldr	r2, [pc, #256]	; (800381c <HAL_GPIO_Init+0x2c0>)
 800371c:	4293      	cmp	r3, r2
 800371e:	d013      	beq.n	8003748 <HAL_GPIO_Init+0x1ec>
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	4a3f      	ldr	r2, [pc, #252]	; (8003820 <HAL_GPIO_Init+0x2c4>)
 8003724:	4293      	cmp	r3, r2
 8003726:	d00d      	beq.n	8003744 <HAL_GPIO_Init+0x1e8>
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	4a3e      	ldr	r2, [pc, #248]	; (8003824 <HAL_GPIO_Init+0x2c8>)
 800372c:	4293      	cmp	r3, r2
 800372e:	d007      	beq.n	8003740 <HAL_GPIO_Init+0x1e4>
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	4a3d      	ldr	r2, [pc, #244]	; (8003828 <HAL_GPIO_Init+0x2cc>)
 8003734:	4293      	cmp	r3, r2
 8003736:	d101      	bne.n	800373c <HAL_GPIO_Init+0x1e0>
 8003738:	2303      	movs	r3, #3
 800373a:	e006      	b.n	800374a <HAL_GPIO_Init+0x1ee>
 800373c:	2304      	movs	r3, #4
 800373e:	e004      	b.n	800374a <HAL_GPIO_Init+0x1ee>
 8003740:	2302      	movs	r3, #2
 8003742:	e002      	b.n	800374a <HAL_GPIO_Init+0x1ee>
 8003744:	2301      	movs	r3, #1
 8003746:	e000      	b.n	800374a <HAL_GPIO_Init+0x1ee>
 8003748:	2300      	movs	r3, #0
 800374a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800374c:	f002 0203 	and.w	r2, r2, #3
 8003750:	0092      	lsls	r2, r2, #2
 8003752:	4093      	lsls	r3, r2
 8003754:	68fa      	ldr	r2, [r7, #12]
 8003756:	4313      	orrs	r3, r2
 8003758:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800375a:	492f      	ldr	r1, [pc, #188]	; (8003818 <HAL_GPIO_Init+0x2bc>)
 800375c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800375e:	089b      	lsrs	r3, r3, #2
 8003760:	3302      	adds	r3, #2
 8003762:	68fa      	ldr	r2, [r7, #12]
 8003764:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003768:	683b      	ldr	r3, [r7, #0]
 800376a:	685b      	ldr	r3, [r3, #4]
 800376c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003770:	2b00      	cmp	r3, #0
 8003772:	d006      	beq.n	8003782 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8003774:	4b2d      	ldr	r3, [pc, #180]	; (800382c <HAL_GPIO_Init+0x2d0>)
 8003776:	681a      	ldr	r2, [r3, #0]
 8003778:	492c      	ldr	r1, [pc, #176]	; (800382c <HAL_GPIO_Init+0x2d0>)
 800377a:	69bb      	ldr	r3, [r7, #24]
 800377c:	4313      	orrs	r3, r2
 800377e:	600b      	str	r3, [r1, #0]
 8003780:	e006      	b.n	8003790 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8003782:	4b2a      	ldr	r3, [pc, #168]	; (800382c <HAL_GPIO_Init+0x2d0>)
 8003784:	681a      	ldr	r2, [r3, #0]
 8003786:	69bb      	ldr	r3, [r7, #24]
 8003788:	43db      	mvns	r3, r3
 800378a:	4928      	ldr	r1, [pc, #160]	; (800382c <HAL_GPIO_Init+0x2d0>)
 800378c:	4013      	ands	r3, r2
 800378e:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003790:	683b      	ldr	r3, [r7, #0]
 8003792:	685b      	ldr	r3, [r3, #4]
 8003794:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003798:	2b00      	cmp	r3, #0
 800379a:	d006      	beq.n	80037aa <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 800379c:	4b23      	ldr	r3, [pc, #140]	; (800382c <HAL_GPIO_Init+0x2d0>)
 800379e:	685a      	ldr	r2, [r3, #4]
 80037a0:	4922      	ldr	r1, [pc, #136]	; (800382c <HAL_GPIO_Init+0x2d0>)
 80037a2:	69bb      	ldr	r3, [r7, #24]
 80037a4:	4313      	orrs	r3, r2
 80037a6:	604b      	str	r3, [r1, #4]
 80037a8:	e006      	b.n	80037b8 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80037aa:	4b20      	ldr	r3, [pc, #128]	; (800382c <HAL_GPIO_Init+0x2d0>)
 80037ac:	685a      	ldr	r2, [r3, #4]
 80037ae:	69bb      	ldr	r3, [r7, #24]
 80037b0:	43db      	mvns	r3, r3
 80037b2:	491e      	ldr	r1, [pc, #120]	; (800382c <HAL_GPIO_Init+0x2d0>)
 80037b4:	4013      	ands	r3, r2
 80037b6:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80037b8:	683b      	ldr	r3, [r7, #0]
 80037ba:	685b      	ldr	r3, [r3, #4]
 80037bc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80037c0:	2b00      	cmp	r3, #0
 80037c2:	d006      	beq.n	80037d2 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80037c4:	4b19      	ldr	r3, [pc, #100]	; (800382c <HAL_GPIO_Init+0x2d0>)
 80037c6:	689a      	ldr	r2, [r3, #8]
 80037c8:	4918      	ldr	r1, [pc, #96]	; (800382c <HAL_GPIO_Init+0x2d0>)
 80037ca:	69bb      	ldr	r3, [r7, #24]
 80037cc:	4313      	orrs	r3, r2
 80037ce:	608b      	str	r3, [r1, #8]
 80037d0:	e006      	b.n	80037e0 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80037d2:	4b16      	ldr	r3, [pc, #88]	; (800382c <HAL_GPIO_Init+0x2d0>)
 80037d4:	689a      	ldr	r2, [r3, #8]
 80037d6:	69bb      	ldr	r3, [r7, #24]
 80037d8:	43db      	mvns	r3, r3
 80037da:	4914      	ldr	r1, [pc, #80]	; (800382c <HAL_GPIO_Init+0x2d0>)
 80037dc:	4013      	ands	r3, r2
 80037de:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80037e0:	683b      	ldr	r3, [r7, #0]
 80037e2:	685b      	ldr	r3, [r3, #4]
 80037e4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80037e8:	2b00      	cmp	r3, #0
 80037ea:	d021      	beq.n	8003830 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80037ec:	4b0f      	ldr	r3, [pc, #60]	; (800382c <HAL_GPIO_Init+0x2d0>)
 80037ee:	68da      	ldr	r2, [r3, #12]
 80037f0:	490e      	ldr	r1, [pc, #56]	; (800382c <HAL_GPIO_Init+0x2d0>)
 80037f2:	69bb      	ldr	r3, [r7, #24]
 80037f4:	4313      	orrs	r3, r2
 80037f6:	60cb      	str	r3, [r1, #12]
 80037f8:	e021      	b.n	800383e <HAL_GPIO_Init+0x2e2>
 80037fa:	bf00      	nop
 80037fc:	10320000 	.word	0x10320000
 8003800:	10310000 	.word	0x10310000
 8003804:	10220000 	.word	0x10220000
 8003808:	10210000 	.word	0x10210000
 800380c:	10120000 	.word	0x10120000
 8003810:	10110000 	.word	0x10110000
 8003814:	40021000 	.word	0x40021000
 8003818:	40010000 	.word	0x40010000
 800381c:	40010800 	.word	0x40010800
 8003820:	40010c00 	.word	0x40010c00
 8003824:	40011000 	.word	0x40011000
 8003828:	40011400 	.word	0x40011400
 800382c:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8003830:	4b0b      	ldr	r3, [pc, #44]	; (8003860 <HAL_GPIO_Init+0x304>)
 8003832:	68da      	ldr	r2, [r3, #12]
 8003834:	69bb      	ldr	r3, [r7, #24]
 8003836:	43db      	mvns	r3, r3
 8003838:	4909      	ldr	r1, [pc, #36]	; (8003860 <HAL_GPIO_Init+0x304>)
 800383a:	4013      	ands	r3, r2
 800383c:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 800383e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003840:	3301      	adds	r3, #1
 8003842:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003844:	683b      	ldr	r3, [r7, #0]
 8003846:	681a      	ldr	r2, [r3, #0]
 8003848:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800384a:	fa22 f303 	lsr.w	r3, r2, r3
 800384e:	2b00      	cmp	r3, #0
 8003850:	f47f ae8e 	bne.w	8003570 <HAL_GPIO_Init+0x14>
  }
}
 8003854:	bf00      	nop
 8003856:	bf00      	nop
 8003858:	372c      	adds	r7, #44	; 0x2c
 800385a:	46bd      	mov	sp, r7
 800385c:	bc80      	pop	{r7}
 800385e:	4770      	bx	lr
 8003860:	40010400 	.word	0x40010400

08003864 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8003864:	b480      	push	{r7}
 8003866:	b085      	sub	sp, #20
 8003868:	af00      	add	r7, sp, #0
 800386a:	6078      	str	r0, [r7, #4]
 800386c:	460b      	mov	r3, r1
 800386e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	689a      	ldr	r2, [r3, #8]
 8003874:	887b      	ldrh	r3, [r7, #2]
 8003876:	4013      	ands	r3, r2
 8003878:	2b00      	cmp	r3, #0
 800387a:	d002      	beq.n	8003882 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800387c:	2301      	movs	r3, #1
 800387e:	73fb      	strb	r3, [r7, #15]
 8003880:	e001      	b.n	8003886 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003882:	2300      	movs	r3, #0
 8003884:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003886:	7bfb      	ldrb	r3, [r7, #15]
}
 8003888:	4618      	mov	r0, r3
 800388a:	3714      	adds	r7, #20
 800388c:	46bd      	mov	sp, r7
 800388e:	bc80      	pop	{r7}
 8003890:	4770      	bx	lr

08003892 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003892:	b480      	push	{r7}
 8003894:	b083      	sub	sp, #12
 8003896:	af00      	add	r7, sp, #0
 8003898:	6078      	str	r0, [r7, #4]
 800389a:	460b      	mov	r3, r1
 800389c:	807b      	strh	r3, [r7, #2]
 800389e:	4613      	mov	r3, r2
 80038a0:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80038a2:	787b      	ldrb	r3, [r7, #1]
 80038a4:	2b00      	cmp	r3, #0
 80038a6:	d003      	beq.n	80038b0 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80038a8:	887a      	ldrh	r2, [r7, #2]
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80038ae:	e003      	b.n	80038b8 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80038b0:	887b      	ldrh	r3, [r7, #2]
 80038b2:	041a      	lsls	r2, r3, #16
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	611a      	str	r2, [r3, #16]
}
 80038b8:	bf00      	nop
 80038ba:	370c      	adds	r7, #12
 80038bc:	46bd      	mov	sp, r7
 80038be:	bc80      	pop	{r7}
 80038c0:	4770      	bx	lr
	...

080038c4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80038c4:	b580      	push	{r7, lr}
 80038c6:	b082      	sub	sp, #8
 80038c8:	af00      	add	r7, sp, #0
 80038ca:	4603      	mov	r3, r0
 80038cc:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80038ce:	4b08      	ldr	r3, [pc, #32]	; (80038f0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80038d0:	695a      	ldr	r2, [r3, #20]
 80038d2:	88fb      	ldrh	r3, [r7, #6]
 80038d4:	4013      	ands	r3, r2
 80038d6:	2b00      	cmp	r3, #0
 80038d8:	d006      	beq.n	80038e8 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80038da:	4a05      	ldr	r2, [pc, #20]	; (80038f0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80038dc:	88fb      	ldrh	r3, [r7, #6]
 80038de:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80038e0:	88fb      	ldrh	r3, [r7, #6]
 80038e2:	4618      	mov	r0, r3
 80038e4:	f000 f806 	bl	80038f4 <HAL_GPIO_EXTI_Callback>
  }
}
 80038e8:	bf00      	nop
 80038ea:	3708      	adds	r7, #8
 80038ec:	46bd      	mov	sp, r7
 80038ee:	bd80      	pop	{r7, pc}
 80038f0:	40010400 	.word	0x40010400

080038f4 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80038f4:	b480      	push	{r7}
 80038f6:	b083      	sub	sp, #12
 80038f8:	af00      	add	r7, sp, #0
 80038fa:	4603      	mov	r3, r0
 80038fc:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 80038fe:	bf00      	nop
 8003900:	370c      	adds	r7, #12
 8003902:	46bd      	mov	sp, r7
 8003904:	bc80      	pop	{r7}
 8003906:	4770      	bx	lr

08003908 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003908:	b580      	push	{r7, lr}
 800390a:	b084      	sub	sp, #16
 800390c:	af00      	add	r7, sp, #0
 800390e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	2b00      	cmp	r3, #0
 8003914:	d101      	bne.n	800391a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003916:	2301      	movs	r3, #1
 8003918:	e12b      	b.n	8003b72 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003920:	b2db      	uxtb	r3, r3
 8003922:	2b00      	cmp	r3, #0
 8003924:	d106      	bne.n	8003934 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	2200      	movs	r2, #0
 800392a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800392e:	6878      	ldr	r0, [r7, #4]
 8003930:	f7ff fa44 	bl	8002dbc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	2224      	movs	r2, #36	; 0x24
 8003938:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	681a      	ldr	r2, [r3, #0]
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	f022 0201 	bic.w	r2, r2, #1
 800394a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	681a      	ldr	r2, [r3, #0]
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800395a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	681a      	ldr	r2, [r3, #0]
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800396a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800396c:	f000 ffea 	bl	8004944 <HAL_RCC_GetPCLK1Freq>
 8003970:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	685b      	ldr	r3, [r3, #4]
 8003976:	4a81      	ldr	r2, [pc, #516]	; (8003b7c <HAL_I2C_Init+0x274>)
 8003978:	4293      	cmp	r3, r2
 800397a:	d807      	bhi.n	800398c <HAL_I2C_Init+0x84>
 800397c:	68fb      	ldr	r3, [r7, #12]
 800397e:	4a80      	ldr	r2, [pc, #512]	; (8003b80 <HAL_I2C_Init+0x278>)
 8003980:	4293      	cmp	r3, r2
 8003982:	bf94      	ite	ls
 8003984:	2301      	movls	r3, #1
 8003986:	2300      	movhi	r3, #0
 8003988:	b2db      	uxtb	r3, r3
 800398a:	e006      	b.n	800399a <HAL_I2C_Init+0x92>
 800398c:	68fb      	ldr	r3, [r7, #12]
 800398e:	4a7d      	ldr	r2, [pc, #500]	; (8003b84 <HAL_I2C_Init+0x27c>)
 8003990:	4293      	cmp	r3, r2
 8003992:	bf94      	ite	ls
 8003994:	2301      	movls	r3, #1
 8003996:	2300      	movhi	r3, #0
 8003998:	b2db      	uxtb	r3, r3
 800399a:	2b00      	cmp	r3, #0
 800399c:	d001      	beq.n	80039a2 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800399e:	2301      	movs	r3, #1
 80039a0:	e0e7      	b.n	8003b72 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80039a2:	68fb      	ldr	r3, [r7, #12]
 80039a4:	4a78      	ldr	r2, [pc, #480]	; (8003b88 <HAL_I2C_Init+0x280>)
 80039a6:	fba2 2303 	umull	r2, r3, r2, r3
 80039aa:	0c9b      	lsrs	r3, r3, #18
 80039ac:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	685b      	ldr	r3, [r3, #4]
 80039b4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	68ba      	ldr	r2, [r7, #8]
 80039be:	430a      	orrs	r2, r1
 80039c0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	6a1b      	ldr	r3, [r3, #32]
 80039c8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	685b      	ldr	r3, [r3, #4]
 80039d0:	4a6a      	ldr	r2, [pc, #424]	; (8003b7c <HAL_I2C_Init+0x274>)
 80039d2:	4293      	cmp	r3, r2
 80039d4:	d802      	bhi.n	80039dc <HAL_I2C_Init+0xd4>
 80039d6:	68bb      	ldr	r3, [r7, #8]
 80039d8:	3301      	adds	r3, #1
 80039da:	e009      	b.n	80039f0 <HAL_I2C_Init+0xe8>
 80039dc:	68bb      	ldr	r3, [r7, #8]
 80039de:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80039e2:	fb02 f303 	mul.w	r3, r2, r3
 80039e6:	4a69      	ldr	r2, [pc, #420]	; (8003b8c <HAL_I2C_Init+0x284>)
 80039e8:	fba2 2303 	umull	r2, r3, r2, r3
 80039ec:	099b      	lsrs	r3, r3, #6
 80039ee:	3301      	adds	r3, #1
 80039f0:	687a      	ldr	r2, [r7, #4]
 80039f2:	6812      	ldr	r2, [r2, #0]
 80039f4:	430b      	orrs	r3, r1
 80039f6:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	69db      	ldr	r3, [r3, #28]
 80039fe:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8003a02:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	685b      	ldr	r3, [r3, #4]
 8003a0a:	495c      	ldr	r1, [pc, #368]	; (8003b7c <HAL_I2C_Init+0x274>)
 8003a0c:	428b      	cmp	r3, r1
 8003a0e:	d819      	bhi.n	8003a44 <HAL_I2C_Init+0x13c>
 8003a10:	68fb      	ldr	r3, [r7, #12]
 8003a12:	1e59      	subs	r1, r3, #1
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	685b      	ldr	r3, [r3, #4]
 8003a18:	005b      	lsls	r3, r3, #1
 8003a1a:	fbb1 f3f3 	udiv	r3, r1, r3
 8003a1e:	1c59      	adds	r1, r3, #1
 8003a20:	f640 73fc 	movw	r3, #4092	; 0xffc
 8003a24:	400b      	ands	r3, r1
 8003a26:	2b00      	cmp	r3, #0
 8003a28:	d00a      	beq.n	8003a40 <HAL_I2C_Init+0x138>
 8003a2a:	68fb      	ldr	r3, [r7, #12]
 8003a2c:	1e59      	subs	r1, r3, #1
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	685b      	ldr	r3, [r3, #4]
 8003a32:	005b      	lsls	r3, r3, #1
 8003a34:	fbb1 f3f3 	udiv	r3, r1, r3
 8003a38:	3301      	adds	r3, #1
 8003a3a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003a3e:	e051      	b.n	8003ae4 <HAL_I2C_Init+0x1dc>
 8003a40:	2304      	movs	r3, #4
 8003a42:	e04f      	b.n	8003ae4 <HAL_I2C_Init+0x1dc>
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	689b      	ldr	r3, [r3, #8]
 8003a48:	2b00      	cmp	r3, #0
 8003a4a:	d111      	bne.n	8003a70 <HAL_I2C_Init+0x168>
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	1e58      	subs	r0, r3, #1
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	6859      	ldr	r1, [r3, #4]
 8003a54:	460b      	mov	r3, r1
 8003a56:	005b      	lsls	r3, r3, #1
 8003a58:	440b      	add	r3, r1
 8003a5a:	fbb0 f3f3 	udiv	r3, r0, r3
 8003a5e:	3301      	adds	r3, #1
 8003a60:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003a64:	2b00      	cmp	r3, #0
 8003a66:	bf0c      	ite	eq
 8003a68:	2301      	moveq	r3, #1
 8003a6a:	2300      	movne	r3, #0
 8003a6c:	b2db      	uxtb	r3, r3
 8003a6e:	e012      	b.n	8003a96 <HAL_I2C_Init+0x18e>
 8003a70:	68fb      	ldr	r3, [r7, #12]
 8003a72:	1e58      	subs	r0, r3, #1
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	6859      	ldr	r1, [r3, #4]
 8003a78:	460b      	mov	r3, r1
 8003a7a:	009b      	lsls	r3, r3, #2
 8003a7c:	440b      	add	r3, r1
 8003a7e:	0099      	lsls	r1, r3, #2
 8003a80:	440b      	add	r3, r1
 8003a82:	fbb0 f3f3 	udiv	r3, r0, r3
 8003a86:	3301      	adds	r3, #1
 8003a88:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003a8c:	2b00      	cmp	r3, #0
 8003a8e:	bf0c      	ite	eq
 8003a90:	2301      	moveq	r3, #1
 8003a92:	2300      	movne	r3, #0
 8003a94:	b2db      	uxtb	r3, r3
 8003a96:	2b00      	cmp	r3, #0
 8003a98:	d001      	beq.n	8003a9e <HAL_I2C_Init+0x196>
 8003a9a:	2301      	movs	r3, #1
 8003a9c:	e022      	b.n	8003ae4 <HAL_I2C_Init+0x1dc>
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	689b      	ldr	r3, [r3, #8]
 8003aa2:	2b00      	cmp	r3, #0
 8003aa4:	d10e      	bne.n	8003ac4 <HAL_I2C_Init+0x1bc>
 8003aa6:	68fb      	ldr	r3, [r7, #12]
 8003aa8:	1e58      	subs	r0, r3, #1
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	6859      	ldr	r1, [r3, #4]
 8003aae:	460b      	mov	r3, r1
 8003ab0:	005b      	lsls	r3, r3, #1
 8003ab2:	440b      	add	r3, r1
 8003ab4:	fbb0 f3f3 	udiv	r3, r0, r3
 8003ab8:	3301      	adds	r3, #1
 8003aba:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003abe:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003ac2:	e00f      	b.n	8003ae4 <HAL_I2C_Init+0x1dc>
 8003ac4:	68fb      	ldr	r3, [r7, #12]
 8003ac6:	1e58      	subs	r0, r3, #1
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	6859      	ldr	r1, [r3, #4]
 8003acc:	460b      	mov	r3, r1
 8003ace:	009b      	lsls	r3, r3, #2
 8003ad0:	440b      	add	r3, r1
 8003ad2:	0099      	lsls	r1, r3, #2
 8003ad4:	440b      	add	r3, r1
 8003ad6:	fbb0 f3f3 	udiv	r3, r0, r3
 8003ada:	3301      	adds	r3, #1
 8003adc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003ae0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003ae4:	6879      	ldr	r1, [r7, #4]
 8003ae6:	6809      	ldr	r1, [r1, #0]
 8003ae8:	4313      	orrs	r3, r2
 8003aea:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	69da      	ldr	r2, [r3, #28]
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	6a1b      	ldr	r3, [r3, #32]
 8003afe:	431a      	orrs	r2, r3
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	430a      	orrs	r2, r1
 8003b06:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	689b      	ldr	r3, [r3, #8]
 8003b0e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8003b12:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003b16:	687a      	ldr	r2, [r7, #4]
 8003b18:	6911      	ldr	r1, [r2, #16]
 8003b1a:	687a      	ldr	r2, [r7, #4]
 8003b1c:	68d2      	ldr	r2, [r2, #12]
 8003b1e:	4311      	orrs	r1, r2
 8003b20:	687a      	ldr	r2, [r7, #4]
 8003b22:	6812      	ldr	r2, [r2, #0]
 8003b24:	430b      	orrs	r3, r1
 8003b26:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	68db      	ldr	r3, [r3, #12]
 8003b2e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	695a      	ldr	r2, [r3, #20]
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	699b      	ldr	r3, [r3, #24]
 8003b3a:	431a      	orrs	r2, r3
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	430a      	orrs	r2, r1
 8003b42:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	681a      	ldr	r2, [r3, #0]
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	f042 0201 	orr.w	r2, r2, #1
 8003b52:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	2200      	movs	r2, #0
 8003b58:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	2220      	movs	r2, #32
 8003b5e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	2200      	movs	r2, #0
 8003b66:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	2200      	movs	r2, #0
 8003b6c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003b70:	2300      	movs	r3, #0
}
 8003b72:	4618      	mov	r0, r3
 8003b74:	3710      	adds	r7, #16
 8003b76:	46bd      	mov	sp, r7
 8003b78:	bd80      	pop	{r7, pc}
 8003b7a:	bf00      	nop
 8003b7c:	000186a0 	.word	0x000186a0
 8003b80:	001e847f 	.word	0x001e847f
 8003b84:	003d08ff 	.word	0x003d08ff
 8003b88:	431bde83 	.word	0x431bde83
 8003b8c:	10624dd3 	.word	0x10624dd3

08003b90 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003b90:	b580      	push	{r7, lr}
 8003b92:	b088      	sub	sp, #32
 8003b94:	af02      	add	r7, sp, #8
 8003b96:	60f8      	str	r0, [r7, #12]
 8003b98:	607a      	str	r2, [r7, #4]
 8003b9a:	461a      	mov	r2, r3
 8003b9c:	460b      	mov	r3, r1
 8003b9e:	817b      	strh	r3, [r7, #10]
 8003ba0:	4613      	mov	r3, r2
 8003ba2:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003ba4:	f7ff fb9e 	bl	80032e4 <HAL_GetTick>
 8003ba8:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003baa:	68fb      	ldr	r3, [r7, #12]
 8003bac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003bb0:	b2db      	uxtb	r3, r3
 8003bb2:	2b20      	cmp	r3, #32
 8003bb4:	f040 80e0 	bne.w	8003d78 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003bb8:	697b      	ldr	r3, [r7, #20]
 8003bba:	9300      	str	r3, [sp, #0]
 8003bbc:	2319      	movs	r3, #25
 8003bbe:	2201      	movs	r2, #1
 8003bc0:	4970      	ldr	r1, [pc, #448]	; (8003d84 <HAL_I2C_Master_Transmit+0x1f4>)
 8003bc2:	68f8      	ldr	r0, [r7, #12]
 8003bc4:	f000 f964 	bl	8003e90 <I2C_WaitOnFlagUntilTimeout>
 8003bc8:	4603      	mov	r3, r0
 8003bca:	2b00      	cmp	r3, #0
 8003bcc:	d001      	beq.n	8003bd2 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8003bce:	2302      	movs	r3, #2
 8003bd0:	e0d3      	b.n	8003d7a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003bd2:	68fb      	ldr	r3, [r7, #12]
 8003bd4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003bd8:	2b01      	cmp	r3, #1
 8003bda:	d101      	bne.n	8003be0 <HAL_I2C_Master_Transmit+0x50>
 8003bdc:	2302      	movs	r3, #2
 8003bde:	e0cc      	b.n	8003d7a <HAL_I2C_Master_Transmit+0x1ea>
 8003be0:	68fb      	ldr	r3, [r7, #12]
 8003be2:	2201      	movs	r2, #1
 8003be4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003be8:	68fb      	ldr	r3, [r7, #12]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	f003 0301 	and.w	r3, r3, #1
 8003bf2:	2b01      	cmp	r3, #1
 8003bf4:	d007      	beq.n	8003c06 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003bf6:	68fb      	ldr	r3, [r7, #12]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	681a      	ldr	r2, [r3, #0]
 8003bfc:	68fb      	ldr	r3, [r7, #12]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	f042 0201 	orr.w	r2, r2, #1
 8003c04:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003c06:	68fb      	ldr	r3, [r7, #12]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	681a      	ldr	r2, [r3, #0]
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003c14:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8003c16:	68fb      	ldr	r3, [r7, #12]
 8003c18:	2221      	movs	r2, #33	; 0x21
 8003c1a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8003c1e:	68fb      	ldr	r3, [r7, #12]
 8003c20:	2210      	movs	r2, #16
 8003c22:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8003c26:	68fb      	ldr	r3, [r7, #12]
 8003c28:	2200      	movs	r2, #0
 8003c2a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	687a      	ldr	r2, [r7, #4]
 8003c30:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003c32:	68fb      	ldr	r3, [r7, #12]
 8003c34:	893a      	ldrh	r2, [r7, #8]
 8003c36:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003c38:	68fb      	ldr	r3, [r7, #12]
 8003c3a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c3c:	b29a      	uxth	r2, r3
 8003c3e:	68fb      	ldr	r3, [r7, #12]
 8003c40:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003c42:	68fb      	ldr	r3, [r7, #12]
 8003c44:	4a50      	ldr	r2, [pc, #320]	; (8003d88 <HAL_I2C_Master_Transmit+0x1f8>)
 8003c46:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8003c48:	8979      	ldrh	r1, [r7, #10]
 8003c4a:	697b      	ldr	r3, [r7, #20]
 8003c4c:	6a3a      	ldr	r2, [r7, #32]
 8003c4e:	68f8      	ldr	r0, [r7, #12]
 8003c50:	f000 f89c 	bl	8003d8c <I2C_MasterRequestWrite>
 8003c54:	4603      	mov	r3, r0
 8003c56:	2b00      	cmp	r3, #0
 8003c58:	d001      	beq.n	8003c5e <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8003c5a:	2301      	movs	r3, #1
 8003c5c:	e08d      	b.n	8003d7a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003c5e:	2300      	movs	r3, #0
 8003c60:	613b      	str	r3, [r7, #16]
 8003c62:	68fb      	ldr	r3, [r7, #12]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	695b      	ldr	r3, [r3, #20]
 8003c68:	613b      	str	r3, [r7, #16]
 8003c6a:	68fb      	ldr	r3, [r7, #12]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	699b      	ldr	r3, [r3, #24]
 8003c70:	613b      	str	r3, [r7, #16]
 8003c72:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8003c74:	e066      	b.n	8003d44 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003c76:	697a      	ldr	r2, [r7, #20]
 8003c78:	6a39      	ldr	r1, [r7, #32]
 8003c7a:	68f8      	ldr	r0, [r7, #12]
 8003c7c:	f000 f9de 	bl	800403c <I2C_WaitOnTXEFlagUntilTimeout>
 8003c80:	4603      	mov	r3, r0
 8003c82:	2b00      	cmp	r3, #0
 8003c84:	d00d      	beq.n	8003ca2 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003c86:	68fb      	ldr	r3, [r7, #12]
 8003c88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c8a:	2b04      	cmp	r3, #4
 8003c8c:	d107      	bne.n	8003c9e <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003c8e:	68fb      	ldr	r3, [r7, #12]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	681a      	ldr	r2, [r3, #0]
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003c9c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003c9e:	2301      	movs	r3, #1
 8003ca0:	e06b      	b.n	8003d7a <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003ca2:	68fb      	ldr	r3, [r7, #12]
 8003ca4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ca6:	781a      	ldrb	r2, [r3, #0]
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003cae:	68fb      	ldr	r3, [r7, #12]
 8003cb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cb2:	1c5a      	adds	r2, r3, #1
 8003cb4:	68fb      	ldr	r3, [r7, #12]
 8003cb6:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003cb8:	68fb      	ldr	r3, [r7, #12]
 8003cba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003cbc:	b29b      	uxth	r3, r3
 8003cbe:	3b01      	subs	r3, #1
 8003cc0:	b29a      	uxth	r2, r3
 8003cc2:	68fb      	ldr	r3, [r7, #12]
 8003cc4:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8003cc6:	68fb      	ldr	r3, [r7, #12]
 8003cc8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003cca:	3b01      	subs	r3, #1
 8003ccc:	b29a      	uxth	r2, r3
 8003cce:	68fb      	ldr	r3, [r7, #12]
 8003cd0:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003cd2:	68fb      	ldr	r3, [r7, #12]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	695b      	ldr	r3, [r3, #20]
 8003cd8:	f003 0304 	and.w	r3, r3, #4
 8003cdc:	2b04      	cmp	r3, #4
 8003cde:	d11b      	bne.n	8003d18 <HAL_I2C_Master_Transmit+0x188>
 8003ce0:	68fb      	ldr	r3, [r7, #12]
 8003ce2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003ce4:	2b00      	cmp	r3, #0
 8003ce6:	d017      	beq.n	8003d18 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003ce8:	68fb      	ldr	r3, [r7, #12]
 8003cea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cec:	781a      	ldrb	r2, [r3, #0]
 8003cee:	68fb      	ldr	r3, [r7, #12]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003cf4:	68fb      	ldr	r3, [r7, #12]
 8003cf6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cf8:	1c5a      	adds	r2, r3, #1
 8003cfa:	68fb      	ldr	r3, [r7, #12]
 8003cfc:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8003cfe:	68fb      	ldr	r3, [r7, #12]
 8003d00:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d02:	b29b      	uxth	r3, r3
 8003d04:	3b01      	subs	r3, #1
 8003d06:	b29a      	uxth	r2, r3
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003d10:	3b01      	subs	r3, #1
 8003d12:	b29a      	uxth	r2, r3
 8003d14:	68fb      	ldr	r3, [r7, #12]
 8003d16:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003d18:	697a      	ldr	r2, [r7, #20]
 8003d1a:	6a39      	ldr	r1, [r7, #32]
 8003d1c:	68f8      	ldr	r0, [r7, #12]
 8003d1e:	f000 f9ce 	bl	80040be <I2C_WaitOnBTFFlagUntilTimeout>
 8003d22:	4603      	mov	r3, r0
 8003d24:	2b00      	cmp	r3, #0
 8003d26:	d00d      	beq.n	8003d44 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003d28:	68fb      	ldr	r3, [r7, #12]
 8003d2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d2c:	2b04      	cmp	r3, #4
 8003d2e:	d107      	bne.n	8003d40 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	681a      	ldr	r2, [r3, #0]
 8003d36:	68fb      	ldr	r3, [r7, #12]
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003d3e:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003d40:	2301      	movs	r3, #1
 8003d42:	e01a      	b.n	8003d7a <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8003d44:	68fb      	ldr	r3, [r7, #12]
 8003d46:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003d48:	2b00      	cmp	r3, #0
 8003d4a:	d194      	bne.n	8003c76 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003d4c:	68fb      	ldr	r3, [r7, #12]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	681a      	ldr	r2, [r3, #0]
 8003d52:	68fb      	ldr	r3, [r7, #12]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003d5a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003d5c:	68fb      	ldr	r3, [r7, #12]
 8003d5e:	2220      	movs	r2, #32
 8003d60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003d64:	68fb      	ldr	r3, [r7, #12]
 8003d66:	2200      	movs	r2, #0
 8003d68:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003d6c:	68fb      	ldr	r3, [r7, #12]
 8003d6e:	2200      	movs	r2, #0
 8003d70:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003d74:	2300      	movs	r3, #0
 8003d76:	e000      	b.n	8003d7a <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8003d78:	2302      	movs	r3, #2
  }
}
 8003d7a:	4618      	mov	r0, r3
 8003d7c:	3718      	adds	r7, #24
 8003d7e:	46bd      	mov	sp, r7
 8003d80:	bd80      	pop	{r7, pc}
 8003d82:	bf00      	nop
 8003d84:	00100002 	.word	0x00100002
 8003d88:	ffff0000 	.word	0xffff0000

08003d8c <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8003d8c:	b580      	push	{r7, lr}
 8003d8e:	b088      	sub	sp, #32
 8003d90:	af02      	add	r7, sp, #8
 8003d92:	60f8      	str	r0, [r7, #12]
 8003d94:	607a      	str	r2, [r7, #4]
 8003d96:	603b      	str	r3, [r7, #0]
 8003d98:	460b      	mov	r3, r1
 8003d9a:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003d9c:	68fb      	ldr	r3, [r7, #12]
 8003d9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003da0:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8003da2:	697b      	ldr	r3, [r7, #20]
 8003da4:	2b08      	cmp	r3, #8
 8003da6:	d006      	beq.n	8003db6 <I2C_MasterRequestWrite+0x2a>
 8003da8:	697b      	ldr	r3, [r7, #20]
 8003daa:	2b01      	cmp	r3, #1
 8003dac:	d003      	beq.n	8003db6 <I2C_MasterRequestWrite+0x2a>
 8003dae:	697b      	ldr	r3, [r7, #20]
 8003db0:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003db4:	d108      	bne.n	8003dc8 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003db6:	68fb      	ldr	r3, [r7, #12]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	681a      	ldr	r2, [r3, #0]
 8003dbc:	68fb      	ldr	r3, [r7, #12]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003dc4:	601a      	str	r2, [r3, #0]
 8003dc6:	e00b      	b.n	8003de0 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003dcc:	2b12      	cmp	r3, #18
 8003dce:	d107      	bne.n	8003de0 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003dd0:	68fb      	ldr	r3, [r7, #12]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	681a      	ldr	r2, [r3, #0]
 8003dd6:	68fb      	ldr	r3, [r7, #12]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003dde:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003de0:	683b      	ldr	r3, [r7, #0]
 8003de2:	9300      	str	r3, [sp, #0]
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	2200      	movs	r2, #0
 8003de8:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003dec:	68f8      	ldr	r0, [r7, #12]
 8003dee:	f000 f84f 	bl	8003e90 <I2C_WaitOnFlagUntilTimeout>
 8003df2:	4603      	mov	r3, r0
 8003df4:	2b00      	cmp	r3, #0
 8003df6:	d00d      	beq.n	8003e14 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003df8:	68fb      	ldr	r3, [r7, #12]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e02:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003e06:	d103      	bne.n	8003e10 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003e08:	68fb      	ldr	r3, [r7, #12]
 8003e0a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003e0e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003e10:	2303      	movs	r3, #3
 8003e12:	e035      	b.n	8003e80 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	691b      	ldr	r3, [r3, #16]
 8003e18:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003e1c:	d108      	bne.n	8003e30 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003e1e:	897b      	ldrh	r3, [r7, #10]
 8003e20:	b2db      	uxtb	r3, r3
 8003e22:	461a      	mov	r2, r3
 8003e24:	68fb      	ldr	r3, [r7, #12]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003e2c:	611a      	str	r2, [r3, #16]
 8003e2e:	e01b      	b.n	8003e68 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8003e30:	897b      	ldrh	r3, [r7, #10]
 8003e32:	11db      	asrs	r3, r3, #7
 8003e34:	b2db      	uxtb	r3, r3
 8003e36:	f003 0306 	and.w	r3, r3, #6
 8003e3a:	b2db      	uxtb	r3, r3
 8003e3c:	f063 030f 	orn	r3, r3, #15
 8003e40:	b2da      	uxtb	r2, r3
 8003e42:	68fb      	ldr	r3, [r7, #12]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8003e48:	683b      	ldr	r3, [r7, #0]
 8003e4a:	687a      	ldr	r2, [r7, #4]
 8003e4c:	490e      	ldr	r1, [pc, #56]	; (8003e88 <I2C_MasterRequestWrite+0xfc>)
 8003e4e:	68f8      	ldr	r0, [r7, #12]
 8003e50:	f000 f875 	bl	8003f3e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003e54:	4603      	mov	r3, r0
 8003e56:	2b00      	cmp	r3, #0
 8003e58:	d001      	beq.n	8003e5e <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8003e5a:	2301      	movs	r3, #1
 8003e5c:	e010      	b.n	8003e80 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8003e5e:	897b      	ldrh	r3, [r7, #10]
 8003e60:	b2da      	uxtb	r2, r3
 8003e62:	68fb      	ldr	r3, [r7, #12]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003e68:	683b      	ldr	r3, [r7, #0]
 8003e6a:	687a      	ldr	r2, [r7, #4]
 8003e6c:	4907      	ldr	r1, [pc, #28]	; (8003e8c <I2C_MasterRequestWrite+0x100>)
 8003e6e:	68f8      	ldr	r0, [r7, #12]
 8003e70:	f000 f865 	bl	8003f3e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003e74:	4603      	mov	r3, r0
 8003e76:	2b00      	cmp	r3, #0
 8003e78:	d001      	beq.n	8003e7e <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8003e7a:	2301      	movs	r3, #1
 8003e7c:	e000      	b.n	8003e80 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8003e7e:	2300      	movs	r3, #0
}
 8003e80:	4618      	mov	r0, r3
 8003e82:	3718      	adds	r7, #24
 8003e84:	46bd      	mov	sp, r7
 8003e86:	bd80      	pop	{r7, pc}
 8003e88:	00010008 	.word	0x00010008
 8003e8c:	00010002 	.word	0x00010002

08003e90 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003e90:	b580      	push	{r7, lr}
 8003e92:	b084      	sub	sp, #16
 8003e94:	af00      	add	r7, sp, #0
 8003e96:	60f8      	str	r0, [r7, #12]
 8003e98:	60b9      	str	r1, [r7, #8]
 8003e9a:	603b      	str	r3, [r7, #0]
 8003e9c:	4613      	mov	r3, r2
 8003e9e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003ea0:	e025      	b.n	8003eee <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003ea2:	683b      	ldr	r3, [r7, #0]
 8003ea4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ea8:	d021      	beq.n	8003eee <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003eaa:	f7ff fa1b 	bl	80032e4 <HAL_GetTick>
 8003eae:	4602      	mov	r2, r0
 8003eb0:	69bb      	ldr	r3, [r7, #24]
 8003eb2:	1ad3      	subs	r3, r2, r3
 8003eb4:	683a      	ldr	r2, [r7, #0]
 8003eb6:	429a      	cmp	r2, r3
 8003eb8:	d302      	bcc.n	8003ec0 <I2C_WaitOnFlagUntilTimeout+0x30>
 8003eba:	683b      	ldr	r3, [r7, #0]
 8003ebc:	2b00      	cmp	r3, #0
 8003ebe:	d116      	bne.n	8003eee <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	2200      	movs	r2, #0
 8003ec4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8003ec6:	68fb      	ldr	r3, [r7, #12]
 8003ec8:	2220      	movs	r2, #32
 8003eca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003ece:	68fb      	ldr	r3, [r7, #12]
 8003ed0:	2200      	movs	r2, #0
 8003ed2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003ed6:	68fb      	ldr	r3, [r7, #12]
 8003ed8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003eda:	f043 0220 	orr.w	r2, r3, #32
 8003ede:	68fb      	ldr	r3, [r7, #12]
 8003ee0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003ee2:	68fb      	ldr	r3, [r7, #12]
 8003ee4:	2200      	movs	r2, #0
 8003ee6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003eea:	2301      	movs	r3, #1
 8003eec:	e023      	b.n	8003f36 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003eee:	68bb      	ldr	r3, [r7, #8]
 8003ef0:	0c1b      	lsrs	r3, r3, #16
 8003ef2:	b2db      	uxtb	r3, r3
 8003ef4:	2b01      	cmp	r3, #1
 8003ef6:	d10d      	bne.n	8003f14 <I2C_WaitOnFlagUntilTimeout+0x84>
 8003ef8:	68fb      	ldr	r3, [r7, #12]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	695b      	ldr	r3, [r3, #20]
 8003efe:	43da      	mvns	r2, r3
 8003f00:	68bb      	ldr	r3, [r7, #8]
 8003f02:	4013      	ands	r3, r2
 8003f04:	b29b      	uxth	r3, r3
 8003f06:	2b00      	cmp	r3, #0
 8003f08:	bf0c      	ite	eq
 8003f0a:	2301      	moveq	r3, #1
 8003f0c:	2300      	movne	r3, #0
 8003f0e:	b2db      	uxtb	r3, r3
 8003f10:	461a      	mov	r2, r3
 8003f12:	e00c      	b.n	8003f2e <I2C_WaitOnFlagUntilTimeout+0x9e>
 8003f14:	68fb      	ldr	r3, [r7, #12]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	699b      	ldr	r3, [r3, #24]
 8003f1a:	43da      	mvns	r2, r3
 8003f1c:	68bb      	ldr	r3, [r7, #8]
 8003f1e:	4013      	ands	r3, r2
 8003f20:	b29b      	uxth	r3, r3
 8003f22:	2b00      	cmp	r3, #0
 8003f24:	bf0c      	ite	eq
 8003f26:	2301      	moveq	r3, #1
 8003f28:	2300      	movne	r3, #0
 8003f2a:	b2db      	uxtb	r3, r3
 8003f2c:	461a      	mov	r2, r3
 8003f2e:	79fb      	ldrb	r3, [r7, #7]
 8003f30:	429a      	cmp	r2, r3
 8003f32:	d0b6      	beq.n	8003ea2 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003f34:	2300      	movs	r3, #0
}
 8003f36:	4618      	mov	r0, r3
 8003f38:	3710      	adds	r7, #16
 8003f3a:	46bd      	mov	sp, r7
 8003f3c:	bd80      	pop	{r7, pc}

08003f3e <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8003f3e:	b580      	push	{r7, lr}
 8003f40:	b084      	sub	sp, #16
 8003f42:	af00      	add	r7, sp, #0
 8003f44:	60f8      	str	r0, [r7, #12]
 8003f46:	60b9      	str	r1, [r7, #8]
 8003f48:	607a      	str	r2, [r7, #4]
 8003f4a:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003f4c:	e051      	b.n	8003ff2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003f4e:	68fb      	ldr	r3, [r7, #12]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	695b      	ldr	r3, [r3, #20]
 8003f54:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003f58:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003f5c:	d123      	bne.n	8003fa6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003f5e:	68fb      	ldr	r3, [r7, #12]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	681a      	ldr	r2, [r3, #0]
 8003f64:	68fb      	ldr	r3, [r7, #12]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003f6c:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003f6e:	68fb      	ldr	r3, [r7, #12]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003f76:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003f78:	68fb      	ldr	r3, [r7, #12]
 8003f7a:	2200      	movs	r2, #0
 8003f7c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003f7e:	68fb      	ldr	r3, [r7, #12]
 8003f80:	2220      	movs	r2, #32
 8003f82:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003f86:	68fb      	ldr	r3, [r7, #12]
 8003f88:	2200      	movs	r2, #0
 8003f8a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003f8e:	68fb      	ldr	r3, [r7, #12]
 8003f90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f92:	f043 0204 	orr.w	r2, r3, #4
 8003f96:	68fb      	ldr	r3, [r7, #12]
 8003f98:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003f9a:	68fb      	ldr	r3, [r7, #12]
 8003f9c:	2200      	movs	r2, #0
 8003f9e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003fa2:	2301      	movs	r3, #1
 8003fa4:	e046      	b.n	8004034 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003fac:	d021      	beq.n	8003ff2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003fae:	f7ff f999 	bl	80032e4 <HAL_GetTick>
 8003fb2:	4602      	mov	r2, r0
 8003fb4:	683b      	ldr	r3, [r7, #0]
 8003fb6:	1ad3      	subs	r3, r2, r3
 8003fb8:	687a      	ldr	r2, [r7, #4]
 8003fba:	429a      	cmp	r2, r3
 8003fbc:	d302      	bcc.n	8003fc4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	2b00      	cmp	r3, #0
 8003fc2:	d116      	bne.n	8003ff2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003fc4:	68fb      	ldr	r3, [r7, #12]
 8003fc6:	2200      	movs	r2, #0
 8003fc8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003fca:	68fb      	ldr	r3, [r7, #12]
 8003fcc:	2220      	movs	r2, #32
 8003fce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003fd2:	68fb      	ldr	r3, [r7, #12]
 8003fd4:	2200      	movs	r2, #0
 8003fd6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003fda:	68fb      	ldr	r3, [r7, #12]
 8003fdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fde:	f043 0220 	orr.w	r2, r3, #32
 8003fe2:	68fb      	ldr	r3, [r7, #12]
 8003fe4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003fe6:	68fb      	ldr	r3, [r7, #12]
 8003fe8:	2200      	movs	r2, #0
 8003fea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003fee:	2301      	movs	r3, #1
 8003ff0:	e020      	b.n	8004034 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003ff2:	68bb      	ldr	r3, [r7, #8]
 8003ff4:	0c1b      	lsrs	r3, r3, #16
 8003ff6:	b2db      	uxtb	r3, r3
 8003ff8:	2b01      	cmp	r3, #1
 8003ffa:	d10c      	bne.n	8004016 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8003ffc:	68fb      	ldr	r3, [r7, #12]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	695b      	ldr	r3, [r3, #20]
 8004002:	43da      	mvns	r2, r3
 8004004:	68bb      	ldr	r3, [r7, #8]
 8004006:	4013      	ands	r3, r2
 8004008:	b29b      	uxth	r3, r3
 800400a:	2b00      	cmp	r3, #0
 800400c:	bf14      	ite	ne
 800400e:	2301      	movne	r3, #1
 8004010:	2300      	moveq	r3, #0
 8004012:	b2db      	uxtb	r3, r3
 8004014:	e00b      	b.n	800402e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8004016:	68fb      	ldr	r3, [r7, #12]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	699b      	ldr	r3, [r3, #24]
 800401c:	43da      	mvns	r2, r3
 800401e:	68bb      	ldr	r3, [r7, #8]
 8004020:	4013      	ands	r3, r2
 8004022:	b29b      	uxth	r3, r3
 8004024:	2b00      	cmp	r3, #0
 8004026:	bf14      	ite	ne
 8004028:	2301      	movne	r3, #1
 800402a:	2300      	moveq	r3, #0
 800402c:	b2db      	uxtb	r3, r3
 800402e:	2b00      	cmp	r3, #0
 8004030:	d18d      	bne.n	8003f4e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8004032:	2300      	movs	r3, #0
}
 8004034:	4618      	mov	r0, r3
 8004036:	3710      	adds	r7, #16
 8004038:	46bd      	mov	sp, r7
 800403a:	bd80      	pop	{r7, pc}

0800403c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800403c:	b580      	push	{r7, lr}
 800403e:	b084      	sub	sp, #16
 8004040:	af00      	add	r7, sp, #0
 8004042:	60f8      	str	r0, [r7, #12]
 8004044:	60b9      	str	r1, [r7, #8]
 8004046:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004048:	e02d      	b.n	80040a6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800404a:	68f8      	ldr	r0, [r7, #12]
 800404c:	f000 f878 	bl	8004140 <I2C_IsAcknowledgeFailed>
 8004050:	4603      	mov	r3, r0
 8004052:	2b00      	cmp	r3, #0
 8004054:	d001      	beq.n	800405a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004056:	2301      	movs	r3, #1
 8004058:	e02d      	b.n	80040b6 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800405a:	68bb      	ldr	r3, [r7, #8]
 800405c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004060:	d021      	beq.n	80040a6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004062:	f7ff f93f 	bl	80032e4 <HAL_GetTick>
 8004066:	4602      	mov	r2, r0
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	1ad3      	subs	r3, r2, r3
 800406c:	68ba      	ldr	r2, [r7, #8]
 800406e:	429a      	cmp	r2, r3
 8004070:	d302      	bcc.n	8004078 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8004072:	68bb      	ldr	r3, [r7, #8]
 8004074:	2b00      	cmp	r3, #0
 8004076:	d116      	bne.n	80040a6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004078:	68fb      	ldr	r3, [r7, #12]
 800407a:	2200      	movs	r2, #0
 800407c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800407e:	68fb      	ldr	r3, [r7, #12]
 8004080:	2220      	movs	r2, #32
 8004082:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004086:	68fb      	ldr	r3, [r7, #12]
 8004088:	2200      	movs	r2, #0
 800408a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800408e:	68fb      	ldr	r3, [r7, #12]
 8004090:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004092:	f043 0220 	orr.w	r2, r3, #32
 8004096:	68fb      	ldr	r3, [r7, #12]
 8004098:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800409a:	68fb      	ldr	r3, [r7, #12]
 800409c:	2200      	movs	r2, #0
 800409e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80040a2:	2301      	movs	r3, #1
 80040a4:	e007      	b.n	80040b6 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80040a6:	68fb      	ldr	r3, [r7, #12]
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	695b      	ldr	r3, [r3, #20]
 80040ac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80040b0:	2b80      	cmp	r3, #128	; 0x80
 80040b2:	d1ca      	bne.n	800404a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80040b4:	2300      	movs	r3, #0
}
 80040b6:	4618      	mov	r0, r3
 80040b8:	3710      	adds	r7, #16
 80040ba:	46bd      	mov	sp, r7
 80040bc:	bd80      	pop	{r7, pc}

080040be <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80040be:	b580      	push	{r7, lr}
 80040c0:	b084      	sub	sp, #16
 80040c2:	af00      	add	r7, sp, #0
 80040c4:	60f8      	str	r0, [r7, #12]
 80040c6:	60b9      	str	r1, [r7, #8]
 80040c8:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80040ca:	e02d      	b.n	8004128 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80040cc:	68f8      	ldr	r0, [r7, #12]
 80040ce:	f000 f837 	bl	8004140 <I2C_IsAcknowledgeFailed>
 80040d2:	4603      	mov	r3, r0
 80040d4:	2b00      	cmp	r3, #0
 80040d6:	d001      	beq.n	80040dc <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80040d8:	2301      	movs	r3, #1
 80040da:	e02d      	b.n	8004138 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80040dc:	68bb      	ldr	r3, [r7, #8]
 80040de:	f1b3 3fff 	cmp.w	r3, #4294967295
 80040e2:	d021      	beq.n	8004128 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80040e4:	f7ff f8fe 	bl	80032e4 <HAL_GetTick>
 80040e8:	4602      	mov	r2, r0
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	1ad3      	subs	r3, r2, r3
 80040ee:	68ba      	ldr	r2, [r7, #8]
 80040f0:	429a      	cmp	r2, r3
 80040f2:	d302      	bcc.n	80040fa <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80040f4:	68bb      	ldr	r3, [r7, #8]
 80040f6:	2b00      	cmp	r3, #0
 80040f8:	d116      	bne.n	8004128 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80040fa:	68fb      	ldr	r3, [r7, #12]
 80040fc:	2200      	movs	r2, #0
 80040fe:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004100:	68fb      	ldr	r3, [r7, #12]
 8004102:	2220      	movs	r2, #32
 8004104:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004108:	68fb      	ldr	r3, [r7, #12]
 800410a:	2200      	movs	r2, #0
 800410c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004110:	68fb      	ldr	r3, [r7, #12]
 8004112:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004114:	f043 0220 	orr.w	r2, r3, #32
 8004118:	68fb      	ldr	r3, [r7, #12]
 800411a:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800411c:	68fb      	ldr	r3, [r7, #12]
 800411e:	2200      	movs	r2, #0
 8004120:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004124:	2301      	movs	r3, #1
 8004126:	e007      	b.n	8004138 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004128:	68fb      	ldr	r3, [r7, #12]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	695b      	ldr	r3, [r3, #20]
 800412e:	f003 0304 	and.w	r3, r3, #4
 8004132:	2b04      	cmp	r3, #4
 8004134:	d1ca      	bne.n	80040cc <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004136:	2300      	movs	r3, #0
}
 8004138:	4618      	mov	r0, r3
 800413a:	3710      	adds	r7, #16
 800413c:	46bd      	mov	sp, r7
 800413e:	bd80      	pop	{r7, pc}

08004140 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8004140:	b480      	push	{r7}
 8004142:	b083      	sub	sp, #12
 8004144:	af00      	add	r7, sp, #0
 8004146:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	695b      	ldr	r3, [r3, #20]
 800414e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004152:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004156:	d11b      	bne.n	8004190 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004160:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	2200      	movs	r2, #0
 8004166:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	2220      	movs	r2, #32
 800416c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	2200      	movs	r2, #0
 8004174:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800417c:	f043 0204 	orr.w	r2, r3, #4
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	2200      	movs	r2, #0
 8004188:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800418c:	2301      	movs	r3, #1
 800418e:	e000      	b.n	8004192 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8004190:	2300      	movs	r3, #0
}
 8004192:	4618      	mov	r0, r3
 8004194:	370c      	adds	r7, #12
 8004196:	46bd      	mov	sp, r7
 8004198:	bc80      	pop	{r7}
 800419a:	4770      	bx	lr

0800419c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800419c:	b580      	push	{r7, lr}
 800419e:	b086      	sub	sp, #24
 80041a0:	af00      	add	r7, sp, #0
 80041a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	2b00      	cmp	r3, #0
 80041a8:	d101      	bne.n	80041ae <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80041aa:	2301      	movs	r3, #1
 80041ac:	e272      	b.n	8004694 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	f003 0301 	and.w	r3, r3, #1
 80041b6:	2b00      	cmp	r3, #0
 80041b8:	f000 8087 	beq.w	80042ca <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80041bc:	4b92      	ldr	r3, [pc, #584]	; (8004408 <HAL_RCC_OscConfig+0x26c>)
 80041be:	685b      	ldr	r3, [r3, #4]
 80041c0:	f003 030c 	and.w	r3, r3, #12
 80041c4:	2b04      	cmp	r3, #4
 80041c6:	d00c      	beq.n	80041e2 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80041c8:	4b8f      	ldr	r3, [pc, #572]	; (8004408 <HAL_RCC_OscConfig+0x26c>)
 80041ca:	685b      	ldr	r3, [r3, #4]
 80041cc:	f003 030c 	and.w	r3, r3, #12
 80041d0:	2b08      	cmp	r3, #8
 80041d2:	d112      	bne.n	80041fa <HAL_RCC_OscConfig+0x5e>
 80041d4:	4b8c      	ldr	r3, [pc, #560]	; (8004408 <HAL_RCC_OscConfig+0x26c>)
 80041d6:	685b      	ldr	r3, [r3, #4]
 80041d8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80041dc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80041e0:	d10b      	bne.n	80041fa <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80041e2:	4b89      	ldr	r3, [pc, #548]	; (8004408 <HAL_RCC_OscConfig+0x26c>)
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80041ea:	2b00      	cmp	r3, #0
 80041ec:	d06c      	beq.n	80042c8 <HAL_RCC_OscConfig+0x12c>
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	685b      	ldr	r3, [r3, #4]
 80041f2:	2b00      	cmp	r3, #0
 80041f4:	d168      	bne.n	80042c8 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80041f6:	2301      	movs	r3, #1
 80041f8:	e24c      	b.n	8004694 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	685b      	ldr	r3, [r3, #4]
 80041fe:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004202:	d106      	bne.n	8004212 <HAL_RCC_OscConfig+0x76>
 8004204:	4b80      	ldr	r3, [pc, #512]	; (8004408 <HAL_RCC_OscConfig+0x26c>)
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	4a7f      	ldr	r2, [pc, #508]	; (8004408 <HAL_RCC_OscConfig+0x26c>)
 800420a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800420e:	6013      	str	r3, [r2, #0]
 8004210:	e02e      	b.n	8004270 <HAL_RCC_OscConfig+0xd4>
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	685b      	ldr	r3, [r3, #4]
 8004216:	2b00      	cmp	r3, #0
 8004218:	d10c      	bne.n	8004234 <HAL_RCC_OscConfig+0x98>
 800421a:	4b7b      	ldr	r3, [pc, #492]	; (8004408 <HAL_RCC_OscConfig+0x26c>)
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	4a7a      	ldr	r2, [pc, #488]	; (8004408 <HAL_RCC_OscConfig+0x26c>)
 8004220:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004224:	6013      	str	r3, [r2, #0]
 8004226:	4b78      	ldr	r3, [pc, #480]	; (8004408 <HAL_RCC_OscConfig+0x26c>)
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	4a77      	ldr	r2, [pc, #476]	; (8004408 <HAL_RCC_OscConfig+0x26c>)
 800422c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004230:	6013      	str	r3, [r2, #0]
 8004232:	e01d      	b.n	8004270 <HAL_RCC_OscConfig+0xd4>
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	685b      	ldr	r3, [r3, #4]
 8004238:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800423c:	d10c      	bne.n	8004258 <HAL_RCC_OscConfig+0xbc>
 800423e:	4b72      	ldr	r3, [pc, #456]	; (8004408 <HAL_RCC_OscConfig+0x26c>)
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	4a71      	ldr	r2, [pc, #452]	; (8004408 <HAL_RCC_OscConfig+0x26c>)
 8004244:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004248:	6013      	str	r3, [r2, #0]
 800424a:	4b6f      	ldr	r3, [pc, #444]	; (8004408 <HAL_RCC_OscConfig+0x26c>)
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	4a6e      	ldr	r2, [pc, #440]	; (8004408 <HAL_RCC_OscConfig+0x26c>)
 8004250:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004254:	6013      	str	r3, [r2, #0]
 8004256:	e00b      	b.n	8004270 <HAL_RCC_OscConfig+0xd4>
 8004258:	4b6b      	ldr	r3, [pc, #428]	; (8004408 <HAL_RCC_OscConfig+0x26c>)
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	4a6a      	ldr	r2, [pc, #424]	; (8004408 <HAL_RCC_OscConfig+0x26c>)
 800425e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004262:	6013      	str	r3, [r2, #0]
 8004264:	4b68      	ldr	r3, [pc, #416]	; (8004408 <HAL_RCC_OscConfig+0x26c>)
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	4a67      	ldr	r2, [pc, #412]	; (8004408 <HAL_RCC_OscConfig+0x26c>)
 800426a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800426e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	685b      	ldr	r3, [r3, #4]
 8004274:	2b00      	cmp	r3, #0
 8004276:	d013      	beq.n	80042a0 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004278:	f7ff f834 	bl	80032e4 <HAL_GetTick>
 800427c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800427e:	e008      	b.n	8004292 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004280:	f7ff f830 	bl	80032e4 <HAL_GetTick>
 8004284:	4602      	mov	r2, r0
 8004286:	693b      	ldr	r3, [r7, #16]
 8004288:	1ad3      	subs	r3, r2, r3
 800428a:	2b64      	cmp	r3, #100	; 0x64
 800428c:	d901      	bls.n	8004292 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800428e:	2303      	movs	r3, #3
 8004290:	e200      	b.n	8004694 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004292:	4b5d      	ldr	r3, [pc, #372]	; (8004408 <HAL_RCC_OscConfig+0x26c>)
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800429a:	2b00      	cmp	r3, #0
 800429c:	d0f0      	beq.n	8004280 <HAL_RCC_OscConfig+0xe4>
 800429e:	e014      	b.n	80042ca <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80042a0:	f7ff f820 	bl	80032e4 <HAL_GetTick>
 80042a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80042a6:	e008      	b.n	80042ba <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80042a8:	f7ff f81c 	bl	80032e4 <HAL_GetTick>
 80042ac:	4602      	mov	r2, r0
 80042ae:	693b      	ldr	r3, [r7, #16]
 80042b0:	1ad3      	subs	r3, r2, r3
 80042b2:	2b64      	cmp	r3, #100	; 0x64
 80042b4:	d901      	bls.n	80042ba <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80042b6:	2303      	movs	r3, #3
 80042b8:	e1ec      	b.n	8004694 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80042ba:	4b53      	ldr	r3, [pc, #332]	; (8004408 <HAL_RCC_OscConfig+0x26c>)
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80042c2:	2b00      	cmp	r3, #0
 80042c4:	d1f0      	bne.n	80042a8 <HAL_RCC_OscConfig+0x10c>
 80042c6:	e000      	b.n	80042ca <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80042c8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	f003 0302 	and.w	r3, r3, #2
 80042d2:	2b00      	cmp	r3, #0
 80042d4:	d063      	beq.n	800439e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80042d6:	4b4c      	ldr	r3, [pc, #304]	; (8004408 <HAL_RCC_OscConfig+0x26c>)
 80042d8:	685b      	ldr	r3, [r3, #4]
 80042da:	f003 030c 	and.w	r3, r3, #12
 80042de:	2b00      	cmp	r3, #0
 80042e0:	d00b      	beq.n	80042fa <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80042e2:	4b49      	ldr	r3, [pc, #292]	; (8004408 <HAL_RCC_OscConfig+0x26c>)
 80042e4:	685b      	ldr	r3, [r3, #4]
 80042e6:	f003 030c 	and.w	r3, r3, #12
 80042ea:	2b08      	cmp	r3, #8
 80042ec:	d11c      	bne.n	8004328 <HAL_RCC_OscConfig+0x18c>
 80042ee:	4b46      	ldr	r3, [pc, #280]	; (8004408 <HAL_RCC_OscConfig+0x26c>)
 80042f0:	685b      	ldr	r3, [r3, #4]
 80042f2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80042f6:	2b00      	cmp	r3, #0
 80042f8:	d116      	bne.n	8004328 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80042fa:	4b43      	ldr	r3, [pc, #268]	; (8004408 <HAL_RCC_OscConfig+0x26c>)
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	f003 0302 	and.w	r3, r3, #2
 8004302:	2b00      	cmp	r3, #0
 8004304:	d005      	beq.n	8004312 <HAL_RCC_OscConfig+0x176>
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	691b      	ldr	r3, [r3, #16]
 800430a:	2b01      	cmp	r3, #1
 800430c:	d001      	beq.n	8004312 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800430e:	2301      	movs	r3, #1
 8004310:	e1c0      	b.n	8004694 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004312:	4b3d      	ldr	r3, [pc, #244]	; (8004408 <HAL_RCC_OscConfig+0x26c>)
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	695b      	ldr	r3, [r3, #20]
 800431e:	00db      	lsls	r3, r3, #3
 8004320:	4939      	ldr	r1, [pc, #228]	; (8004408 <HAL_RCC_OscConfig+0x26c>)
 8004322:	4313      	orrs	r3, r2
 8004324:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004326:	e03a      	b.n	800439e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	691b      	ldr	r3, [r3, #16]
 800432c:	2b00      	cmp	r3, #0
 800432e:	d020      	beq.n	8004372 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004330:	4b36      	ldr	r3, [pc, #216]	; (800440c <HAL_RCC_OscConfig+0x270>)
 8004332:	2201      	movs	r2, #1
 8004334:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004336:	f7fe ffd5 	bl	80032e4 <HAL_GetTick>
 800433a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800433c:	e008      	b.n	8004350 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800433e:	f7fe ffd1 	bl	80032e4 <HAL_GetTick>
 8004342:	4602      	mov	r2, r0
 8004344:	693b      	ldr	r3, [r7, #16]
 8004346:	1ad3      	subs	r3, r2, r3
 8004348:	2b02      	cmp	r3, #2
 800434a:	d901      	bls.n	8004350 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 800434c:	2303      	movs	r3, #3
 800434e:	e1a1      	b.n	8004694 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004350:	4b2d      	ldr	r3, [pc, #180]	; (8004408 <HAL_RCC_OscConfig+0x26c>)
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	f003 0302 	and.w	r3, r3, #2
 8004358:	2b00      	cmp	r3, #0
 800435a:	d0f0      	beq.n	800433e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800435c:	4b2a      	ldr	r3, [pc, #168]	; (8004408 <HAL_RCC_OscConfig+0x26c>)
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	695b      	ldr	r3, [r3, #20]
 8004368:	00db      	lsls	r3, r3, #3
 800436a:	4927      	ldr	r1, [pc, #156]	; (8004408 <HAL_RCC_OscConfig+0x26c>)
 800436c:	4313      	orrs	r3, r2
 800436e:	600b      	str	r3, [r1, #0]
 8004370:	e015      	b.n	800439e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004372:	4b26      	ldr	r3, [pc, #152]	; (800440c <HAL_RCC_OscConfig+0x270>)
 8004374:	2200      	movs	r2, #0
 8004376:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004378:	f7fe ffb4 	bl	80032e4 <HAL_GetTick>
 800437c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800437e:	e008      	b.n	8004392 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004380:	f7fe ffb0 	bl	80032e4 <HAL_GetTick>
 8004384:	4602      	mov	r2, r0
 8004386:	693b      	ldr	r3, [r7, #16]
 8004388:	1ad3      	subs	r3, r2, r3
 800438a:	2b02      	cmp	r3, #2
 800438c:	d901      	bls.n	8004392 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800438e:	2303      	movs	r3, #3
 8004390:	e180      	b.n	8004694 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004392:	4b1d      	ldr	r3, [pc, #116]	; (8004408 <HAL_RCC_OscConfig+0x26c>)
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	f003 0302 	and.w	r3, r3, #2
 800439a:	2b00      	cmp	r3, #0
 800439c:	d1f0      	bne.n	8004380 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	f003 0308 	and.w	r3, r3, #8
 80043a6:	2b00      	cmp	r3, #0
 80043a8:	d03a      	beq.n	8004420 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	699b      	ldr	r3, [r3, #24]
 80043ae:	2b00      	cmp	r3, #0
 80043b0:	d019      	beq.n	80043e6 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80043b2:	4b17      	ldr	r3, [pc, #92]	; (8004410 <HAL_RCC_OscConfig+0x274>)
 80043b4:	2201      	movs	r2, #1
 80043b6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80043b8:	f7fe ff94 	bl	80032e4 <HAL_GetTick>
 80043bc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80043be:	e008      	b.n	80043d2 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80043c0:	f7fe ff90 	bl	80032e4 <HAL_GetTick>
 80043c4:	4602      	mov	r2, r0
 80043c6:	693b      	ldr	r3, [r7, #16]
 80043c8:	1ad3      	subs	r3, r2, r3
 80043ca:	2b02      	cmp	r3, #2
 80043cc:	d901      	bls.n	80043d2 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80043ce:	2303      	movs	r3, #3
 80043d0:	e160      	b.n	8004694 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80043d2:	4b0d      	ldr	r3, [pc, #52]	; (8004408 <HAL_RCC_OscConfig+0x26c>)
 80043d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043d6:	f003 0302 	and.w	r3, r3, #2
 80043da:	2b00      	cmp	r3, #0
 80043dc:	d0f0      	beq.n	80043c0 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80043de:	2001      	movs	r0, #1
 80043e0:	f000 fac4 	bl	800496c <RCC_Delay>
 80043e4:	e01c      	b.n	8004420 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80043e6:	4b0a      	ldr	r3, [pc, #40]	; (8004410 <HAL_RCC_OscConfig+0x274>)
 80043e8:	2200      	movs	r2, #0
 80043ea:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80043ec:	f7fe ff7a 	bl	80032e4 <HAL_GetTick>
 80043f0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80043f2:	e00f      	b.n	8004414 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80043f4:	f7fe ff76 	bl	80032e4 <HAL_GetTick>
 80043f8:	4602      	mov	r2, r0
 80043fa:	693b      	ldr	r3, [r7, #16]
 80043fc:	1ad3      	subs	r3, r2, r3
 80043fe:	2b02      	cmp	r3, #2
 8004400:	d908      	bls.n	8004414 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8004402:	2303      	movs	r3, #3
 8004404:	e146      	b.n	8004694 <HAL_RCC_OscConfig+0x4f8>
 8004406:	bf00      	nop
 8004408:	40021000 	.word	0x40021000
 800440c:	42420000 	.word	0x42420000
 8004410:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004414:	4b92      	ldr	r3, [pc, #584]	; (8004660 <HAL_RCC_OscConfig+0x4c4>)
 8004416:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004418:	f003 0302 	and.w	r3, r3, #2
 800441c:	2b00      	cmp	r3, #0
 800441e:	d1e9      	bne.n	80043f4 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	f003 0304 	and.w	r3, r3, #4
 8004428:	2b00      	cmp	r3, #0
 800442a:	f000 80a6 	beq.w	800457a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800442e:	2300      	movs	r3, #0
 8004430:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004432:	4b8b      	ldr	r3, [pc, #556]	; (8004660 <HAL_RCC_OscConfig+0x4c4>)
 8004434:	69db      	ldr	r3, [r3, #28]
 8004436:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800443a:	2b00      	cmp	r3, #0
 800443c:	d10d      	bne.n	800445a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800443e:	4b88      	ldr	r3, [pc, #544]	; (8004660 <HAL_RCC_OscConfig+0x4c4>)
 8004440:	69db      	ldr	r3, [r3, #28]
 8004442:	4a87      	ldr	r2, [pc, #540]	; (8004660 <HAL_RCC_OscConfig+0x4c4>)
 8004444:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004448:	61d3      	str	r3, [r2, #28]
 800444a:	4b85      	ldr	r3, [pc, #532]	; (8004660 <HAL_RCC_OscConfig+0x4c4>)
 800444c:	69db      	ldr	r3, [r3, #28]
 800444e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004452:	60bb      	str	r3, [r7, #8]
 8004454:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004456:	2301      	movs	r3, #1
 8004458:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800445a:	4b82      	ldr	r3, [pc, #520]	; (8004664 <HAL_RCC_OscConfig+0x4c8>)
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004462:	2b00      	cmp	r3, #0
 8004464:	d118      	bne.n	8004498 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004466:	4b7f      	ldr	r3, [pc, #508]	; (8004664 <HAL_RCC_OscConfig+0x4c8>)
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	4a7e      	ldr	r2, [pc, #504]	; (8004664 <HAL_RCC_OscConfig+0x4c8>)
 800446c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004470:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004472:	f7fe ff37 	bl	80032e4 <HAL_GetTick>
 8004476:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004478:	e008      	b.n	800448c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800447a:	f7fe ff33 	bl	80032e4 <HAL_GetTick>
 800447e:	4602      	mov	r2, r0
 8004480:	693b      	ldr	r3, [r7, #16]
 8004482:	1ad3      	subs	r3, r2, r3
 8004484:	2b64      	cmp	r3, #100	; 0x64
 8004486:	d901      	bls.n	800448c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8004488:	2303      	movs	r3, #3
 800448a:	e103      	b.n	8004694 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800448c:	4b75      	ldr	r3, [pc, #468]	; (8004664 <HAL_RCC_OscConfig+0x4c8>)
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004494:	2b00      	cmp	r3, #0
 8004496:	d0f0      	beq.n	800447a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	68db      	ldr	r3, [r3, #12]
 800449c:	2b01      	cmp	r3, #1
 800449e:	d106      	bne.n	80044ae <HAL_RCC_OscConfig+0x312>
 80044a0:	4b6f      	ldr	r3, [pc, #444]	; (8004660 <HAL_RCC_OscConfig+0x4c4>)
 80044a2:	6a1b      	ldr	r3, [r3, #32]
 80044a4:	4a6e      	ldr	r2, [pc, #440]	; (8004660 <HAL_RCC_OscConfig+0x4c4>)
 80044a6:	f043 0301 	orr.w	r3, r3, #1
 80044aa:	6213      	str	r3, [r2, #32]
 80044ac:	e02d      	b.n	800450a <HAL_RCC_OscConfig+0x36e>
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	68db      	ldr	r3, [r3, #12]
 80044b2:	2b00      	cmp	r3, #0
 80044b4:	d10c      	bne.n	80044d0 <HAL_RCC_OscConfig+0x334>
 80044b6:	4b6a      	ldr	r3, [pc, #424]	; (8004660 <HAL_RCC_OscConfig+0x4c4>)
 80044b8:	6a1b      	ldr	r3, [r3, #32]
 80044ba:	4a69      	ldr	r2, [pc, #420]	; (8004660 <HAL_RCC_OscConfig+0x4c4>)
 80044bc:	f023 0301 	bic.w	r3, r3, #1
 80044c0:	6213      	str	r3, [r2, #32]
 80044c2:	4b67      	ldr	r3, [pc, #412]	; (8004660 <HAL_RCC_OscConfig+0x4c4>)
 80044c4:	6a1b      	ldr	r3, [r3, #32]
 80044c6:	4a66      	ldr	r2, [pc, #408]	; (8004660 <HAL_RCC_OscConfig+0x4c4>)
 80044c8:	f023 0304 	bic.w	r3, r3, #4
 80044cc:	6213      	str	r3, [r2, #32]
 80044ce:	e01c      	b.n	800450a <HAL_RCC_OscConfig+0x36e>
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	68db      	ldr	r3, [r3, #12]
 80044d4:	2b05      	cmp	r3, #5
 80044d6:	d10c      	bne.n	80044f2 <HAL_RCC_OscConfig+0x356>
 80044d8:	4b61      	ldr	r3, [pc, #388]	; (8004660 <HAL_RCC_OscConfig+0x4c4>)
 80044da:	6a1b      	ldr	r3, [r3, #32]
 80044dc:	4a60      	ldr	r2, [pc, #384]	; (8004660 <HAL_RCC_OscConfig+0x4c4>)
 80044de:	f043 0304 	orr.w	r3, r3, #4
 80044e2:	6213      	str	r3, [r2, #32]
 80044e4:	4b5e      	ldr	r3, [pc, #376]	; (8004660 <HAL_RCC_OscConfig+0x4c4>)
 80044e6:	6a1b      	ldr	r3, [r3, #32]
 80044e8:	4a5d      	ldr	r2, [pc, #372]	; (8004660 <HAL_RCC_OscConfig+0x4c4>)
 80044ea:	f043 0301 	orr.w	r3, r3, #1
 80044ee:	6213      	str	r3, [r2, #32]
 80044f0:	e00b      	b.n	800450a <HAL_RCC_OscConfig+0x36e>
 80044f2:	4b5b      	ldr	r3, [pc, #364]	; (8004660 <HAL_RCC_OscConfig+0x4c4>)
 80044f4:	6a1b      	ldr	r3, [r3, #32]
 80044f6:	4a5a      	ldr	r2, [pc, #360]	; (8004660 <HAL_RCC_OscConfig+0x4c4>)
 80044f8:	f023 0301 	bic.w	r3, r3, #1
 80044fc:	6213      	str	r3, [r2, #32]
 80044fe:	4b58      	ldr	r3, [pc, #352]	; (8004660 <HAL_RCC_OscConfig+0x4c4>)
 8004500:	6a1b      	ldr	r3, [r3, #32]
 8004502:	4a57      	ldr	r2, [pc, #348]	; (8004660 <HAL_RCC_OscConfig+0x4c4>)
 8004504:	f023 0304 	bic.w	r3, r3, #4
 8004508:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	68db      	ldr	r3, [r3, #12]
 800450e:	2b00      	cmp	r3, #0
 8004510:	d015      	beq.n	800453e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004512:	f7fe fee7 	bl	80032e4 <HAL_GetTick>
 8004516:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004518:	e00a      	b.n	8004530 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800451a:	f7fe fee3 	bl	80032e4 <HAL_GetTick>
 800451e:	4602      	mov	r2, r0
 8004520:	693b      	ldr	r3, [r7, #16]
 8004522:	1ad3      	subs	r3, r2, r3
 8004524:	f241 3288 	movw	r2, #5000	; 0x1388
 8004528:	4293      	cmp	r3, r2
 800452a:	d901      	bls.n	8004530 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 800452c:	2303      	movs	r3, #3
 800452e:	e0b1      	b.n	8004694 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004530:	4b4b      	ldr	r3, [pc, #300]	; (8004660 <HAL_RCC_OscConfig+0x4c4>)
 8004532:	6a1b      	ldr	r3, [r3, #32]
 8004534:	f003 0302 	and.w	r3, r3, #2
 8004538:	2b00      	cmp	r3, #0
 800453a:	d0ee      	beq.n	800451a <HAL_RCC_OscConfig+0x37e>
 800453c:	e014      	b.n	8004568 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800453e:	f7fe fed1 	bl	80032e4 <HAL_GetTick>
 8004542:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004544:	e00a      	b.n	800455c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004546:	f7fe fecd 	bl	80032e4 <HAL_GetTick>
 800454a:	4602      	mov	r2, r0
 800454c:	693b      	ldr	r3, [r7, #16]
 800454e:	1ad3      	subs	r3, r2, r3
 8004550:	f241 3288 	movw	r2, #5000	; 0x1388
 8004554:	4293      	cmp	r3, r2
 8004556:	d901      	bls.n	800455c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8004558:	2303      	movs	r3, #3
 800455a:	e09b      	b.n	8004694 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800455c:	4b40      	ldr	r3, [pc, #256]	; (8004660 <HAL_RCC_OscConfig+0x4c4>)
 800455e:	6a1b      	ldr	r3, [r3, #32]
 8004560:	f003 0302 	and.w	r3, r3, #2
 8004564:	2b00      	cmp	r3, #0
 8004566:	d1ee      	bne.n	8004546 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8004568:	7dfb      	ldrb	r3, [r7, #23]
 800456a:	2b01      	cmp	r3, #1
 800456c:	d105      	bne.n	800457a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800456e:	4b3c      	ldr	r3, [pc, #240]	; (8004660 <HAL_RCC_OscConfig+0x4c4>)
 8004570:	69db      	ldr	r3, [r3, #28]
 8004572:	4a3b      	ldr	r2, [pc, #236]	; (8004660 <HAL_RCC_OscConfig+0x4c4>)
 8004574:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004578:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	69db      	ldr	r3, [r3, #28]
 800457e:	2b00      	cmp	r3, #0
 8004580:	f000 8087 	beq.w	8004692 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004584:	4b36      	ldr	r3, [pc, #216]	; (8004660 <HAL_RCC_OscConfig+0x4c4>)
 8004586:	685b      	ldr	r3, [r3, #4]
 8004588:	f003 030c 	and.w	r3, r3, #12
 800458c:	2b08      	cmp	r3, #8
 800458e:	d061      	beq.n	8004654 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	69db      	ldr	r3, [r3, #28]
 8004594:	2b02      	cmp	r3, #2
 8004596:	d146      	bne.n	8004626 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004598:	4b33      	ldr	r3, [pc, #204]	; (8004668 <HAL_RCC_OscConfig+0x4cc>)
 800459a:	2200      	movs	r2, #0
 800459c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800459e:	f7fe fea1 	bl	80032e4 <HAL_GetTick>
 80045a2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80045a4:	e008      	b.n	80045b8 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80045a6:	f7fe fe9d 	bl	80032e4 <HAL_GetTick>
 80045aa:	4602      	mov	r2, r0
 80045ac:	693b      	ldr	r3, [r7, #16]
 80045ae:	1ad3      	subs	r3, r2, r3
 80045b0:	2b02      	cmp	r3, #2
 80045b2:	d901      	bls.n	80045b8 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80045b4:	2303      	movs	r3, #3
 80045b6:	e06d      	b.n	8004694 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80045b8:	4b29      	ldr	r3, [pc, #164]	; (8004660 <HAL_RCC_OscConfig+0x4c4>)
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80045c0:	2b00      	cmp	r3, #0
 80045c2:	d1f0      	bne.n	80045a6 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	6a1b      	ldr	r3, [r3, #32]
 80045c8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80045cc:	d108      	bne.n	80045e0 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80045ce:	4b24      	ldr	r3, [pc, #144]	; (8004660 <HAL_RCC_OscConfig+0x4c4>)
 80045d0:	685b      	ldr	r3, [r3, #4]
 80045d2:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	689b      	ldr	r3, [r3, #8]
 80045da:	4921      	ldr	r1, [pc, #132]	; (8004660 <HAL_RCC_OscConfig+0x4c4>)
 80045dc:	4313      	orrs	r3, r2
 80045de:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80045e0:	4b1f      	ldr	r3, [pc, #124]	; (8004660 <HAL_RCC_OscConfig+0x4c4>)
 80045e2:	685b      	ldr	r3, [r3, #4]
 80045e4:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	6a19      	ldr	r1, [r3, #32]
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045f0:	430b      	orrs	r3, r1
 80045f2:	491b      	ldr	r1, [pc, #108]	; (8004660 <HAL_RCC_OscConfig+0x4c4>)
 80045f4:	4313      	orrs	r3, r2
 80045f6:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80045f8:	4b1b      	ldr	r3, [pc, #108]	; (8004668 <HAL_RCC_OscConfig+0x4cc>)
 80045fa:	2201      	movs	r2, #1
 80045fc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80045fe:	f7fe fe71 	bl	80032e4 <HAL_GetTick>
 8004602:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004604:	e008      	b.n	8004618 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004606:	f7fe fe6d 	bl	80032e4 <HAL_GetTick>
 800460a:	4602      	mov	r2, r0
 800460c:	693b      	ldr	r3, [r7, #16]
 800460e:	1ad3      	subs	r3, r2, r3
 8004610:	2b02      	cmp	r3, #2
 8004612:	d901      	bls.n	8004618 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8004614:	2303      	movs	r3, #3
 8004616:	e03d      	b.n	8004694 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004618:	4b11      	ldr	r3, [pc, #68]	; (8004660 <HAL_RCC_OscConfig+0x4c4>)
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004620:	2b00      	cmp	r3, #0
 8004622:	d0f0      	beq.n	8004606 <HAL_RCC_OscConfig+0x46a>
 8004624:	e035      	b.n	8004692 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004626:	4b10      	ldr	r3, [pc, #64]	; (8004668 <HAL_RCC_OscConfig+0x4cc>)
 8004628:	2200      	movs	r2, #0
 800462a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800462c:	f7fe fe5a 	bl	80032e4 <HAL_GetTick>
 8004630:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004632:	e008      	b.n	8004646 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004634:	f7fe fe56 	bl	80032e4 <HAL_GetTick>
 8004638:	4602      	mov	r2, r0
 800463a:	693b      	ldr	r3, [r7, #16]
 800463c:	1ad3      	subs	r3, r2, r3
 800463e:	2b02      	cmp	r3, #2
 8004640:	d901      	bls.n	8004646 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8004642:	2303      	movs	r3, #3
 8004644:	e026      	b.n	8004694 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004646:	4b06      	ldr	r3, [pc, #24]	; (8004660 <HAL_RCC_OscConfig+0x4c4>)
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800464e:	2b00      	cmp	r3, #0
 8004650:	d1f0      	bne.n	8004634 <HAL_RCC_OscConfig+0x498>
 8004652:	e01e      	b.n	8004692 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	69db      	ldr	r3, [r3, #28]
 8004658:	2b01      	cmp	r3, #1
 800465a:	d107      	bne.n	800466c <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 800465c:	2301      	movs	r3, #1
 800465e:	e019      	b.n	8004694 <HAL_RCC_OscConfig+0x4f8>
 8004660:	40021000 	.word	0x40021000
 8004664:	40007000 	.word	0x40007000
 8004668:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800466c:	4b0b      	ldr	r3, [pc, #44]	; (800469c <HAL_RCC_OscConfig+0x500>)
 800466e:	685b      	ldr	r3, [r3, #4]
 8004670:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004672:	68fb      	ldr	r3, [r7, #12]
 8004674:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	6a1b      	ldr	r3, [r3, #32]
 800467c:	429a      	cmp	r2, r3
 800467e:	d106      	bne.n	800468e <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8004680:	68fb      	ldr	r3, [r7, #12]
 8004682:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800468a:	429a      	cmp	r2, r3
 800468c:	d001      	beq.n	8004692 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800468e:	2301      	movs	r3, #1
 8004690:	e000      	b.n	8004694 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8004692:	2300      	movs	r3, #0
}
 8004694:	4618      	mov	r0, r3
 8004696:	3718      	adds	r7, #24
 8004698:	46bd      	mov	sp, r7
 800469a:	bd80      	pop	{r7, pc}
 800469c:	40021000 	.word	0x40021000

080046a0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80046a0:	b580      	push	{r7, lr}
 80046a2:	b084      	sub	sp, #16
 80046a4:	af00      	add	r7, sp, #0
 80046a6:	6078      	str	r0, [r7, #4]
 80046a8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	2b00      	cmp	r3, #0
 80046ae:	d101      	bne.n	80046b4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80046b0:	2301      	movs	r3, #1
 80046b2:	e0d0      	b.n	8004856 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80046b4:	4b6a      	ldr	r3, [pc, #424]	; (8004860 <HAL_RCC_ClockConfig+0x1c0>)
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	f003 0307 	and.w	r3, r3, #7
 80046bc:	683a      	ldr	r2, [r7, #0]
 80046be:	429a      	cmp	r2, r3
 80046c0:	d910      	bls.n	80046e4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80046c2:	4b67      	ldr	r3, [pc, #412]	; (8004860 <HAL_RCC_ClockConfig+0x1c0>)
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	f023 0207 	bic.w	r2, r3, #7
 80046ca:	4965      	ldr	r1, [pc, #404]	; (8004860 <HAL_RCC_ClockConfig+0x1c0>)
 80046cc:	683b      	ldr	r3, [r7, #0]
 80046ce:	4313      	orrs	r3, r2
 80046d0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80046d2:	4b63      	ldr	r3, [pc, #396]	; (8004860 <HAL_RCC_ClockConfig+0x1c0>)
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	f003 0307 	and.w	r3, r3, #7
 80046da:	683a      	ldr	r2, [r7, #0]
 80046dc:	429a      	cmp	r2, r3
 80046de:	d001      	beq.n	80046e4 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80046e0:	2301      	movs	r3, #1
 80046e2:	e0b8      	b.n	8004856 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	f003 0302 	and.w	r3, r3, #2
 80046ec:	2b00      	cmp	r3, #0
 80046ee:	d020      	beq.n	8004732 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	f003 0304 	and.w	r3, r3, #4
 80046f8:	2b00      	cmp	r3, #0
 80046fa:	d005      	beq.n	8004708 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80046fc:	4b59      	ldr	r3, [pc, #356]	; (8004864 <HAL_RCC_ClockConfig+0x1c4>)
 80046fe:	685b      	ldr	r3, [r3, #4]
 8004700:	4a58      	ldr	r2, [pc, #352]	; (8004864 <HAL_RCC_ClockConfig+0x1c4>)
 8004702:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8004706:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	f003 0308 	and.w	r3, r3, #8
 8004710:	2b00      	cmp	r3, #0
 8004712:	d005      	beq.n	8004720 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004714:	4b53      	ldr	r3, [pc, #332]	; (8004864 <HAL_RCC_ClockConfig+0x1c4>)
 8004716:	685b      	ldr	r3, [r3, #4]
 8004718:	4a52      	ldr	r2, [pc, #328]	; (8004864 <HAL_RCC_ClockConfig+0x1c4>)
 800471a:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800471e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004720:	4b50      	ldr	r3, [pc, #320]	; (8004864 <HAL_RCC_ClockConfig+0x1c4>)
 8004722:	685b      	ldr	r3, [r3, #4]
 8004724:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	689b      	ldr	r3, [r3, #8]
 800472c:	494d      	ldr	r1, [pc, #308]	; (8004864 <HAL_RCC_ClockConfig+0x1c4>)
 800472e:	4313      	orrs	r3, r2
 8004730:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	f003 0301 	and.w	r3, r3, #1
 800473a:	2b00      	cmp	r3, #0
 800473c:	d040      	beq.n	80047c0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	685b      	ldr	r3, [r3, #4]
 8004742:	2b01      	cmp	r3, #1
 8004744:	d107      	bne.n	8004756 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004746:	4b47      	ldr	r3, [pc, #284]	; (8004864 <HAL_RCC_ClockConfig+0x1c4>)
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800474e:	2b00      	cmp	r3, #0
 8004750:	d115      	bne.n	800477e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004752:	2301      	movs	r3, #1
 8004754:	e07f      	b.n	8004856 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	685b      	ldr	r3, [r3, #4]
 800475a:	2b02      	cmp	r3, #2
 800475c:	d107      	bne.n	800476e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800475e:	4b41      	ldr	r3, [pc, #260]	; (8004864 <HAL_RCC_ClockConfig+0x1c4>)
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004766:	2b00      	cmp	r3, #0
 8004768:	d109      	bne.n	800477e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800476a:	2301      	movs	r3, #1
 800476c:	e073      	b.n	8004856 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800476e:	4b3d      	ldr	r3, [pc, #244]	; (8004864 <HAL_RCC_ClockConfig+0x1c4>)
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	f003 0302 	and.w	r3, r3, #2
 8004776:	2b00      	cmp	r3, #0
 8004778:	d101      	bne.n	800477e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800477a:	2301      	movs	r3, #1
 800477c:	e06b      	b.n	8004856 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800477e:	4b39      	ldr	r3, [pc, #228]	; (8004864 <HAL_RCC_ClockConfig+0x1c4>)
 8004780:	685b      	ldr	r3, [r3, #4]
 8004782:	f023 0203 	bic.w	r2, r3, #3
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	685b      	ldr	r3, [r3, #4]
 800478a:	4936      	ldr	r1, [pc, #216]	; (8004864 <HAL_RCC_ClockConfig+0x1c4>)
 800478c:	4313      	orrs	r3, r2
 800478e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004790:	f7fe fda8 	bl	80032e4 <HAL_GetTick>
 8004794:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004796:	e00a      	b.n	80047ae <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004798:	f7fe fda4 	bl	80032e4 <HAL_GetTick>
 800479c:	4602      	mov	r2, r0
 800479e:	68fb      	ldr	r3, [r7, #12]
 80047a0:	1ad3      	subs	r3, r2, r3
 80047a2:	f241 3288 	movw	r2, #5000	; 0x1388
 80047a6:	4293      	cmp	r3, r2
 80047a8:	d901      	bls.n	80047ae <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80047aa:	2303      	movs	r3, #3
 80047ac:	e053      	b.n	8004856 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80047ae:	4b2d      	ldr	r3, [pc, #180]	; (8004864 <HAL_RCC_ClockConfig+0x1c4>)
 80047b0:	685b      	ldr	r3, [r3, #4]
 80047b2:	f003 020c 	and.w	r2, r3, #12
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	685b      	ldr	r3, [r3, #4]
 80047ba:	009b      	lsls	r3, r3, #2
 80047bc:	429a      	cmp	r2, r3
 80047be:	d1eb      	bne.n	8004798 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80047c0:	4b27      	ldr	r3, [pc, #156]	; (8004860 <HAL_RCC_ClockConfig+0x1c0>)
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	f003 0307 	and.w	r3, r3, #7
 80047c8:	683a      	ldr	r2, [r7, #0]
 80047ca:	429a      	cmp	r2, r3
 80047cc:	d210      	bcs.n	80047f0 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80047ce:	4b24      	ldr	r3, [pc, #144]	; (8004860 <HAL_RCC_ClockConfig+0x1c0>)
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	f023 0207 	bic.w	r2, r3, #7
 80047d6:	4922      	ldr	r1, [pc, #136]	; (8004860 <HAL_RCC_ClockConfig+0x1c0>)
 80047d8:	683b      	ldr	r3, [r7, #0]
 80047da:	4313      	orrs	r3, r2
 80047dc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80047de:	4b20      	ldr	r3, [pc, #128]	; (8004860 <HAL_RCC_ClockConfig+0x1c0>)
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	f003 0307 	and.w	r3, r3, #7
 80047e6:	683a      	ldr	r2, [r7, #0]
 80047e8:	429a      	cmp	r2, r3
 80047ea:	d001      	beq.n	80047f0 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80047ec:	2301      	movs	r3, #1
 80047ee:	e032      	b.n	8004856 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	f003 0304 	and.w	r3, r3, #4
 80047f8:	2b00      	cmp	r3, #0
 80047fa:	d008      	beq.n	800480e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80047fc:	4b19      	ldr	r3, [pc, #100]	; (8004864 <HAL_RCC_ClockConfig+0x1c4>)
 80047fe:	685b      	ldr	r3, [r3, #4]
 8004800:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	68db      	ldr	r3, [r3, #12]
 8004808:	4916      	ldr	r1, [pc, #88]	; (8004864 <HAL_RCC_ClockConfig+0x1c4>)
 800480a:	4313      	orrs	r3, r2
 800480c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	f003 0308 	and.w	r3, r3, #8
 8004816:	2b00      	cmp	r3, #0
 8004818:	d009      	beq.n	800482e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800481a:	4b12      	ldr	r3, [pc, #72]	; (8004864 <HAL_RCC_ClockConfig+0x1c4>)
 800481c:	685b      	ldr	r3, [r3, #4]
 800481e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	691b      	ldr	r3, [r3, #16]
 8004826:	00db      	lsls	r3, r3, #3
 8004828:	490e      	ldr	r1, [pc, #56]	; (8004864 <HAL_RCC_ClockConfig+0x1c4>)
 800482a:	4313      	orrs	r3, r2
 800482c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800482e:	f000 f821 	bl	8004874 <HAL_RCC_GetSysClockFreq>
 8004832:	4602      	mov	r2, r0
 8004834:	4b0b      	ldr	r3, [pc, #44]	; (8004864 <HAL_RCC_ClockConfig+0x1c4>)
 8004836:	685b      	ldr	r3, [r3, #4]
 8004838:	091b      	lsrs	r3, r3, #4
 800483a:	f003 030f 	and.w	r3, r3, #15
 800483e:	490a      	ldr	r1, [pc, #40]	; (8004868 <HAL_RCC_ClockConfig+0x1c8>)
 8004840:	5ccb      	ldrb	r3, [r1, r3]
 8004842:	fa22 f303 	lsr.w	r3, r2, r3
 8004846:	4a09      	ldr	r2, [pc, #36]	; (800486c <HAL_RCC_ClockConfig+0x1cc>)
 8004848:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800484a:	4b09      	ldr	r3, [pc, #36]	; (8004870 <HAL_RCC_ClockConfig+0x1d0>)
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	4618      	mov	r0, r3
 8004850:	f7fe fd06 	bl	8003260 <HAL_InitTick>

  return HAL_OK;
 8004854:	2300      	movs	r3, #0
}
 8004856:	4618      	mov	r0, r3
 8004858:	3710      	adds	r7, #16
 800485a:	46bd      	mov	sp, r7
 800485c:	bd80      	pop	{r7, pc}
 800485e:	bf00      	nop
 8004860:	40022000 	.word	0x40022000
 8004864:	40021000 	.word	0x40021000
 8004868:	08008e60 	.word	0x08008e60
 800486c:	20000020 	.word	0x20000020
 8004870:	20000024 	.word	0x20000024

08004874 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004874:	b490      	push	{r4, r7}
 8004876:	b08a      	sub	sp, #40	; 0x28
 8004878:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 800487a:	4b29      	ldr	r3, [pc, #164]	; (8004920 <HAL_RCC_GetSysClockFreq+0xac>)
 800487c:	1d3c      	adds	r4, r7, #4
 800487e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8004880:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8004884:	f240 2301 	movw	r3, #513	; 0x201
 8004888:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800488a:	2300      	movs	r3, #0
 800488c:	61fb      	str	r3, [r7, #28]
 800488e:	2300      	movs	r3, #0
 8004890:	61bb      	str	r3, [r7, #24]
 8004892:	2300      	movs	r3, #0
 8004894:	627b      	str	r3, [r7, #36]	; 0x24
 8004896:	2300      	movs	r3, #0
 8004898:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800489a:	2300      	movs	r3, #0
 800489c:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800489e:	4b21      	ldr	r3, [pc, #132]	; (8004924 <HAL_RCC_GetSysClockFreq+0xb0>)
 80048a0:	685b      	ldr	r3, [r3, #4]
 80048a2:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80048a4:	69fb      	ldr	r3, [r7, #28]
 80048a6:	f003 030c 	and.w	r3, r3, #12
 80048aa:	2b04      	cmp	r3, #4
 80048ac:	d002      	beq.n	80048b4 <HAL_RCC_GetSysClockFreq+0x40>
 80048ae:	2b08      	cmp	r3, #8
 80048b0:	d003      	beq.n	80048ba <HAL_RCC_GetSysClockFreq+0x46>
 80048b2:	e02b      	b.n	800490c <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80048b4:	4b1c      	ldr	r3, [pc, #112]	; (8004928 <HAL_RCC_GetSysClockFreq+0xb4>)
 80048b6:	623b      	str	r3, [r7, #32]
      break;
 80048b8:	e02b      	b.n	8004912 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80048ba:	69fb      	ldr	r3, [r7, #28]
 80048bc:	0c9b      	lsrs	r3, r3, #18
 80048be:	f003 030f 	and.w	r3, r3, #15
 80048c2:	3328      	adds	r3, #40	; 0x28
 80048c4:	443b      	add	r3, r7
 80048c6:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80048ca:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80048cc:	69fb      	ldr	r3, [r7, #28]
 80048ce:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80048d2:	2b00      	cmp	r3, #0
 80048d4:	d012      	beq.n	80048fc <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80048d6:	4b13      	ldr	r3, [pc, #76]	; (8004924 <HAL_RCC_GetSysClockFreq+0xb0>)
 80048d8:	685b      	ldr	r3, [r3, #4]
 80048da:	0c5b      	lsrs	r3, r3, #17
 80048dc:	f003 0301 	and.w	r3, r3, #1
 80048e0:	3328      	adds	r3, #40	; 0x28
 80048e2:	443b      	add	r3, r7
 80048e4:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80048e8:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80048ea:	697b      	ldr	r3, [r7, #20]
 80048ec:	4a0e      	ldr	r2, [pc, #56]	; (8004928 <HAL_RCC_GetSysClockFreq+0xb4>)
 80048ee:	fb03 f202 	mul.w	r2, r3, r2
 80048f2:	69bb      	ldr	r3, [r7, #24]
 80048f4:	fbb2 f3f3 	udiv	r3, r2, r3
 80048f8:	627b      	str	r3, [r7, #36]	; 0x24
 80048fa:	e004      	b.n	8004906 <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80048fc:	697b      	ldr	r3, [r7, #20]
 80048fe:	4a0b      	ldr	r2, [pc, #44]	; (800492c <HAL_RCC_GetSysClockFreq+0xb8>)
 8004900:	fb02 f303 	mul.w	r3, r2, r3
 8004904:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8004906:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004908:	623b      	str	r3, [r7, #32]
      break;
 800490a:	e002      	b.n	8004912 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800490c:	4b06      	ldr	r3, [pc, #24]	; (8004928 <HAL_RCC_GetSysClockFreq+0xb4>)
 800490e:	623b      	str	r3, [r7, #32]
      break;
 8004910:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004912:	6a3b      	ldr	r3, [r7, #32]
}
 8004914:	4618      	mov	r0, r3
 8004916:	3728      	adds	r7, #40	; 0x28
 8004918:	46bd      	mov	sp, r7
 800491a:	bc90      	pop	{r4, r7}
 800491c:	4770      	bx	lr
 800491e:	bf00      	nop
 8004920:	08008e50 	.word	0x08008e50
 8004924:	40021000 	.word	0x40021000
 8004928:	007a1200 	.word	0x007a1200
 800492c:	003d0900 	.word	0x003d0900

08004930 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004930:	b480      	push	{r7}
 8004932:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004934:	4b02      	ldr	r3, [pc, #8]	; (8004940 <HAL_RCC_GetHCLKFreq+0x10>)
 8004936:	681b      	ldr	r3, [r3, #0]
}
 8004938:	4618      	mov	r0, r3
 800493a:	46bd      	mov	sp, r7
 800493c:	bc80      	pop	{r7}
 800493e:	4770      	bx	lr
 8004940:	20000020 	.word	0x20000020

08004944 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004944:	b580      	push	{r7, lr}
 8004946:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004948:	f7ff fff2 	bl	8004930 <HAL_RCC_GetHCLKFreq>
 800494c:	4602      	mov	r2, r0
 800494e:	4b05      	ldr	r3, [pc, #20]	; (8004964 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004950:	685b      	ldr	r3, [r3, #4]
 8004952:	0a1b      	lsrs	r3, r3, #8
 8004954:	f003 0307 	and.w	r3, r3, #7
 8004958:	4903      	ldr	r1, [pc, #12]	; (8004968 <HAL_RCC_GetPCLK1Freq+0x24>)
 800495a:	5ccb      	ldrb	r3, [r1, r3]
 800495c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004960:	4618      	mov	r0, r3
 8004962:	bd80      	pop	{r7, pc}
 8004964:	40021000 	.word	0x40021000
 8004968:	08008e70 	.word	0x08008e70

0800496c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 800496c:	b480      	push	{r7}
 800496e:	b085      	sub	sp, #20
 8004970:	af00      	add	r7, sp, #0
 8004972:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8004974:	4b0a      	ldr	r3, [pc, #40]	; (80049a0 <RCC_Delay+0x34>)
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	4a0a      	ldr	r2, [pc, #40]	; (80049a4 <RCC_Delay+0x38>)
 800497a:	fba2 2303 	umull	r2, r3, r2, r3
 800497e:	0a5b      	lsrs	r3, r3, #9
 8004980:	687a      	ldr	r2, [r7, #4]
 8004982:	fb02 f303 	mul.w	r3, r2, r3
 8004986:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8004988:	bf00      	nop
  }
  while (Delay --);
 800498a:	68fb      	ldr	r3, [r7, #12]
 800498c:	1e5a      	subs	r2, r3, #1
 800498e:	60fa      	str	r2, [r7, #12]
 8004990:	2b00      	cmp	r3, #0
 8004992:	d1f9      	bne.n	8004988 <RCC_Delay+0x1c>
}
 8004994:	bf00      	nop
 8004996:	bf00      	nop
 8004998:	3714      	adds	r7, #20
 800499a:	46bd      	mov	sp, r7
 800499c:	bc80      	pop	{r7}
 800499e:	4770      	bx	lr
 80049a0:	20000020 	.word	0x20000020
 80049a4:	10624dd3 	.word	0x10624dd3

080049a8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80049a8:	b580      	push	{r7, lr}
 80049aa:	b082      	sub	sp, #8
 80049ac:	af00      	add	r7, sp, #0
 80049ae:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	2b00      	cmp	r3, #0
 80049b4:	d101      	bne.n	80049ba <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80049b6:	2301      	movs	r3, #1
 80049b8:	e076      	b.n	8004aa8 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049be:	2b00      	cmp	r3, #0
 80049c0:	d108      	bne.n	80049d4 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	685b      	ldr	r3, [r3, #4]
 80049c6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80049ca:	d009      	beq.n	80049e0 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	2200      	movs	r2, #0
 80049d0:	61da      	str	r2, [r3, #28]
 80049d2:	e005      	b.n	80049e0 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	2200      	movs	r2, #0
 80049d8:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	2200      	movs	r2, #0
 80049de:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	2200      	movs	r2, #0
 80049e4:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80049ec:	b2db      	uxtb	r3, r3
 80049ee:	2b00      	cmp	r3, #0
 80049f0:	d106      	bne.n	8004a00 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	2200      	movs	r2, #0
 80049f6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80049fa:	6878      	ldr	r0, [r7, #4]
 80049fc:	f7fe fa1c 	bl	8002e38 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	2202      	movs	r2, #2
 8004a04:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	681a      	ldr	r2, [r3, #0]
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004a16:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	685b      	ldr	r3, [r3, #4]
 8004a1c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	689b      	ldr	r3, [r3, #8]
 8004a24:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8004a28:	431a      	orrs	r2, r3
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	68db      	ldr	r3, [r3, #12]
 8004a2e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004a32:	431a      	orrs	r2, r3
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	691b      	ldr	r3, [r3, #16]
 8004a38:	f003 0302 	and.w	r3, r3, #2
 8004a3c:	431a      	orrs	r2, r3
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	695b      	ldr	r3, [r3, #20]
 8004a42:	f003 0301 	and.w	r3, r3, #1
 8004a46:	431a      	orrs	r2, r3
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	699b      	ldr	r3, [r3, #24]
 8004a4c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004a50:	431a      	orrs	r2, r3
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	69db      	ldr	r3, [r3, #28]
 8004a56:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004a5a:	431a      	orrs	r2, r3
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	6a1b      	ldr	r3, [r3, #32]
 8004a60:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004a64:	ea42 0103 	orr.w	r1, r2, r3
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a6c:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	430a      	orrs	r2, r1
 8004a76:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	699b      	ldr	r3, [r3, #24]
 8004a7c:	0c1a      	lsrs	r2, r3, #16
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	f002 0204 	and.w	r2, r2, #4
 8004a86:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	69da      	ldr	r2, [r3, #28]
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004a96:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	2200      	movs	r2, #0
 8004a9c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	2201      	movs	r2, #1
 8004aa2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8004aa6:	2300      	movs	r3, #0
}
 8004aa8:	4618      	mov	r0, r3
 8004aaa:	3708      	adds	r7, #8
 8004aac:	46bd      	mov	sp, r7
 8004aae:	bd80      	pop	{r7, pc}

08004ab0 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8004ab0:	b580      	push	{r7, lr}
 8004ab2:	b08c      	sub	sp, #48	; 0x30
 8004ab4:	af00      	add	r7, sp, #0
 8004ab6:	60f8      	str	r0, [r7, #12]
 8004ab8:	60b9      	str	r1, [r7, #8]
 8004aba:	607a      	str	r2, [r7, #4]
 8004abc:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8004abe:	2301      	movs	r3, #1
 8004ac0:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8004ac2:	2300      	movs	r3, #0
 8004ac4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004ac8:	68fb      	ldr	r3, [r7, #12]
 8004aca:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004ace:	2b01      	cmp	r3, #1
 8004ad0:	d101      	bne.n	8004ad6 <HAL_SPI_TransmitReceive+0x26>
 8004ad2:	2302      	movs	r3, #2
 8004ad4:	e18a      	b.n	8004dec <HAL_SPI_TransmitReceive+0x33c>
 8004ad6:	68fb      	ldr	r3, [r7, #12]
 8004ad8:	2201      	movs	r2, #1
 8004ada:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004ade:	f7fe fc01 	bl	80032e4 <HAL_GetTick>
 8004ae2:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8004ae4:	68fb      	ldr	r3, [r7, #12]
 8004ae6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004aea:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8004aee:	68fb      	ldr	r3, [r7, #12]
 8004af0:	685b      	ldr	r3, [r3, #4]
 8004af2:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8004af4:	887b      	ldrh	r3, [r7, #2]
 8004af6:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8004af8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004afc:	2b01      	cmp	r3, #1
 8004afe:	d00f      	beq.n	8004b20 <HAL_SPI_TransmitReceive+0x70>
 8004b00:	69fb      	ldr	r3, [r7, #28]
 8004b02:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004b06:	d107      	bne.n	8004b18 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8004b08:	68fb      	ldr	r3, [r7, #12]
 8004b0a:	689b      	ldr	r3, [r3, #8]
 8004b0c:	2b00      	cmp	r3, #0
 8004b0e:	d103      	bne.n	8004b18 <HAL_SPI_TransmitReceive+0x68>
 8004b10:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004b14:	2b04      	cmp	r3, #4
 8004b16:	d003      	beq.n	8004b20 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8004b18:	2302      	movs	r3, #2
 8004b1a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8004b1e:	e15b      	b.n	8004dd8 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8004b20:	68bb      	ldr	r3, [r7, #8]
 8004b22:	2b00      	cmp	r3, #0
 8004b24:	d005      	beq.n	8004b32 <HAL_SPI_TransmitReceive+0x82>
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	2b00      	cmp	r3, #0
 8004b2a:	d002      	beq.n	8004b32 <HAL_SPI_TransmitReceive+0x82>
 8004b2c:	887b      	ldrh	r3, [r7, #2]
 8004b2e:	2b00      	cmp	r3, #0
 8004b30:	d103      	bne.n	8004b3a <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8004b32:	2301      	movs	r3, #1
 8004b34:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8004b38:	e14e      	b.n	8004dd8 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8004b3a:	68fb      	ldr	r3, [r7, #12]
 8004b3c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004b40:	b2db      	uxtb	r3, r3
 8004b42:	2b04      	cmp	r3, #4
 8004b44:	d003      	beq.n	8004b4e <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8004b46:	68fb      	ldr	r3, [r7, #12]
 8004b48:	2205      	movs	r2, #5
 8004b4a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004b4e:	68fb      	ldr	r3, [r7, #12]
 8004b50:	2200      	movs	r2, #0
 8004b52:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8004b54:	68fb      	ldr	r3, [r7, #12]
 8004b56:	687a      	ldr	r2, [r7, #4]
 8004b58:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8004b5a:	68fb      	ldr	r3, [r7, #12]
 8004b5c:	887a      	ldrh	r2, [r7, #2]
 8004b5e:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8004b60:	68fb      	ldr	r3, [r7, #12]
 8004b62:	887a      	ldrh	r2, [r7, #2]
 8004b64:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8004b66:	68fb      	ldr	r3, [r7, #12]
 8004b68:	68ba      	ldr	r2, [r7, #8]
 8004b6a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8004b6c:	68fb      	ldr	r3, [r7, #12]
 8004b6e:	887a      	ldrh	r2, [r7, #2]
 8004b70:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8004b72:	68fb      	ldr	r3, [r7, #12]
 8004b74:	887a      	ldrh	r2, [r7, #2]
 8004b76:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8004b78:	68fb      	ldr	r3, [r7, #12]
 8004b7a:	2200      	movs	r2, #0
 8004b7c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8004b7e:	68fb      	ldr	r3, [r7, #12]
 8004b80:	2200      	movs	r2, #0
 8004b82:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004b84:	68fb      	ldr	r3, [r7, #12]
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b8e:	2b40      	cmp	r3, #64	; 0x40
 8004b90:	d007      	beq.n	8004ba2 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004b92:	68fb      	ldr	r3, [r7, #12]
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	681a      	ldr	r2, [r3, #0]
 8004b98:	68fb      	ldr	r3, [r7, #12]
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004ba0:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8004ba2:	68fb      	ldr	r3, [r7, #12]
 8004ba4:	68db      	ldr	r3, [r3, #12]
 8004ba6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004baa:	d178      	bne.n	8004c9e <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004bac:	68fb      	ldr	r3, [r7, #12]
 8004bae:	685b      	ldr	r3, [r3, #4]
 8004bb0:	2b00      	cmp	r3, #0
 8004bb2:	d002      	beq.n	8004bba <HAL_SPI_TransmitReceive+0x10a>
 8004bb4:	8b7b      	ldrh	r3, [r7, #26]
 8004bb6:	2b01      	cmp	r3, #1
 8004bb8:	d166      	bne.n	8004c88 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004bba:	68fb      	ldr	r3, [r7, #12]
 8004bbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004bbe:	881a      	ldrh	r2, [r3, #0]
 8004bc0:	68fb      	ldr	r3, [r7, #12]
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004bc6:	68fb      	ldr	r3, [r7, #12]
 8004bc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004bca:	1c9a      	adds	r2, r3, #2
 8004bcc:	68fb      	ldr	r3, [r7, #12]
 8004bce:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004bd0:	68fb      	ldr	r3, [r7, #12]
 8004bd2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004bd4:	b29b      	uxth	r3, r3
 8004bd6:	3b01      	subs	r3, #1
 8004bd8:	b29a      	uxth	r2, r3
 8004bda:	68fb      	ldr	r3, [r7, #12]
 8004bdc:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004bde:	e053      	b.n	8004c88 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004be0:	68fb      	ldr	r3, [r7, #12]
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	689b      	ldr	r3, [r3, #8]
 8004be6:	f003 0302 	and.w	r3, r3, #2
 8004bea:	2b02      	cmp	r3, #2
 8004bec:	d11b      	bne.n	8004c26 <HAL_SPI_TransmitReceive+0x176>
 8004bee:	68fb      	ldr	r3, [r7, #12]
 8004bf0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004bf2:	b29b      	uxth	r3, r3
 8004bf4:	2b00      	cmp	r3, #0
 8004bf6:	d016      	beq.n	8004c26 <HAL_SPI_TransmitReceive+0x176>
 8004bf8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004bfa:	2b01      	cmp	r3, #1
 8004bfc:	d113      	bne.n	8004c26 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004bfe:	68fb      	ldr	r3, [r7, #12]
 8004c00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c02:	881a      	ldrh	r2, [r3, #0]
 8004c04:	68fb      	ldr	r3, [r7, #12]
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004c0a:	68fb      	ldr	r3, [r7, #12]
 8004c0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c0e:	1c9a      	adds	r2, r3, #2
 8004c10:	68fb      	ldr	r3, [r7, #12]
 8004c12:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004c14:	68fb      	ldr	r3, [r7, #12]
 8004c16:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004c18:	b29b      	uxth	r3, r3
 8004c1a:	3b01      	subs	r3, #1
 8004c1c:	b29a      	uxth	r2, r3
 8004c1e:	68fb      	ldr	r3, [r7, #12]
 8004c20:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004c22:	2300      	movs	r3, #0
 8004c24:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004c26:	68fb      	ldr	r3, [r7, #12]
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	689b      	ldr	r3, [r3, #8]
 8004c2c:	f003 0301 	and.w	r3, r3, #1
 8004c30:	2b01      	cmp	r3, #1
 8004c32:	d119      	bne.n	8004c68 <HAL_SPI_TransmitReceive+0x1b8>
 8004c34:	68fb      	ldr	r3, [r7, #12]
 8004c36:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004c38:	b29b      	uxth	r3, r3
 8004c3a:	2b00      	cmp	r3, #0
 8004c3c:	d014      	beq.n	8004c68 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004c3e:	68fb      	ldr	r3, [r7, #12]
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	68da      	ldr	r2, [r3, #12]
 8004c44:	68fb      	ldr	r3, [r7, #12]
 8004c46:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c48:	b292      	uxth	r2, r2
 8004c4a:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004c4c:	68fb      	ldr	r3, [r7, #12]
 8004c4e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c50:	1c9a      	adds	r2, r3, #2
 8004c52:	68fb      	ldr	r3, [r7, #12]
 8004c54:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8004c56:	68fb      	ldr	r3, [r7, #12]
 8004c58:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004c5a:	b29b      	uxth	r3, r3
 8004c5c:	3b01      	subs	r3, #1
 8004c5e:	b29a      	uxth	r2, r3
 8004c60:	68fb      	ldr	r3, [r7, #12]
 8004c62:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004c64:	2301      	movs	r3, #1
 8004c66:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8004c68:	f7fe fb3c 	bl	80032e4 <HAL_GetTick>
 8004c6c:	4602      	mov	r2, r0
 8004c6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c70:	1ad3      	subs	r3, r2, r3
 8004c72:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004c74:	429a      	cmp	r2, r3
 8004c76:	d807      	bhi.n	8004c88 <HAL_SPI_TransmitReceive+0x1d8>
 8004c78:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c7a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c7e:	d003      	beq.n	8004c88 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8004c80:	2303      	movs	r3, #3
 8004c82:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8004c86:	e0a7      	b.n	8004dd8 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004c88:	68fb      	ldr	r3, [r7, #12]
 8004c8a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004c8c:	b29b      	uxth	r3, r3
 8004c8e:	2b00      	cmp	r3, #0
 8004c90:	d1a6      	bne.n	8004be0 <HAL_SPI_TransmitReceive+0x130>
 8004c92:	68fb      	ldr	r3, [r7, #12]
 8004c94:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004c96:	b29b      	uxth	r3, r3
 8004c98:	2b00      	cmp	r3, #0
 8004c9a:	d1a1      	bne.n	8004be0 <HAL_SPI_TransmitReceive+0x130>
 8004c9c:	e07c      	b.n	8004d98 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004c9e:	68fb      	ldr	r3, [r7, #12]
 8004ca0:	685b      	ldr	r3, [r3, #4]
 8004ca2:	2b00      	cmp	r3, #0
 8004ca4:	d002      	beq.n	8004cac <HAL_SPI_TransmitReceive+0x1fc>
 8004ca6:	8b7b      	ldrh	r3, [r7, #26]
 8004ca8:	2b01      	cmp	r3, #1
 8004caa:	d16b      	bne.n	8004d84 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004cac:	68fb      	ldr	r3, [r7, #12]
 8004cae:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004cb0:	68fb      	ldr	r3, [r7, #12]
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	330c      	adds	r3, #12
 8004cb6:	7812      	ldrb	r2, [r2, #0]
 8004cb8:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8004cba:	68fb      	ldr	r3, [r7, #12]
 8004cbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004cbe:	1c5a      	adds	r2, r3, #1
 8004cc0:	68fb      	ldr	r3, [r7, #12]
 8004cc2:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004cc4:	68fb      	ldr	r3, [r7, #12]
 8004cc6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004cc8:	b29b      	uxth	r3, r3
 8004cca:	3b01      	subs	r3, #1
 8004ccc:	b29a      	uxth	r2, r3
 8004cce:	68fb      	ldr	r3, [r7, #12]
 8004cd0:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004cd2:	e057      	b.n	8004d84 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004cd4:	68fb      	ldr	r3, [r7, #12]
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	689b      	ldr	r3, [r3, #8]
 8004cda:	f003 0302 	and.w	r3, r3, #2
 8004cde:	2b02      	cmp	r3, #2
 8004ce0:	d11c      	bne.n	8004d1c <HAL_SPI_TransmitReceive+0x26c>
 8004ce2:	68fb      	ldr	r3, [r7, #12]
 8004ce4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004ce6:	b29b      	uxth	r3, r3
 8004ce8:	2b00      	cmp	r3, #0
 8004cea:	d017      	beq.n	8004d1c <HAL_SPI_TransmitReceive+0x26c>
 8004cec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004cee:	2b01      	cmp	r3, #1
 8004cf0:	d114      	bne.n	8004d1c <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8004cf2:	68fb      	ldr	r3, [r7, #12]
 8004cf4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004cf6:	68fb      	ldr	r3, [r7, #12]
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	330c      	adds	r3, #12
 8004cfc:	7812      	ldrb	r2, [r2, #0]
 8004cfe:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8004d00:	68fb      	ldr	r3, [r7, #12]
 8004d02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d04:	1c5a      	adds	r2, r3, #1
 8004d06:	68fb      	ldr	r3, [r7, #12]
 8004d08:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004d0a:	68fb      	ldr	r3, [r7, #12]
 8004d0c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004d0e:	b29b      	uxth	r3, r3
 8004d10:	3b01      	subs	r3, #1
 8004d12:	b29a      	uxth	r2, r3
 8004d14:	68fb      	ldr	r3, [r7, #12]
 8004d16:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004d18:	2300      	movs	r3, #0
 8004d1a:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004d1c:	68fb      	ldr	r3, [r7, #12]
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	689b      	ldr	r3, [r3, #8]
 8004d22:	f003 0301 	and.w	r3, r3, #1
 8004d26:	2b01      	cmp	r3, #1
 8004d28:	d119      	bne.n	8004d5e <HAL_SPI_TransmitReceive+0x2ae>
 8004d2a:	68fb      	ldr	r3, [r7, #12]
 8004d2c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004d2e:	b29b      	uxth	r3, r3
 8004d30:	2b00      	cmp	r3, #0
 8004d32:	d014      	beq.n	8004d5e <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8004d34:	68fb      	ldr	r3, [r7, #12]
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	68da      	ldr	r2, [r3, #12]
 8004d3a:	68fb      	ldr	r3, [r7, #12]
 8004d3c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d3e:	b2d2      	uxtb	r2, r2
 8004d40:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8004d42:	68fb      	ldr	r3, [r7, #12]
 8004d44:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d46:	1c5a      	adds	r2, r3, #1
 8004d48:	68fb      	ldr	r3, [r7, #12]
 8004d4a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8004d4c:	68fb      	ldr	r3, [r7, #12]
 8004d4e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004d50:	b29b      	uxth	r3, r3
 8004d52:	3b01      	subs	r3, #1
 8004d54:	b29a      	uxth	r2, r3
 8004d56:	68fb      	ldr	r3, [r7, #12]
 8004d58:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004d5a:	2301      	movs	r3, #1
 8004d5c:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8004d5e:	f7fe fac1 	bl	80032e4 <HAL_GetTick>
 8004d62:	4602      	mov	r2, r0
 8004d64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d66:	1ad3      	subs	r3, r2, r3
 8004d68:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004d6a:	429a      	cmp	r2, r3
 8004d6c:	d803      	bhi.n	8004d76 <HAL_SPI_TransmitReceive+0x2c6>
 8004d6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d70:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d74:	d102      	bne.n	8004d7c <HAL_SPI_TransmitReceive+0x2cc>
 8004d76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d78:	2b00      	cmp	r3, #0
 8004d7a:	d103      	bne.n	8004d84 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8004d7c:	2303      	movs	r3, #3
 8004d7e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8004d82:	e029      	b.n	8004dd8 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004d84:	68fb      	ldr	r3, [r7, #12]
 8004d86:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004d88:	b29b      	uxth	r3, r3
 8004d8a:	2b00      	cmp	r3, #0
 8004d8c:	d1a2      	bne.n	8004cd4 <HAL_SPI_TransmitReceive+0x224>
 8004d8e:	68fb      	ldr	r3, [r7, #12]
 8004d90:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004d92:	b29b      	uxth	r3, r3
 8004d94:	2b00      	cmp	r3, #0
 8004d96:	d19d      	bne.n	8004cd4 <HAL_SPI_TransmitReceive+0x224>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004d98:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004d9a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8004d9c:	68f8      	ldr	r0, [r7, #12]
 8004d9e:	f000 f8b1 	bl	8004f04 <SPI_EndRxTxTransaction>
 8004da2:	4603      	mov	r3, r0
 8004da4:	2b00      	cmp	r3, #0
 8004da6:	d006      	beq.n	8004db6 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8004da8:	2301      	movs	r3, #1
 8004daa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004dae:	68fb      	ldr	r3, [r7, #12]
 8004db0:	2220      	movs	r2, #32
 8004db2:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8004db4:	e010      	b.n	8004dd8 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004db6:	68fb      	ldr	r3, [r7, #12]
 8004db8:	689b      	ldr	r3, [r3, #8]
 8004dba:	2b00      	cmp	r3, #0
 8004dbc:	d10b      	bne.n	8004dd6 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004dbe:	2300      	movs	r3, #0
 8004dc0:	617b      	str	r3, [r7, #20]
 8004dc2:	68fb      	ldr	r3, [r7, #12]
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	68db      	ldr	r3, [r3, #12]
 8004dc8:	617b      	str	r3, [r7, #20]
 8004dca:	68fb      	ldr	r3, [r7, #12]
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	689b      	ldr	r3, [r3, #8]
 8004dd0:	617b      	str	r3, [r7, #20]
 8004dd2:	697b      	ldr	r3, [r7, #20]
 8004dd4:	e000      	b.n	8004dd8 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8004dd6:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8004dd8:	68fb      	ldr	r3, [r7, #12]
 8004dda:	2201      	movs	r2, #1
 8004ddc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8004de0:	68fb      	ldr	r3, [r7, #12]
 8004de2:	2200      	movs	r2, #0
 8004de4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8004de8:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8004dec:	4618      	mov	r0, r3
 8004dee:	3730      	adds	r7, #48	; 0x30
 8004df0:	46bd      	mov	sp, r7
 8004df2:	bd80      	pop	{r7, pc}

08004df4 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004df4:	b580      	push	{r7, lr}
 8004df6:	b088      	sub	sp, #32
 8004df8:	af00      	add	r7, sp, #0
 8004dfa:	60f8      	str	r0, [r7, #12]
 8004dfc:	60b9      	str	r1, [r7, #8]
 8004dfe:	603b      	str	r3, [r7, #0]
 8004e00:	4613      	mov	r3, r2
 8004e02:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8004e04:	f7fe fa6e 	bl	80032e4 <HAL_GetTick>
 8004e08:	4602      	mov	r2, r0
 8004e0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e0c:	1a9b      	subs	r3, r3, r2
 8004e0e:	683a      	ldr	r2, [r7, #0]
 8004e10:	4413      	add	r3, r2
 8004e12:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8004e14:	f7fe fa66 	bl	80032e4 <HAL_GetTick>
 8004e18:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8004e1a:	4b39      	ldr	r3, [pc, #228]	; (8004f00 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	015b      	lsls	r3, r3, #5
 8004e20:	0d1b      	lsrs	r3, r3, #20
 8004e22:	69fa      	ldr	r2, [r7, #28]
 8004e24:	fb02 f303 	mul.w	r3, r2, r3
 8004e28:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004e2a:	e054      	b.n	8004ed6 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004e2c:	683b      	ldr	r3, [r7, #0]
 8004e2e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e32:	d050      	beq.n	8004ed6 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004e34:	f7fe fa56 	bl	80032e4 <HAL_GetTick>
 8004e38:	4602      	mov	r2, r0
 8004e3a:	69bb      	ldr	r3, [r7, #24]
 8004e3c:	1ad3      	subs	r3, r2, r3
 8004e3e:	69fa      	ldr	r2, [r7, #28]
 8004e40:	429a      	cmp	r2, r3
 8004e42:	d902      	bls.n	8004e4a <SPI_WaitFlagStateUntilTimeout+0x56>
 8004e44:	69fb      	ldr	r3, [r7, #28]
 8004e46:	2b00      	cmp	r3, #0
 8004e48:	d13d      	bne.n	8004ec6 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004e4a:	68fb      	ldr	r3, [r7, #12]
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	685a      	ldr	r2, [r3, #4]
 8004e50:	68fb      	ldr	r3, [r7, #12]
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004e58:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004e5a:	68fb      	ldr	r3, [r7, #12]
 8004e5c:	685b      	ldr	r3, [r3, #4]
 8004e5e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004e62:	d111      	bne.n	8004e88 <SPI_WaitFlagStateUntilTimeout+0x94>
 8004e64:	68fb      	ldr	r3, [r7, #12]
 8004e66:	689b      	ldr	r3, [r3, #8]
 8004e68:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004e6c:	d004      	beq.n	8004e78 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004e6e:	68fb      	ldr	r3, [r7, #12]
 8004e70:	689b      	ldr	r3, [r3, #8]
 8004e72:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004e76:	d107      	bne.n	8004e88 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004e78:	68fb      	ldr	r3, [r7, #12]
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	681a      	ldr	r2, [r3, #0]
 8004e7e:	68fb      	ldr	r3, [r7, #12]
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004e86:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004e88:	68fb      	ldr	r3, [r7, #12]
 8004e8a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e8c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004e90:	d10f      	bne.n	8004eb2 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8004e92:	68fb      	ldr	r3, [r7, #12]
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	681a      	ldr	r2, [r3, #0]
 8004e98:	68fb      	ldr	r3, [r7, #12]
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004ea0:	601a      	str	r2, [r3, #0]
 8004ea2:	68fb      	ldr	r3, [r7, #12]
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	681a      	ldr	r2, [r3, #0]
 8004ea8:	68fb      	ldr	r3, [r7, #12]
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004eb0:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004eb2:	68fb      	ldr	r3, [r7, #12]
 8004eb4:	2201      	movs	r2, #1
 8004eb6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004eba:	68fb      	ldr	r3, [r7, #12]
 8004ebc:	2200      	movs	r2, #0
 8004ebe:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8004ec2:	2303      	movs	r3, #3
 8004ec4:	e017      	b.n	8004ef6 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8004ec6:	697b      	ldr	r3, [r7, #20]
 8004ec8:	2b00      	cmp	r3, #0
 8004eca:	d101      	bne.n	8004ed0 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8004ecc:	2300      	movs	r3, #0
 8004ece:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8004ed0:	697b      	ldr	r3, [r7, #20]
 8004ed2:	3b01      	subs	r3, #1
 8004ed4:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004ed6:	68fb      	ldr	r3, [r7, #12]
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	689a      	ldr	r2, [r3, #8]
 8004edc:	68bb      	ldr	r3, [r7, #8]
 8004ede:	4013      	ands	r3, r2
 8004ee0:	68ba      	ldr	r2, [r7, #8]
 8004ee2:	429a      	cmp	r2, r3
 8004ee4:	bf0c      	ite	eq
 8004ee6:	2301      	moveq	r3, #1
 8004ee8:	2300      	movne	r3, #0
 8004eea:	b2db      	uxtb	r3, r3
 8004eec:	461a      	mov	r2, r3
 8004eee:	79fb      	ldrb	r3, [r7, #7]
 8004ef0:	429a      	cmp	r2, r3
 8004ef2:	d19b      	bne.n	8004e2c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8004ef4:	2300      	movs	r3, #0
}
 8004ef6:	4618      	mov	r0, r3
 8004ef8:	3720      	adds	r7, #32
 8004efa:	46bd      	mov	sp, r7
 8004efc:	bd80      	pop	{r7, pc}
 8004efe:	bf00      	nop
 8004f00:	20000020 	.word	0x20000020

08004f04 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004f04:	b580      	push	{r7, lr}
 8004f06:	b086      	sub	sp, #24
 8004f08:	af02      	add	r7, sp, #8
 8004f0a:	60f8      	str	r0, [r7, #12]
 8004f0c:	60b9      	str	r1, [r7, #8]
 8004f0e:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	9300      	str	r3, [sp, #0]
 8004f14:	68bb      	ldr	r3, [r7, #8]
 8004f16:	2200      	movs	r2, #0
 8004f18:	2180      	movs	r1, #128	; 0x80
 8004f1a:	68f8      	ldr	r0, [r7, #12]
 8004f1c:	f7ff ff6a 	bl	8004df4 <SPI_WaitFlagStateUntilTimeout>
 8004f20:	4603      	mov	r3, r0
 8004f22:	2b00      	cmp	r3, #0
 8004f24:	d007      	beq.n	8004f36 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004f26:	68fb      	ldr	r3, [r7, #12]
 8004f28:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004f2a:	f043 0220 	orr.w	r2, r3, #32
 8004f2e:	68fb      	ldr	r3, [r7, #12]
 8004f30:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 8004f32:	2303      	movs	r3, #3
 8004f34:	e000      	b.n	8004f38 <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 8004f36:	2300      	movs	r3, #0
}
 8004f38:	4618      	mov	r0, r3
 8004f3a:	3710      	adds	r7, #16
 8004f3c:	46bd      	mov	sp, r7
 8004f3e:	bd80      	pop	{r7, pc}

08004f40 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004f40:	b580      	push	{r7, lr}
 8004f42:	b082      	sub	sp, #8
 8004f44:	af00      	add	r7, sp, #0
 8004f46:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	2b00      	cmp	r3, #0
 8004f4c:	d101      	bne.n	8004f52 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004f4e:	2301      	movs	r3, #1
 8004f50:	e041      	b.n	8004fd6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004f58:	b2db      	uxtb	r3, r3
 8004f5a:	2b00      	cmp	r3, #0
 8004f5c:	d106      	bne.n	8004f6c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	2200      	movs	r2, #0
 8004f62:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004f66:	6878      	ldr	r0, [r7, #4]
 8004f68:	f7fd ffb2 	bl	8002ed0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	2202      	movs	r2, #2
 8004f70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	681a      	ldr	r2, [r3, #0]
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	3304      	adds	r3, #4
 8004f7c:	4619      	mov	r1, r3
 8004f7e:	4610      	mov	r0, r2
 8004f80:	f000 f93c 	bl	80051fc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	2201      	movs	r2, #1
 8004f88:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	2201      	movs	r2, #1
 8004f90:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	2201      	movs	r2, #1
 8004f98:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	2201      	movs	r2, #1
 8004fa0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	2201      	movs	r2, #1
 8004fa8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	2201      	movs	r2, #1
 8004fb0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	2201      	movs	r2, #1
 8004fb8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	2201      	movs	r2, #1
 8004fc0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	2201      	movs	r2, #1
 8004fc8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	2201      	movs	r2, #1
 8004fd0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004fd4:	2300      	movs	r3, #0
}
 8004fd6:	4618      	mov	r0, r3
 8004fd8:	3708      	adds	r7, #8
 8004fda:	46bd      	mov	sp, r7
 8004fdc:	bd80      	pop	{r7, pc}
	...

08004fe0 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8004fe0:	b480      	push	{r7}
 8004fe2:	b085      	sub	sp, #20
 8004fe4:	af00      	add	r7, sp, #0
 8004fe6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004fee:	b2db      	uxtb	r3, r3
 8004ff0:	2b01      	cmp	r3, #1
 8004ff2:	d001      	beq.n	8004ff8 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8004ff4:	2301      	movs	r3, #1
 8004ff6:	e032      	b.n	800505e <HAL_TIM_Base_Start+0x7e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	2202      	movs	r2, #2
 8004ffc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	4a18      	ldr	r2, [pc, #96]	; (8005068 <HAL_TIM_Base_Start+0x88>)
 8005006:	4293      	cmp	r3, r2
 8005008:	d00e      	beq.n	8005028 <HAL_TIM_Base_Start+0x48>
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005012:	d009      	beq.n	8005028 <HAL_TIM_Base_Start+0x48>
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	4a14      	ldr	r2, [pc, #80]	; (800506c <HAL_TIM_Base_Start+0x8c>)
 800501a:	4293      	cmp	r3, r2
 800501c:	d004      	beq.n	8005028 <HAL_TIM_Base_Start+0x48>
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	4a13      	ldr	r2, [pc, #76]	; (8005070 <HAL_TIM_Base_Start+0x90>)
 8005024:	4293      	cmp	r3, r2
 8005026:	d111      	bne.n	800504c <HAL_TIM_Base_Start+0x6c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	689b      	ldr	r3, [r3, #8]
 800502e:	f003 0307 	and.w	r3, r3, #7
 8005032:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005034:	68fb      	ldr	r3, [r7, #12]
 8005036:	2b06      	cmp	r3, #6
 8005038:	d010      	beq.n	800505c <HAL_TIM_Base_Start+0x7c>
    {
      __HAL_TIM_ENABLE(htim);
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	681a      	ldr	r2, [r3, #0]
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	f042 0201 	orr.w	r2, r2, #1
 8005048:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800504a:	e007      	b.n	800505c <HAL_TIM_Base_Start+0x7c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	681a      	ldr	r2, [r3, #0]
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	f042 0201 	orr.w	r2, r2, #1
 800505a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800505c:	2300      	movs	r3, #0
}
 800505e:	4618      	mov	r0, r3
 8005060:	3714      	adds	r7, #20
 8005062:	46bd      	mov	sp, r7
 8005064:	bc80      	pop	{r7}
 8005066:	4770      	bx	lr
 8005068:	40012c00 	.word	0x40012c00
 800506c:	40000400 	.word	0x40000400
 8005070:	40000800 	.word	0x40000800

08005074 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005074:	b580      	push	{r7, lr}
 8005076:	b084      	sub	sp, #16
 8005078:	af00      	add	r7, sp, #0
 800507a:	6078      	str	r0, [r7, #4]
 800507c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005084:	2b01      	cmp	r3, #1
 8005086:	d101      	bne.n	800508c <HAL_TIM_ConfigClockSource+0x18>
 8005088:	2302      	movs	r3, #2
 800508a:	e0b3      	b.n	80051f4 <HAL_TIM_ConfigClockSource+0x180>
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	2201      	movs	r2, #1
 8005090:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	2202      	movs	r2, #2
 8005098:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	689b      	ldr	r3, [r3, #8]
 80050a2:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80050a4:	68fb      	ldr	r3, [r7, #12]
 80050a6:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80050aa:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80050ac:	68fb      	ldr	r3, [r7, #12]
 80050ae:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80050b2:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	68fa      	ldr	r2, [r7, #12]
 80050ba:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80050bc:	683b      	ldr	r3, [r7, #0]
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80050c4:	d03e      	beq.n	8005144 <HAL_TIM_ConfigClockSource+0xd0>
 80050c6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80050ca:	f200 8087 	bhi.w	80051dc <HAL_TIM_ConfigClockSource+0x168>
 80050ce:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80050d2:	f000 8085 	beq.w	80051e0 <HAL_TIM_ConfigClockSource+0x16c>
 80050d6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80050da:	d87f      	bhi.n	80051dc <HAL_TIM_ConfigClockSource+0x168>
 80050dc:	2b70      	cmp	r3, #112	; 0x70
 80050de:	d01a      	beq.n	8005116 <HAL_TIM_ConfigClockSource+0xa2>
 80050e0:	2b70      	cmp	r3, #112	; 0x70
 80050e2:	d87b      	bhi.n	80051dc <HAL_TIM_ConfigClockSource+0x168>
 80050e4:	2b60      	cmp	r3, #96	; 0x60
 80050e6:	d050      	beq.n	800518a <HAL_TIM_ConfigClockSource+0x116>
 80050e8:	2b60      	cmp	r3, #96	; 0x60
 80050ea:	d877      	bhi.n	80051dc <HAL_TIM_ConfigClockSource+0x168>
 80050ec:	2b50      	cmp	r3, #80	; 0x50
 80050ee:	d03c      	beq.n	800516a <HAL_TIM_ConfigClockSource+0xf6>
 80050f0:	2b50      	cmp	r3, #80	; 0x50
 80050f2:	d873      	bhi.n	80051dc <HAL_TIM_ConfigClockSource+0x168>
 80050f4:	2b40      	cmp	r3, #64	; 0x40
 80050f6:	d058      	beq.n	80051aa <HAL_TIM_ConfigClockSource+0x136>
 80050f8:	2b40      	cmp	r3, #64	; 0x40
 80050fa:	d86f      	bhi.n	80051dc <HAL_TIM_ConfigClockSource+0x168>
 80050fc:	2b30      	cmp	r3, #48	; 0x30
 80050fe:	d064      	beq.n	80051ca <HAL_TIM_ConfigClockSource+0x156>
 8005100:	2b30      	cmp	r3, #48	; 0x30
 8005102:	d86b      	bhi.n	80051dc <HAL_TIM_ConfigClockSource+0x168>
 8005104:	2b20      	cmp	r3, #32
 8005106:	d060      	beq.n	80051ca <HAL_TIM_ConfigClockSource+0x156>
 8005108:	2b20      	cmp	r3, #32
 800510a:	d867      	bhi.n	80051dc <HAL_TIM_ConfigClockSource+0x168>
 800510c:	2b00      	cmp	r3, #0
 800510e:	d05c      	beq.n	80051ca <HAL_TIM_ConfigClockSource+0x156>
 8005110:	2b10      	cmp	r3, #16
 8005112:	d05a      	beq.n	80051ca <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8005114:	e062      	b.n	80051dc <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	6818      	ldr	r0, [r3, #0]
 800511a:	683b      	ldr	r3, [r7, #0]
 800511c:	6899      	ldr	r1, [r3, #8]
 800511e:	683b      	ldr	r3, [r7, #0]
 8005120:	685a      	ldr	r2, [r3, #4]
 8005122:	683b      	ldr	r3, [r7, #0]
 8005124:	68db      	ldr	r3, [r3, #12]
 8005126:	f000 f942 	bl	80053ae <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	689b      	ldr	r3, [r3, #8]
 8005130:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005132:	68fb      	ldr	r3, [r7, #12]
 8005134:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005138:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	68fa      	ldr	r2, [r7, #12]
 8005140:	609a      	str	r2, [r3, #8]
      break;
 8005142:	e04e      	b.n	80051e2 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	6818      	ldr	r0, [r3, #0]
 8005148:	683b      	ldr	r3, [r7, #0]
 800514a:	6899      	ldr	r1, [r3, #8]
 800514c:	683b      	ldr	r3, [r7, #0]
 800514e:	685a      	ldr	r2, [r3, #4]
 8005150:	683b      	ldr	r3, [r7, #0]
 8005152:	68db      	ldr	r3, [r3, #12]
 8005154:	f000 f92b 	bl	80053ae <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	689a      	ldr	r2, [r3, #8]
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005166:	609a      	str	r2, [r3, #8]
      break;
 8005168:	e03b      	b.n	80051e2 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	6818      	ldr	r0, [r3, #0]
 800516e:	683b      	ldr	r3, [r7, #0]
 8005170:	6859      	ldr	r1, [r3, #4]
 8005172:	683b      	ldr	r3, [r7, #0]
 8005174:	68db      	ldr	r3, [r3, #12]
 8005176:	461a      	mov	r2, r3
 8005178:	f000 f8a2 	bl	80052c0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	2150      	movs	r1, #80	; 0x50
 8005182:	4618      	mov	r0, r3
 8005184:	f000 f8f9 	bl	800537a <TIM_ITRx_SetConfig>
      break;
 8005188:	e02b      	b.n	80051e2 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	6818      	ldr	r0, [r3, #0]
 800518e:	683b      	ldr	r3, [r7, #0]
 8005190:	6859      	ldr	r1, [r3, #4]
 8005192:	683b      	ldr	r3, [r7, #0]
 8005194:	68db      	ldr	r3, [r3, #12]
 8005196:	461a      	mov	r2, r3
 8005198:	f000 f8c0 	bl	800531c <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	2160      	movs	r1, #96	; 0x60
 80051a2:	4618      	mov	r0, r3
 80051a4:	f000 f8e9 	bl	800537a <TIM_ITRx_SetConfig>
      break;
 80051a8:	e01b      	b.n	80051e2 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	6818      	ldr	r0, [r3, #0]
 80051ae:	683b      	ldr	r3, [r7, #0]
 80051b0:	6859      	ldr	r1, [r3, #4]
 80051b2:	683b      	ldr	r3, [r7, #0]
 80051b4:	68db      	ldr	r3, [r3, #12]
 80051b6:	461a      	mov	r2, r3
 80051b8:	f000 f882 	bl	80052c0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	2140      	movs	r1, #64	; 0x40
 80051c2:	4618      	mov	r0, r3
 80051c4:	f000 f8d9 	bl	800537a <TIM_ITRx_SetConfig>
      break;
 80051c8:	e00b      	b.n	80051e2 <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	681a      	ldr	r2, [r3, #0]
 80051ce:	683b      	ldr	r3, [r7, #0]
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	4619      	mov	r1, r3
 80051d4:	4610      	mov	r0, r2
 80051d6:	f000 f8d0 	bl	800537a <TIM_ITRx_SetConfig>
        break;
 80051da:	e002      	b.n	80051e2 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 80051dc:	bf00      	nop
 80051de:	e000      	b.n	80051e2 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 80051e0:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	2201      	movs	r2, #1
 80051e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	2200      	movs	r2, #0
 80051ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80051f2:	2300      	movs	r3, #0
}
 80051f4:	4618      	mov	r0, r3
 80051f6:	3710      	adds	r7, #16
 80051f8:	46bd      	mov	sp, r7
 80051fa:	bd80      	pop	{r7, pc}

080051fc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80051fc:	b480      	push	{r7}
 80051fe:	b085      	sub	sp, #20
 8005200:	af00      	add	r7, sp, #0
 8005202:	6078      	str	r0, [r7, #4]
 8005204:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	4a29      	ldr	r2, [pc, #164]	; (80052b4 <TIM_Base_SetConfig+0xb8>)
 8005210:	4293      	cmp	r3, r2
 8005212:	d00b      	beq.n	800522c <TIM_Base_SetConfig+0x30>
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800521a:	d007      	beq.n	800522c <TIM_Base_SetConfig+0x30>
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	4a26      	ldr	r2, [pc, #152]	; (80052b8 <TIM_Base_SetConfig+0xbc>)
 8005220:	4293      	cmp	r3, r2
 8005222:	d003      	beq.n	800522c <TIM_Base_SetConfig+0x30>
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	4a25      	ldr	r2, [pc, #148]	; (80052bc <TIM_Base_SetConfig+0xc0>)
 8005228:	4293      	cmp	r3, r2
 800522a:	d108      	bne.n	800523e <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800522c:	68fb      	ldr	r3, [r7, #12]
 800522e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005232:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005234:	683b      	ldr	r3, [r7, #0]
 8005236:	685b      	ldr	r3, [r3, #4]
 8005238:	68fa      	ldr	r2, [r7, #12]
 800523a:	4313      	orrs	r3, r2
 800523c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	4a1c      	ldr	r2, [pc, #112]	; (80052b4 <TIM_Base_SetConfig+0xb8>)
 8005242:	4293      	cmp	r3, r2
 8005244:	d00b      	beq.n	800525e <TIM_Base_SetConfig+0x62>
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800524c:	d007      	beq.n	800525e <TIM_Base_SetConfig+0x62>
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	4a19      	ldr	r2, [pc, #100]	; (80052b8 <TIM_Base_SetConfig+0xbc>)
 8005252:	4293      	cmp	r3, r2
 8005254:	d003      	beq.n	800525e <TIM_Base_SetConfig+0x62>
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	4a18      	ldr	r2, [pc, #96]	; (80052bc <TIM_Base_SetConfig+0xc0>)
 800525a:	4293      	cmp	r3, r2
 800525c:	d108      	bne.n	8005270 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800525e:	68fb      	ldr	r3, [r7, #12]
 8005260:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005264:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005266:	683b      	ldr	r3, [r7, #0]
 8005268:	68db      	ldr	r3, [r3, #12]
 800526a:	68fa      	ldr	r2, [r7, #12]
 800526c:	4313      	orrs	r3, r2
 800526e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005270:	68fb      	ldr	r3, [r7, #12]
 8005272:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005276:	683b      	ldr	r3, [r7, #0]
 8005278:	695b      	ldr	r3, [r3, #20]
 800527a:	4313      	orrs	r3, r2
 800527c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	68fa      	ldr	r2, [r7, #12]
 8005282:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005284:	683b      	ldr	r3, [r7, #0]
 8005286:	689a      	ldr	r2, [r3, #8]
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800528c:	683b      	ldr	r3, [r7, #0]
 800528e:	681a      	ldr	r2, [r3, #0]
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	4a07      	ldr	r2, [pc, #28]	; (80052b4 <TIM_Base_SetConfig+0xb8>)
 8005298:	4293      	cmp	r3, r2
 800529a:	d103      	bne.n	80052a4 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800529c:	683b      	ldr	r3, [r7, #0]
 800529e:	691a      	ldr	r2, [r3, #16]
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	2201      	movs	r2, #1
 80052a8:	615a      	str	r2, [r3, #20]
}
 80052aa:	bf00      	nop
 80052ac:	3714      	adds	r7, #20
 80052ae:	46bd      	mov	sp, r7
 80052b0:	bc80      	pop	{r7}
 80052b2:	4770      	bx	lr
 80052b4:	40012c00 	.word	0x40012c00
 80052b8:	40000400 	.word	0x40000400
 80052bc:	40000800 	.word	0x40000800

080052c0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80052c0:	b480      	push	{r7}
 80052c2:	b087      	sub	sp, #28
 80052c4:	af00      	add	r7, sp, #0
 80052c6:	60f8      	str	r0, [r7, #12]
 80052c8:	60b9      	str	r1, [r7, #8]
 80052ca:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80052cc:	68fb      	ldr	r3, [r7, #12]
 80052ce:	6a1b      	ldr	r3, [r3, #32]
 80052d0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80052d2:	68fb      	ldr	r3, [r7, #12]
 80052d4:	6a1b      	ldr	r3, [r3, #32]
 80052d6:	f023 0201 	bic.w	r2, r3, #1
 80052da:	68fb      	ldr	r3, [r7, #12]
 80052dc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80052de:	68fb      	ldr	r3, [r7, #12]
 80052e0:	699b      	ldr	r3, [r3, #24]
 80052e2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80052e4:	693b      	ldr	r3, [r7, #16]
 80052e6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80052ea:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	011b      	lsls	r3, r3, #4
 80052f0:	693a      	ldr	r2, [r7, #16]
 80052f2:	4313      	orrs	r3, r2
 80052f4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80052f6:	697b      	ldr	r3, [r7, #20]
 80052f8:	f023 030a 	bic.w	r3, r3, #10
 80052fc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80052fe:	697a      	ldr	r2, [r7, #20]
 8005300:	68bb      	ldr	r3, [r7, #8]
 8005302:	4313      	orrs	r3, r2
 8005304:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005306:	68fb      	ldr	r3, [r7, #12]
 8005308:	693a      	ldr	r2, [r7, #16]
 800530a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800530c:	68fb      	ldr	r3, [r7, #12]
 800530e:	697a      	ldr	r2, [r7, #20]
 8005310:	621a      	str	r2, [r3, #32]
}
 8005312:	bf00      	nop
 8005314:	371c      	adds	r7, #28
 8005316:	46bd      	mov	sp, r7
 8005318:	bc80      	pop	{r7}
 800531a:	4770      	bx	lr

0800531c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800531c:	b480      	push	{r7}
 800531e:	b087      	sub	sp, #28
 8005320:	af00      	add	r7, sp, #0
 8005322:	60f8      	str	r0, [r7, #12]
 8005324:	60b9      	str	r1, [r7, #8]
 8005326:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005328:	68fb      	ldr	r3, [r7, #12]
 800532a:	6a1b      	ldr	r3, [r3, #32]
 800532c:	f023 0210 	bic.w	r2, r3, #16
 8005330:	68fb      	ldr	r3, [r7, #12]
 8005332:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005334:	68fb      	ldr	r3, [r7, #12]
 8005336:	699b      	ldr	r3, [r3, #24]
 8005338:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800533a:	68fb      	ldr	r3, [r7, #12]
 800533c:	6a1b      	ldr	r3, [r3, #32]
 800533e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005340:	697b      	ldr	r3, [r7, #20]
 8005342:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005346:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	031b      	lsls	r3, r3, #12
 800534c:	697a      	ldr	r2, [r7, #20]
 800534e:	4313      	orrs	r3, r2
 8005350:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005352:	693b      	ldr	r3, [r7, #16]
 8005354:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005358:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800535a:	68bb      	ldr	r3, [r7, #8]
 800535c:	011b      	lsls	r3, r3, #4
 800535e:	693a      	ldr	r2, [r7, #16]
 8005360:	4313      	orrs	r3, r2
 8005362:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005364:	68fb      	ldr	r3, [r7, #12]
 8005366:	697a      	ldr	r2, [r7, #20]
 8005368:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800536a:	68fb      	ldr	r3, [r7, #12]
 800536c:	693a      	ldr	r2, [r7, #16]
 800536e:	621a      	str	r2, [r3, #32]
}
 8005370:	bf00      	nop
 8005372:	371c      	adds	r7, #28
 8005374:	46bd      	mov	sp, r7
 8005376:	bc80      	pop	{r7}
 8005378:	4770      	bx	lr

0800537a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800537a:	b480      	push	{r7}
 800537c:	b085      	sub	sp, #20
 800537e:	af00      	add	r7, sp, #0
 8005380:	6078      	str	r0, [r7, #4]
 8005382:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	689b      	ldr	r3, [r3, #8]
 8005388:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800538a:	68fb      	ldr	r3, [r7, #12]
 800538c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005390:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005392:	683a      	ldr	r2, [r7, #0]
 8005394:	68fb      	ldr	r3, [r7, #12]
 8005396:	4313      	orrs	r3, r2
 8005398:	f043 0307 	orr.w	r3, r3, #7
 800539c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	68fa      	ldr	r2, [r7, #12]
 80053a2:	609a      	str	r2, [r3, #8]
}
 80053a4:	bf00      	nop
 80053a6:	3714      	adds	r7, #20
 80053a8:	46bd      	mov	sp, r7
 80053aa:	bc80      	pop	{r7}
 80053ac:	4770      	bx	lr

080053ae <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80053ae:	b480      	push	{r7}
 80053b0:	b087      	sub	sp, #28
 80053b2:	af00      	add	r7, sp, #0
 80053b4:	60f8      	str	r0, [r7, #12]
 80053b6:	60b9      	str	r1, [r7, #8]
 80053b8:	607a      	str	r2, [r7, #4]
 80053ba:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80053bc:	68fb      	ldr	r3, [r7, #12]
 80053be:	689b      	ldr	r3, [r3, #8]
 80053c0:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80053c2:	697b      	ldr	r3, [r7, #20]
 80053c4:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80053c8:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80053ca:	683b      	ldr	r3, [r7, #0]
 80053cc:	021a      	lsls	r2, r3, #8
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	431a      	orrs	r2, r3
 80053d2:	68bb      	ldr	r3, [r7, #8]
 80053d4:	4313      	orrs	r3, r2
 80053d6:	697a      	ldr	r2, [r7, #20]
 80053d8:	4313      	orrs	r3, r2
 80053da:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80053dc:	68fb      	ldr	r3, [r7, #12]
 80053de:	697a      	ldr	r2, [r7, #20]
 80053e0:	609a      	str	r2, [r3, #8]
}
 80053e2:	bf00      	nop
 80053e4:	371c      	adds	r7, #28
 80053e6:	46bd      	mov	sp, r7
 80053e8:	bc80      	pop	{r7}
 80053ea:	4770      	bx	lr

080053ec <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80053ec:	b480      	push	{r7}
 80053ee:	b085      	sub	sp, #20
 80053f0:	af00      	add	r7, sp, #0
 80053f2:	6078      	str	r0, [r7, #4]
 80053f4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80053fc:	2b01      	cmp	r3, #1
 80053fe:	d101      	bne.n	8005404 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005400:	2302      	movs	r3, #2
 8005402:	e046      	b.n	8005492 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	2201      	movs	r2, #1
 8005408:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	2202      	movs	r2, #2
 8005410:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	685b      	ldr	r3, [r3, #4]
 800541a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	689b      	ldr	r3, [r3, #8]
 8005422:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005424:	68fb      	ldr	r3, [r7, #12]
 8005426:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800542a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800542c:	683b      	ldr	r3, [r7, #0]
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	68fa      	ldr	r2, [r7, #12]
 8005432:	4313      	orrs	r3, r2
 8005434:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	68fa      	ldr	r2, [r7, #12]
 800543c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	4a16      	ldr	r2, [pc, #88]	; (800549c <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8005444:	4293      	cmp	r3, r2
 8005446:	d00e      	beq.n	8005466 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005450:	d009      	beq.n	8005466 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	4a12      	ldr	r2, [pc, #72]	; (80054a0 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8005458:	4293      	cmp	r3, r2
 800545a:	d004      	beq.n	8005466 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	4a10      	ldr	r2, [pc, #64]	; (80054a4 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8005462:	4293      	cmp	r3, r2
 8005464:	d10c      	bne.n	8005480 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005466:	68bb      	ldr	r3, [r7, #8]
 8005468:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800546c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800546e:	683b      	ldr	r3, [r7, #0]
 8005470:	685b      	ldr	r3, [r3, #4]
 8005472:	68ba      	ldr	r2, [r7, #8]
 8005474:	4313      	orrs	r3, r2
 8005476:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	68ba      	ldr	r2, [r7, #8]
 800547e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	2201      	movs	r2, #1
 8005484:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	2200      	movs	r2, #0
 800548c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005490:	2300      	movs	r3, #0
}
 8005492:	4618      	mov	r0, r3
 8005494:	3714      	adds	r7, #20
 8005496:	46bd      	mov	sp, r7
 8005498:	bc80      	pop	{r7}
 800549a:	4770      	bx	lr
 800549c:	40012c00 	.word	0x40012c00
 80054a0:	40000400 	.word	0x40000400
 80054a4:	40000800 	.word	0x40000800

080054a8 <gcvt>:
 80054a8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80054aa:	461c      	mov	r4, r3
 80054ac:	4615      	mov	r5, r2
 80054ae:	2300      	movs	r3, #0
 80054b0:	2200      	movs	r2, #0
 80054b2:	b085      	sub	sp, #20
 80054b4:	4606      	mov	r6, r0
 80054b6:	460f      	mov	r7, r1
 80054b8:	f7fb fa78 	bl	80009ac <__aeabi_dcmplt>
 80054bc:	4623      	mov	r3, r4
 80054be:	b118      	cbz	r0, 80054c8 <gcvt+0x20>
 80054c0:	222d      	movs	r2, #45	; 0x2d
 80054c2:	3d01      	subs	r5, #1
 80054c4:	f803 2b01 	strb.w	r2, [r3], #1
 80054c8:	2267      	movs	r2, #103	; 0x67
 80054ca:	2100      	movs	r1, #0
 80054cc:	e9cd 5300 	strd	r5, r3, [sp]
 80054d0:	e9cd 2102 	strd	r2, r1, [sp, #8]
 80054d4:	4905      	ldr	r1, [pc, #20]	; (80054ec <gcvt+0x44>)
 80054d6:	4632      	mov	r2, r6
 80054d8:	463b      	mov	r3, r7
 80054da:	6808      	ldr	r0, [r1, #0]
 80054dc:	f000 f8d4 	bl	8005688 <_gcvt>
 80054e0:	2800      	cmp	r0, #0
 80054e2:	bf14      	ite	ne
 80054e4:	4620      	movne	r0, r4
 80054e6:	2000      	moveq	r0, #0
 80054e8:	b005      	add	sp, #20
 80054ea:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80054ec:	2000002c 	.word	0x2000002c

080054f0 <__errno>:
 80054f0:	4b01      	ldr	r3, [pc, #4]	; (80054f8 <__errno+0x8>)
 80054f2:	6818      	ldr	r0, [r3, #0]
 80054f4:	4770      	bx	lr
 80054f6:	bf00      	nop
 80054f8:	2000002c 	.word	0x2000002c

080054fc <__libc_init_array>:
 80054fc:	b570      	push	{r4, r5, r6, lr}
 80054fe:	2600      	movs	r6, #0
 8005500:	4d0c      	ldr	r5, [pc, #48]	; (8005534 <__libc_init_array+0x38>)
 8005502:	4c0d      	ldr	r4, [pc, #52]	; (8005538 <__libc_init_array+0x3c>)
 8005504:	1b64      	subs	r4, r4, r5
 8005506:	10a4      	asrs	r4, r4, #2
 8005508:	42a6      	cmp	r6, r4
 800550a:	d109      	bne.n	8005520 <__libc_init_array+0x24>
 800550c:	f003 fc4e 	bl	8008dac <_init>
 8005510:	2600      	movs	r6, #0
 8005512:	4d0a      	ldr	r5, [pc, #40]	; (800553c <__libc_init_array+0x40>)
 8005514:	4c0a      	ldr	r4, [pc, #40]	; (8005540 <__libc_init_array+0x44>)
 8005516:	1b64      	subs	r4, r4, r5
 8005518:	10a4      	asrs	r4, r4, #2
 800551a:	42a6      	cmp	r6, r4
 800551c:	d105      	bne.n	800552a <__libc_init_array+0x2e>
 800551e:	bd70      	pop	{r4, r5, r6, pc}
 8005520:	f855 3b04 	ldr.w	r3, [r5], #4
 8005524:	4798      	blx	r3
 8005526:	3601      	adds	r6, #1
 8005528:	e7ee      	b.n	8005508 <__libc_init_array+0xc>
 800552a:	f855 3b04 	ldr.w	r3, [r5], #4
 800552e:	4798      	blx	r3
 8005530:	3601      	adds	r6, #1
 8005532:	e7f2      	b.n	800551a <__libc_init_array+0x1e>
 8005534:	08009170 	.word	0x08009170
 8005538:	08009170 	.word	0x08009170
 800553c:	08009170 	.word	0x08009170
 8005540:	08009174 	.word	0x08009174

08005544 <memset>:
 8005544:	4603      	mov	r3, r0
 8005546:	4402      	add	r2, r0
 8005548:	4293      	cmp	r3, r2
 800554a:	d100      	bne.n	800554e <memset+0xa>
 800554c:	4770      	bx	lr
 800554e:	f803 1b01 	strb.w	r1, [r3], #1
 8005552:	e7f9      	b.n	8005548 <memset+0x4>

08005554 <siprintf>:
 8005554:	b40e      	push	{r1, r2, r3}
 8005556:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800555a:	b500      	push	{lr}
 800555c:	b09c      	sub	sp, #112	; 0x70
 800555e:	ab1d      	add	r3, sp, #116	; 0x74
 8005560:	9002      	str	r0, [sp, #8]
 8005562:	9006      	str	r0, [sp, #24]
 8005564:	9107      	str	r1, [sp, #28]
 8005566:	9104      	str	r1, [sp, #16]
 8005568:	4808      	ldr	r0, [pc, #32]	; (800558c <siprintf+0x38>)
 800556a:	4909      	ldr	r1, [pc, #36]	; (8005590 <siprintf+0x3c>)
 800556c:	f853 2b04 	ldr.w	r2, [r3], #4
 8005570:	9105      	str	r1, [sp, #20]
 8005572:	6800      	ldr	r0, [r0, #0]
 8005574:	a902      	add	r1, sp, #8
 8005576:	9301      	str	r3, [sp, #4]
 8005578:	f000 fe16 	bl	80061a8 <_svfiprintf_r>
 800557c:	2200      	movs	r2, #0
 800557e:	9b02      	ldr	r3, [sp, #8]
 8005580:	701a      	strb	r2, [r3, #0]
 8005582:	b01c      	add	sp, #112	; 0x70
 8005584:	f85d eb04 	ldr.w	lr, [sp], #4
 8005588:	b003      	add	sp, #12
 800558a:	4770      	bx	lr
 800558c:	2000002c 	.word	0x2000002c
 8005590:	ffff0208 	.word	0xffff0208

08005594 <print_e>:
 8005594:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005596:	b08b      	sub	sp, #44	; 0x2c
 8005598:	460d      	mov	r5, r1
 800559a:	a908      	add	r1, sp, #32
 800559c:	9e10      	ldr	r6, [sp, #64]	; 0x40
 800559e:	9104      	str	r1, [sp, #16]
 80055a0:	a907      	add	r1, sp, #28
 80055a2:	9103      	str	r1, [sp, #12]
 80055a4:	a909      	add	r1, sp, #36	; 0x24
 80055a6:	9102      	str	r1, [sp, #8]
 80055a8:	1c71      	adds	r1, r6, #1
 80055aa:	9101      	str	r1, [sp, #4]
 80055ac:	2102      	movs	r1, #2
 80055ae:	9100      	str	r1, [sp, #0]
 80055b0:	f89d 7044 	ldrb.w	r7, [sp, #68]	; 0x44
 80055b4:	9c12      	ldr	r4, [sp, #72]	; 0x48
 80055b6:	f001 f94f 	bl	8006858 <_dtoa_r>
 80055ba:	f242 730f 	movw	r3, #9999	; 0x270f
 80055be:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80055c0:	4601      	mov	r1, r0
 80055c2:	429a      	cmp	r2, r3
 80055c4:	d104      	bne.n	80055d0 <print_e+0x3c>
 80055c6:	4628      	mov	r0, r5
 80055c8:	f001 f894 	bl	80066f4 <strcpy>
 80055cc:	b00b      	add	sp, #44	; 0x2c
 80055ce:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80055d0:	462b      	mov	r3, r5
 80055d2:	7800      	ldrb	r0, [r0, #0]
 80055d4:	2e00      	cmp	r6, #0
 80055d6:	f803 0b01 	strb.w	r0, [r3], #1
 80055da:	bfc8      	it	gt
 80055dc:	2401      	movgt	r4, #1
 80055de:	202e      	movs	r0, #46	; 0x2e
 80055e0:	f811 5f01 	ldrb.w	r5, [r1, #1]!
 80055e4:	b10d      	cbz	r5, 80055ea <print_e+0x56>
 80055e6:	2e00      	cmp	r6, #0
 80055e8:	dc37      	bgt.n	800565a <print_e+0xc6>
 80055ea:	2f67      	cmp	r7, #103	; 0x67
 80055ec:	d046      	beq.n	800567c <print_e+0xe8>
 80055ee:	2f47      	cmp	r7, #71	; 0x47
 80055f0:	d046      	beq.n	8005680 <print_e+0xec>
 80055f2:	212e      	movs	r1, #46	; 0x2e
 80055f4:	2030      	movs	r0, #48	; 0x30
 80055f6:	2e00      	cmp	r6, #0
 80055f8:	dc38      	bgt.n	800566c <print_e+0xd8>
 80055fa:	1e51      	subs	r1, r2, #1
 80055fc:	2900      	cmp	r1, #0
 80055fe:	bfa8      	it	ge
 8005600:	222b      	movge	r2, #43	; 0x2b
 8005602:	4618      	mov	r0, r3
 8005604:	9109      	str	r1, [sp, #36]	; 0x24
 8005606:	bfbe      	ittt	lt
 8005608:	212d      	movlt	r1, #45	; 0x2d
 800560a:	f1c2 0201 	rsblt	r2, r2, #1
 800560e:	9209      	strlt	r2, [sp, #36]	; 0x24
 8005610:	f800 7b02 	strb.w	r7, [r0], #2
 8005614:	bfa8      	it	ge
 8005616:	705a      	strbge	r2, [r3, #1]
 8005618:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800561a:	bfb8      	it	lt
 800561c:	7059      	strblt	r1, [r3, #1]
 800561e:	2a63      	cmp	r2, #99	; 0x63
 8005620:	dd0b      	ble.n	800563a <print_e+0xa6>
 8005622:	2164      	movs	r1, #100	; 0x64
 8005624:	fb92 f1f1 	sdiv	r1, r2, r1
 8005628:	f101 0430 	add.w	r4, r1, #48	; 0x30
 800562c:	1cd8      	adds	r0, r3, #3
 800562e:	709c      	strb	r4, [r3, #2]
 8005630:	f06f 0363 	mvn.w	r3, #99	; 0x63
 8005634:	fb03 2201 	mla	r2, r3, r1, r2
 8005638:	9209      	str	r2, [sp, #36]	; 0x24
 800563a:	220a      	movs	r2, #10
 800563c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800563e:	fb93 f2f2 	sdiv	r2, r3, r2
 8005642:	f102 0130 	add.w	r1, r2, #48	; 0x30
 8005646:	7001      	strb	r1, [r0, #0]
 8005648:	f06f 0109 	mvn.w	r1, #9
 800564c:	fb01 3302 	mla	r3, r1, r2, r3
 8005650:	3330      	adds	r3, #48	; 0x30
 8005652:	7043      	strb	r3, [r0, #1]
 8005654:	2300      	movs	r3, #0
 8005656:	7083      	strb	r3, [r0, #2]
 8005658:	e7b8      	b.n	80055cc <print_e+0x38>
 800565a:	b10c      	cbz	r4, 8005660 <print_e+0xcc>
 800565c:	f803 0b01 	strb.w	r0, [r3], #1
 8005660:	780c      	ldrb	r4, [r1, #0]
 8005662:	3e01      	subs	r6, #1
 8005664:	f803 4b01 	strb.w	r4, [r3], #1
 8005668:	2400      	movs	r4, #0
 800566a:	e7b9      	b.n	80055e0 <print_e+0x4c>
 800566c:	b10c      	cbz	r4, 8005672 <print_e+0xde>
 800566e:	f803 1b01 	strb.w	r1, [r3], #1
 8005672:	2400      	movs	r4, #0
 8005674:	f803 0b01 	strb.w	r0, [r3], #1
 8005678:	3e01      	subs	r6, #1
 800567a:	e7bc      	b.n	80055f6 <print_e+0x62>
 800567c:	2765      	movs	r7, #101	; 0x65
 800567e:	e7bc      	b.n	80055fa <print_e+0x66>
 8005680:	2745      	movs	r7, #69	; 0x45
 8005682:	e7ba      	b.n	80055fa <print_e+0x66>
 8005684:	0000      	movs	r0, r0
	...

08005688 <_gcvt>:
 8005688:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800568c:	4690      	mov	r8, r2
 800568e:	461c      	mov	r4, r3
 8005690:	b08b      	sub	sp, #44	; 0x2c
 8005692:	4681      	mov	r9, r0
 8005694:	e9dd 7512 	ldrd	r7, r5, [sp, #72]	; 0x48
 8005698:	2200      	movs	r2, #0
 800569a:	2300      	movs	r3, #0
 800569c:	4640      	mov	r0, r8
 800569e:	4621      	mov	r1, r4
 80056a0:	9e15      	ldr	r6, [sp, #84]	; 0x54
 80056a2:	f7fb f983 	bl	80009ac <__aeabi_dcmplt>
 80056a6:	b108      	cbz	r0, 80056ac <_gcvt+0x24>
 80056a8:	f104 4400 	add.w	r4, r4, #2147483648	; 0x80000000
 80056ac:	2200      	movs	r2, #0
 80056ae:	2300      	movs	r3, #0
 80056b0:	4640      	mov	r0, r8
 80056b2:	4621      	mov	r1, r4
 80056b4:	f7fb f970 	bl	8000998 <__aeabi_dcmpeq>
 80056b8:	b138      	cbz	r0, 80056ca <_gcvt+0x42>
 80056ba:	2330      	movs	r3, #48	; 0x30
 80056bc:	702b      	strb	r3, [r5, #0]
 80056be:	2300      	movs	r3, #0
 80056c0:	706b      	strb	r3, [r5, #1]
 80056c2:	4628      	mov	r0, r5
 80056c4:	b00b      	add	sp, #44	; 0x2c
 80056c6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80056ca:	4640      	mov	r0, r8
 80056cc:	a34c      	add	r3, pc, #304	; (adr r3, 8005800 <_gcvt+0x178>)
 80056ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80056d2:	4621      	mov	r1, r4
 80056d4:	f7fb f974 	bl	80009c0 <__aeabi_dcmple>
 80056d8:	b160      	cbz	r0, 80056f4 <_gcvt+0x6c>
 80056da:	f89d 3050 	ldrb.w	r3, [sp, #80]	; 0x50
 80056de:	3f01      	subs	r7, #1
 80056e0:	9301      	str	r3, [sp, #4]
 80056e2:	4642      	mov	r2, r8
 80056e4:	4623      	mov	r3, r4
 80056e6:	4629      	mov	r1, r5
 80056e8:	4648      	mov	r0, r9
 80056ea:	9602      	str	r6, [sp, #8]
 80056ec:	9700      	str	r7, [sp, #0]
 80056ee:	f7ff ff51 	bl	8005594 <print_e>
 80056f2:	e7e6      	b.n	80056c2 <_gcvt+0x3a>
 80056f4:	4638      	mov	r0, r7
 80056f6:	f000 fc09 	bl	8005f0c <_mprec_log10>
 80056fa:	4642      	mov	r2, r8
 80056fc:	4623      	mov	r3, r4
 80056fe:	f7fb f95f 	bl	80009c0 <__aeabi_dcmple>
 8005702:	2800      	cmp	r0, #0
 8005704:	d1e9      	bne.n	80056da <_gcvt+0x52>
 8005706:	ab09      	add	r3, sp, #36	; 0x24
 8005708:	9304      	str	r3, [sp, #16]
 800570a:	ab08      	add	r3, sp, #32
 800570c:	9303      	str	r3, [sp, #12]
 800570e:	ab07      	add	r3, sp, #28
 8005710:	e9cd 7301 	strd	r7, r3, [sp, #4]
 8005714:	2302      	movs	r3, #2
 8005716:	4642      	mov	r2, r8
 8005718:	9300      	str	r3, [sp, #0]
 800571a:	4648      	mov	r0, r9
 800571c:	4623      	mov	r3, r4
 800571e:	f001 f89b 	bl	8006858 <_dtoa_r>
 8005722:	f242 730f 	movw	r3, #9999	; 0x270f
 8005726:	9a07      	ldr	r2, [sp, #28]
 8005728:	4601      	mov	r1, r0
 800572a:	429a      	cmp	r2, r3
 800572c:	d00f      	beq.n	800574e <_gcvt+0xc6>
 800572e:	462b      	mov	r3, r5
 8005730:	442f      	add	r7, r5
 8005732:	4608      	mov	r0, r1
 8005734:	f811 cb01 	ldrb.w	ip, [r1], #1
 8005738:	9a07      	ldr	r2, [sp, #28]
 800573a:	1afc      	subs	r4, r7, r3
 800573c:	f1bc 0f00 	cmp.w	ip, #0
 8005740:	d001      	beq.n	8005746 <_gcvt+0xbe>
 8005742:	2a00      	cmp	r2, #0
 8005744:	dc07      	bgt.n	8005756 <_gcvt+0xce>
 8005746:	2100      	movs	r1, #0
 8005748:	f04f 0c30 	mov.w	ip, #48	; 0x30
 800574c:	e00c      	b.n	8005768 <_gcvt+0xe0>
 800574e:	4628      	mov	r0, r5
 8005750:	f000 ffd0 	bl	80066f4 <strcpy>
 8005754:	e7b5      	b.n	80056c2 <_gcvt+0x3a>
 8005756:	3a01      	subs	r2, #1
 8005758:	f803 cb01 	strb.w	ip, [r3], #1
 800575c:	9207      	str	r2, [sp, #28]
 800575e:	e7e8      	b.n	8005732 <_gcvt+0xaa>
 8005760:	2101      	movs	r1, #1
 8005762:	f803 cb01 	strb.w	ip, [r3], #1
 8005766:	3c01      	subs	r4, #1
 8005768:	2a00      	cmp	r2, #0
 800576a:	4617      	mov	r7, r2
 800576c:	dc2a      	bgt.n	80057c4 <_gcvt+0x13c>
 800576e:	b101      	cbz	r1, 8005772 <_gcvt+0xea>
 8005770:	9207      	str	r2, [sp, #28]
 8005772:	b90e      	cbnz	r6, 8005778 <_gcvt+0xf0>
 8005774:	7802      	ldrb	r2, [r0, #0]
 8005776:	b312      	cbz	r2, 80057be <_gcvt+0x136>
 8005778:	42ab      	cmp	r3, r5
 800577a:	bf04      	itt	eq
 800577c:	2230      	moveq	r2, #48	; 0x30
 800577e:	f803 2b01 	strbeq.w	r2, [r3], #1
 8005782:	222e      	movs	r2, #46	; 0x2e
 8005784:	4619      	mov	r1, r3
 8005786:	2700      	movs	r7, #0
 8005788:	f04f 0e30 	mov.w	lr, #48	; 0x30
 800578c:	701a      	strb	r2, [r3, #0]
 800578e:	9a07      	ldr	r2, [sp, #28]
 8005790:	eba2 0c03 	sub.w	ip, r2, r3
 8005794:	eb1c 0f01 	cmn.w	ip, r1
 8005798:	d41c      	bmi.n	80057d4 <_gcvt+0x14c>
 800579a:	2a00      	cmp	r2, #0
 800579c:	f1c2 0100 	rsb	r1, r2, #0
 80057a0:	bfc8      	it	gt
 80057a2:	2100      	movgt	r1, #0
 80057a4:	f101 0c01 	add.w	ip, r1, #1
 80057a8:	4463      	add	r3, ip
 80057aa:	440a      	add	r2, r1
 80057ac:	b107      	cbz	r7, 80057b0 <_gcvt+0x128>
 80057ae:	9207      	str	r2, [sp, #28]
 80057b0:	1e42      	subs	r2, r0, #1
 80057b2:	f812 1f01 	ldrb.w	r1, [r2, #1]!
 80057b6:	b109      	cbz	r1, 80057bc <_gcvt+0x134>
 80057b8:	2c00      	cmp	r4, #0
 80057ba:	dc0f      	bgt.n	80057dc <_gcvt+0x154>
 80057bc:	b9de      	cbnz	r6, 80057f6 <_gcvt+0x16e>
 80057be:	2200      	movs	r2, #0
 80057c0:	701a      	strb	r2, [r3, #0]
 80057c2:	e77e      	b.n	80056c2 <_gcvt+0x3a>
 80057c4:	2c00      	cmp	r4, #0
 80057c6:	f102 32ff 	add.w	r2, r2, #4294967295
 80057ca:	dcc9      	bgt.n	8005760 <_gcvt+0xd8>
 80057cc:	2900      	cmp	r1, #0
 80057ce:	d0d0      	beq.n	8005772 <_gcvt+0xea>
 80057d0:	9707      	str	r7, [sp, #28]
 80057d2:	e7ce      	b.n	8005772 <_gcvt+0xea>
 80057d4:	2701      	movs	r7, #1
 80057d6:	f801 ef01 	strb.w	lr, [r1, #1]!
 80057da:	e7db      	b.n	8005794 <_gcvt+0x10c>
 80057dc:	f803 1b01 	strb.w	r1, [r3], #1
 80057e0:	3c01      	subs	r4, #1
 80057e2:	e7e6      	b.n	80057b2 <_gcvt+0x12a>
 80057e4:	f802 6b01 	strb.w	r6, [r2], #1
 80057e8:	1a81      	subs	r1, r0, r2
 80057ea:	2900      	cmp	r1, #0
 80057ec:	dcfa      	bgt.n	80057e4 <_gcvt+0x15c>
 80057ee:	2c00      	cmp	r4, #0
 80057f0:	bfa8      	it	ge
 80057f2:	191b      	addge	r3, r3, r4
 80057f4:	e7e3      	b.n	80057be <_gcvt+0x136>
 80057f6:	461a      	mov	r2, r3
 80057f8:	2630      	movs	r6, #48	; 0x30
 80057fa:	1918      	adds	r0, r3, r4
 80057fc:	e7f4      	b.n	80057e8 <_gcvt+0x160>
 80057fe:	bf00      	nop
 8005800:	eb1c432d 	.word	0xeb1c432d
 8005804:	3f1a36e2 	.word	0x3f1a36e2

08005808 <_Balloc>:
 8005808:	b570      	push	{r4, r5, r6, lr}
 800580a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800580c:	4604      	mov	r4, r0
 800580e:	460d      	mov	r5, r1
 8005810:	b976      	cbnz	r6, 8005830 <_Balloc+0x28>
 8005812:	2010      	movs	r0, #16
 8005814:	f001 fe20 	bl	8007458 <malloc>
 8005818:	4602      	mov	r2, r0
 800581a:	6260      	str	r0, [r4, #36]	; 0x24
 800581c:	b920      	cbnz	r0, 8005828 <_Balloc+0x20>
 800581e:	2166      	movs	r1, #102	; 0x66
 8005820:	4b17      	ldr	r3, [pc, #92]	; (8005880 <_Balloc+0x78>)
 8005822:	4818      	ldr	r0, [pc, #96]	; (8005884 <_Balloc+0x7c>)
 8005824:	f000 ff6e 	bl	8006704 <__assert_func>
 8005828:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800582c:	6006      	str	r6, [r0, #0]
 800582e:	60c6      	str	r6, [r0, #12]
 8005830:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8005832:	68f3      	ldr	r3, [r6, #12]
 8005834:	b183      	cbz	r3, 8005858 <_Balloc+0x50>
 8005836:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005838:	68db      	ldr	r3, [r3, #12]
 800583a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800583e:	b9b8      	cbnz	r0, 8005870 <_Balloc+0x68>
 8005840:	2101      	movs	r1, #1
 8005842:	fa01 f605 	lsl.w	r6, r1, r5
 8005846:	1d72      	adds	r2, r6, #5
 8005848:	4620      	mov	r0, r4
 800584a:	0092      	lsls	r2, r2, #2
 800584c:	f000 fb7a 	bl	8005f44 <_calloc_r>
 8005850:	b160      	cbz	r0, 800586c <_Balloc+0x64>
 8005852:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8005856:	e00e      	b.n	8005876 <_Balloc+0x6e>
 8005858:	2221      	movs	r2, #33	; 0x21
 800585a:	2104      	movs	r1, #4
 800585c:	4620      	mov	r0, r4
 800585e:	f000 fb71 	bl	8005f44 <_calloc_r>
 8005862:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005864:	60f0      	str	r0, [r6, #12]
 8005866:	68db      	ldr	r3, [r3, #12]
 8005868:	2b00      	cmp	r3, #0
 800586a:	d1e4      	bne.n	8005836 <_Balloc+0x2e>
 800586c:	2000      	movs	r0, #0
 800586e:	bd70      	pop	{r4, r5, r6, pc}
 8005870:	6802      	ldr	r2, [r0, #0]
 8005872:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8005876:	2300      	movs	r3, #0
 8005878:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800587c:	e7f7      	b.n	800586e <_Balloc+0x66>
 800587e:	bf00      	nop
 8005880:	08008e7c 	.word	0x08008e7c
 8005884:	08008e93 	.word	0x08008e93

08005888 <_Bfree>:
 8005888:	b570      	push	{r4, r5, r6, lr}
 800588a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800588c:	4605      	mov	r5, r0
 800588e:	460c      	mov	r4, r1
 8005890:	b976      	cbnz	r6, 80058b0 <_Bfree+0x28>
 8005892:	2010      	movs	r0, #16
 8005894:	f001 fde0 	bl	8007458 <malloc>
 8005898:	4602      	mov	r2, r0
 800589a:	6268      	str	r0, [r5, #36]	; 0x24
 800589c:	b920      	cbnz	r0, 80058a8 <_Bfree+0x20>
 800589e:	218a      	movs	r1, #138	; 0x8a
 80058a0:	4b08      	ldr	r3, [pc, #32]	; (80058c4 <_Bfree+0x3c>)
 80058a2:	4809      	ldr	r0, [pc, #36]	; (80058c8 <_Bfree+0x40>)
 80058a4:	f000 ff2e 	bl	8006704 <__assert_func>
 80058a8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80058ac:	6006      	str	r6, [r0, #0]
 80058ae:	60c6      	str	r6, [r0, #12]
 80058b0:	b13c      	cbz	r4, 80058c2 <_Bfree+0x3a>
 80058b2:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80058b4:	6862      	ldr	r2, [r4, #4]
 80058b6:	68db      	ldr	r3, [r3, #12]
 80058b8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80058bc:	6021      	str	r1, [r4, #0]
 80058be:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80058c2:	bd70      	pop	{r4, r5, r6, pc}
 80058c4:	08008e7c 	.word	0x08008e7c
 80058c8:	08008e93 	.word	0x08008e93

080058cc <__multadd>:
 80058cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80058d0:	4607      	mov	r7, r0
 80058d2:	460c      	mov	r4, r1
 80058d4:	461e      	mov	r6, r3
 80058d6:	2000      	movs	r0, #0
 80058d8:	690d      	ldr	r5, [r1, #16]
 80058da:	f101 0c14 	add.w	ip, r1, #20
 80058de:	f8dc 3000 	ldr.w	r3, [ip]
 80058e2:	3001      	adds	r0, #1
 80058e4:	b299      	uxth	r1, r3
 80058e6:	fb02 6101 	mla	r1, r2, r1, r6
 80058ea:	0c1e      	lsrs	r6, r3, #16
 80058ec:	0c0b      	lsrs	r3, r1, #16
 80058ee:	fb02 3306 	mla	r3, r2, r6, r3
 80058f2:	b289      	uxth	r1, r1
 80058f4:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80058f8:	4285      	cmp	r5, r0
 80058fa:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80058fe:	f84c 1b04 	str.w	r1, [ip], #4
 8005902:	dcec      	bgt.n	80058de <__multadd+0x12>
 8005904:	b30e      	cbz	r6, 800594a <__multadd+0x7e>
 8005906:	68a3      	ldr	r3, [r4, #8]
 8005908:	42ab      	cmp	r3, r5
 800590a:	dc19      	bgt.n	8005940 <__multadd+0x74>
 800590c:	6861      	ldr	r1, [r4, #4]
 800590e:	4638      	mov	r0, r7
 8005910:	3101      	adds	r1, #1
 8005912:	f7ff ff79 	bl	8005808 <_Balloc>
 8005916:	4680      	mov	r8, r0
 8005918:	b928      	cbnz	r0, 8005926 <__multadd+0x5a>
 800591a:	4602      	mov	r2, r0
 800591c:	21b5      	movs	r1, #181	; 0xb5
 800591e:	4b0c      	ldr	r3, [pc, #48]	; (8005950 <__multadd+0x84>)
 8005920:	480c      	ldr	r0, [pc, #48]	; (8005954 <__multadd+0x88>)
 8005922:	f000 feef 	bl	8006704 <__assert_func>
 8005926:	6922      	ldr	r2, [r4, #16]
 8005928:	f104 010c 	add.w	r1, r4, #12
 800592c:	3202      	adds	r2, #2
 800592e:	0092      	lsls	r2, r2, #2
 8005930:	300c      	adds	r0, #12
 8005932:	f001 fda7 	bl	8007484 <memcpy>
 8005936:	4621      	mov	r1, r4
 8005938:	4638      	mov	r0, r7
 800593a:	f7ff ffa5 	bl	8005888 <_Bfree>
 800593e:	4644      	mov	r4, r8
 8005940:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8005944:	3501      	adds	r5, #1
 8005946:	615e      	str	r6, [r3, #20]
 8005948:	6125      	str	r5, [r4, #16]
 800594a:	4620      	mov	r0, r4
 800594c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005950:	08008eef 	.word	0x08008eef
 8005954:	08008e93 	.word	0x08008e93

08005958 <__hi0bits>:
 8005958:	0c02      	lsrs	r2, r0, #16
 800595a:	0412      	lsls	r2, r2, #16
 800595c:	4603      	mov	r3, r0
 800595e:	b9ca      	cbnz	r2, 8005994 <__hi0bits+0x3c>
 8005960:	0403      	lsls	r3, r0, #16
 8005962:	2010      	movs	r0, #16
 8005964:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8005968:	bf04      	itt	eq
 800596a:	021b      	lsleq	r3, r3, #8
 800596c:	3008      	addeq	r0, #8
 800596e:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8005972:	bf04      	itt	eq
 8005974:	011b      	lsleq	r3, r3, #4
 8005976:	3004      	addeq	r0, #4
 8005978:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 800597c:	bf04      	itt	eq
 800597e:	009b      	lsleq	r3, r3, #2
 8005980:	3002      	addeq	r0, #2
 8005982:	2b00      	cmp	r3, #0
 8005984:	db05      	blt.n	8005992 <__hi0bits+0x3a>
 8005986:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 800598a:	f100 0001 	add.w	r0, r0, #1
 800598e:	bf08      	it	eq
 8005990:	2020      	moveq	r0, #32
 8005992:	4770      	bx	lr
 8005994:	2000      	movs	r0, #0
 8005996:	e7e5      	b.n	8005964 <__hi0bits+0xc>

08005998 <__lo0bits>:
 8005998:	6803      	ldr	r3, [r0, #0]
 800599a:	4602      	mov	r2, r0
 800599c:	f013 0007 	ands.w	r0, r3, #7
 80059a0:	d00b      	beq.n	80059ba <__lo0bits+0x22>
 80059a2:	07d9      	lsls	r1, r3, #31
 80059a4:	d421      	bmi.n	80059ea <__lo0bits+0x52>
 80059a6:	0798      	lsls	r0, r3, #30
 80059a8:	bf49      	itett	mi
 80059aa:	085b      	lsrmi	r3, r3, #1
 80059ac:	089b      	lsrpl	r3, r3, #2
 80059ae:	2001      	movmi	r0, #1
 80059b0:	6013      	strmi	r3, [r2, #0]
 80059b2:	bf5c      	itt	pl
 80059b4:	2002      	movpl	r0, #2
 80059b6:	6013      	strpl	r3, [r2, #0]
 80059b8:	4770      	bx	lr
 80059ba:	b299      	uxth	r1, r3
 80059bc:	b909      	cbnz	r1, 80059c2 <__lo0bits+0x2a>
 80059be:	2010      	movs	r0, #16
 80059c0:	0c1b      	lsrs	r3, r3, #16
 80059c2:	b2d9      	uxtb	r1, r3
 80059c4:	b909      	cbnz	r1, 80059ca <__lo0bits+0x32>
 80059c6:	3008      	adds	r0, #8
 80059c8:	0a1b      	lsrs	r3, r3, #8
 80059ca:	0719      	lsls	r1, r3, #28
 80059cc:	bf04      	itt	eq
 80059ce:	091b      	lsreq	r3, r3, #4
 80059d0:	3004      	addeq	r0, #4
 80059d2:	0799      	lsls	r1, r3, #30
 80059d4:	bf04      	itt	eq
 80059d6:	089b      	lsreq	r3, r3, #2
 80059d8:	3002      	addeq	r0, #2
 80059da:	07d9      	lsls	r1, r3, #31
 80059dc:	d403      	bmi.n	80059e6 <__lo0bits+0x4e>
 80059de:	085b      	lsrs	r3, r3, #1
 80059e0:	f100 0001 	add.w	r0, r0, #1
 80059e4:	d003      	beq.n	80059ee <__lo0bits+0x56>
 80059e6:	6013      	str	r3, [r2, #0]
 80059e8:	4770      	bx	lr
 80059ea:	2000      	movs	r0, #0
 80059ec:	4770      	bx	lr
 80059ee:	2020      	movs	r0, #32
 80059f0:	4770      	bx	lr
	...

080059f4 <__i2b>:
 80059f4:	b510      	push	{r4, lr}
 80059f6:	460c      	mov	r4, r1
 80059f8:	2101      	movs	r1, #1
 80059fa:	f7ff ff05 	bl	8005808 <_Balloc>
 80059fe:	4602      	mov	r2, r0
 8005a00:	b928      	cbnz	r0, 8005a0e <__i2b+0x1a>
 8005a02:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8005a06:	4b04      	ldr	r3, [pc, #16]	; (8005a18 <__i2b+0x24>)
 8005a08:	4804      	ldr	r0, [pc, #16]	; (8005a1c <__i2b+0x28>)
 8005a0a:	f000 fe7b 	bl	8006704 <__assert_func>
 8005a0e:	2301      	movs	r3, #1
 8005a10:	6144      	str	r4, [r0, #20]
 8005a12:	6103      	str	r3, [r0, #16]
 8005a14:	bd10      	pop	{r4, pc}
 8005a16:	bf00      	nop
 8005a18:	08008eef 	.word	0x08008eef
 8005a1c:	08008e93 	.word	0x08008e93

08005a20 <__multiply>:
 8005a20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005a24:	4691      	mov	r9, r2
 8005a26:	690a      	ldr	r2, [r1, #16]
 8005a28:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8005a2c:	460c      	mov	r4, r1
 8005a2e:	429a      	cmp	r2, r3
 8005a30:	bfbe      	ittt	lt
 8005a32:	460b      	movlt	r3, r1
 8005a34:	464c      	movlt	r4, r9
 8005a36:	4699      	movlt	r9, r3
 8005a38:	6927      	ldr	r7, [r4, #16]
 8005a3a:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8005a3e:	68a3      	ldr	r3, [r4, #8]
 8005a40:	6861      	ldr	r1, [r4, #4]
 8005a42:	eb07 060a 	add.w	r6, r7, sl
 8005a46:	42b3      	cmp	r3, r6
 8005a48:	b085      	sub	sp, #20
 8005a4a:	bfb8      	it	lt
 8005a4c:	3101      	addlt	r1, #1
 8005a4e:	f7ff fedb 	bl	8005808 <_Balloc>
 8005a52:	b930      	cbnz	r0, 8005a62 <__multiply+0x42>
 8005a54:	4602      	mov	r2, r0
 8005a56:	f240 115d 	movw	r1, #349	; 0x15d
 8005a5a:	4b43      	ldr	r3, [pc, #268]	; (8005b68 <__multiply+0x148>)
 8005a5c:	4843      	ldr	r0, [pc, #268]	; (8005b6c <__multiply+0x14c>)
 8005a5e:	f000 fe51 	bl	8006704 <__assert_func>
 8005a62:	f100 0514 	add.w	r5, r0, #20
 8005a66:	462b      	mov	r3, r5
 8005a68:	2200      	movs	r2, #0
 8005a6a:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8005a6e:	4543      	cmp	r3, r8
 8005a70:	d321      	bcc.n	8005ab6 <__multiply+0x96>
 8005a72:	f104 0314 	add.w	r3, r4, #20
 8005a76:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8005a7a:	f109 0314 	add.w	r3, r9, #20
 8005a7e:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8005a82:	9202      	str	r2, [sp, #8]
 8005a84:	1b3a      	subs	r2, r7, r4
 8005a86:	3a15      	subs	r2, #21
 8005a88:	f022 0203 	bic.w	r2, r2, #3
 8005a8c:	3204      	adds	r2, #4
 8005a8e:	f104 0115 	add.w	r1, r4, #21
 8005a92:	428f      	cmp	r7, r1
 8005a94:	bf38      	it	cc
 8005a96:	2204      	movcc	r2, #4
 8005a98:	9201      	str	r2, [sp, #4]
 8005a9a:	9a02      	ldr	r2, [sp, #8]
 8005a9c:	9303      	str	r3, [sp, #12]
 8005a9e:	429a      	cmp	r2, r3
 8005aa0:	d80c      	bhi.n	8005abc <__multiply+0x9c>
 8005aa2:	2e00      	cmp	r6, #0
 8005aa4:	dd03      	ble.n	8005aae <__multiply+0x8e>
 8005aa6:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8005aaa:	2b00      	cmp	r3, #0
 8005aac:	d059      	beq.n	8005b62 <__multiply+0x142>
 8005aae:	6106      	str	r6, [r0, #16]
 8005ab0:	b005      	add	sp, #20
 8005ab2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005ab6:	f843 2b04 	str.w	r2, [r3], #4
 8005aba:	e7d8      	b.n	8005a6e <__multiply+0x4e>
 8005abc:	f8b3 a000 	ldrh.w	sl, [r3]
 8005ac0:	f1ba 0f00 	cmp.w	sl, #0
 8005ac4:	d023      	beq.n	8005b0e <__multiply+0xee>
 8005ac6:	46a9      	mov	r9, r5
 8005ac8:	f04f 0c00 	mov.w	ip, #0
 8005acc:	f104 0e14 	add.w	lr, r4, #20
 8005ad0:	f85e 2b04 	ldr.w	r2, [lr], #4
 8005ad4:	f8d9 1000 	ldr.w	r1, [r9]
 8005ad8:	fa1f fb82 	uxth.w	fp, r2
 8005adc:	b289      	uxth	r1, r1
 8005ade:	fb0a 110b 	mla	r1, sl, fp, r1
 8005ae2:	4461      	add	r1, ip
 8005ae4:	f8d9 c000 	ldr.w	ip, [r9]
 8005ae8:	0c12      	lsrs	r2, r2, #16
 8005aea:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 8005aee:	fb0a c202 	mla	r2, sl, r2, ip
 8005af2:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8005af6:	b289      	uxth	r1, r1
 8005af8:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8005afc:	4577      	cmp	r7, lr
 8005afe:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8005b02:	f849 1b04 	str.w	r1, [r9], #4
 8005b06:	d8e3      	bhi.n	8005ad0 <__multiply+0xb0>
 8005b08:	9a01      	ldr	r2, [sp, #4]
 8005b0a:	f845 c002 	str.w	ip, [r5, r2]
 8005b0e:	9a03      	ldr	r2, [sp, #12]
 8005b10:	3304      	adds	r3, #4
 8005b12:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8005b16:	f1b9 0f00 	cmp.w	r9, #0
 8005b1a:	d020      	beq.n	8005b5e <__multiply+0x13e>
 8005b1c:	46ae      	mov	lr, r5
 8005b1e:	f04f 0a00 	mov.w	sl, #0
 8005b22:	6829      	ldr	r1, [r5, #0]
 8005b24:	f104 0c14 	add.w	ip, r4, #20
 8005b28:	f8bc b000 	ldrh.w	fp, [ip]
 8005b2c:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8005b30:	b289      	uxth	r1, r1
 8005b32:	fb09 220b 	mla	r2, r9, fp, r2
 8005b36:	4492      	add	sl, r2
 8005b38:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8005b3c:	f84e 1b04 	str.w	r1, [lr], #4
 8005b40:	f85c 2b04 	ldr.w	r2, [ip], #4
 8005b44:	f8be 1000 	ldrh.w	r1, [lr]
 8005b48:	0c12      	lsrs	r2, r2, #16
 8005b4a:	fb09 1102 	mla	r1, r9, r2, r1
 8005b4e:	4567      	cmp	r7, ip
 8005b50:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 8005b54:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8005b58:	d8e6      	bhi.n	8005b28 <__multiply+0x108>
 8005b5a:	9a01      	ldr	r2, [sp, #4]
 8005b5c:	50a9      	str	r1, [r5, r2]
 8005b5e:	3504      	adds	r5, #4
 8005b60:	e79b      	b.n	8005a9a <__multiply+0x7a>
 8005b62:	3e01      	subs	r6, #1
 8005b64:	e79d      	b.n	8005aa2 <__multiply+0x82>
 8005b66:	bf00      	nop
 8005b68:	08008eef 	.word	0x08008eef
 8005b6c:	08008e93 	.word	0x08008e93

08005b70 <__pow5mult>:
 8005b70:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005b74:	4615      	mov	r5, r2
 8005b76:	f012 0203 	ands.w	r2, r2, #3
 8005b7a:	4606      	mov	r6, r0
 8005b7c:	460f      	mov	r7, r1
 8005b7e:	d007      	beq.n	8005b90 <__pow5mult+0x20>
 8005b80:	4c25      	ldr	r4, [pc, #148]	; (8005c18 <__pow5mult+0xa8>)
 8005b82:	3a01      	subs	r2, #1
 8005b84:	2300      	movs	r3, #0
 8005b86:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8005b8a:	f7ff fe9f 	bl	80058cc <__multadd>
 8005b8e:	4607      	mov	r7, r0
 8005b90:	10ad      	asrs	r5, r5, #2
 8005b92:	d03d      	beq.n	8005c10 <__pow5mult+0xa0>
 8005b94:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8005b96:	b97c      	cbnz	r4, 8005bb8 <__pow5mult+0x48>
 8005b98:	2010      	movs	r0, #16
 8005b9a:	f001 fc5d 	bl	8007458 <malloc>
 8005b9e:	4602      	mov	r2, r0
 8005ba0:	6270      	str	r0, [r6, #36]	; 0x24
 8005ba2:	b928      	cbnz	r0, 8005bb0 <__pow5mult+0x40>
 8005ba4:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8005ba8:	4b1c      	ldr	r3, [pc, #112]	; (8005c1c <__pow5mult+0xac>)
 8005baa:	481d      	ldr	r0, [pc, #116]	; (8005c20 <__pow5mult+0xb0>)
 8005bac:	f000 fdaa 	bl	8006704 <__assert_func>
 8005bb0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8005bb4:	6004      	str	r4, [r0, #0]
 8005bb6:	60c4      	str	r4, [r0, #12]
 8005bb8:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8005bbc:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8005bc0:	b94c      	cbnz	r4, 8005bd6 <__pow5mult+0x66>
 8005bc2:	f240 2171 	movw	r1, #625	; 0x271
 8005bc6:	4630      	mov	r0, r6
 8005bc8:	f7ff ff14 	bl	80059f4 <__i2b>
 8005bcc:	2300      	movs	r3, #0
 8005bce:	4604      	mov	r4, r0
 8005bd0:	f8c8 0008 	str.w	r0, [r8, #8]
 8005bd4:	6003      	str	r3, [r0, #0]
 8005bd6:	f04f 0900 	mov.w	r9, #0
 8005bda:	07eb      	lsls	r3, r5, #31
 8005bdc:	d50a      	bpl.n	8005bf4 <__pow5mult+0x84>
 8005bde:	4639      	mov	r1, r7
 8005be0:	4622      	mov	r2, r4
 8005be2:	4630      	mov	r0, r6
 8005be4:	f7ff ff1c 	bl	8005a20 <__multiply>
 8005be8:	4680      	mov	r8, r0
 8005bea:	4639      	mov	r1, r7
 8005bec:	4630      	mov	r0, r6
 8005bee:	f7ff fe4b 	bl	8005888 <_Bfree>
 8005bf2:	4647      	mov	r7, r8
 8005bf4:	106d      	asrs	r5, r5, #1
 8005bf6:	d00b      	beq.n	8005c10 <__pow5mult+0xa0>
 8005bf8:	6820      	ldr	r0, [r4, #0]
 8005bfa:	b938      	cbnz	r0, 8005c0c <__pow5mult+0x9c>
 8005bfc:	4622      	mov	r2, r4
 8005bfe:	4621      	mov	r1, r4
 8005c00:	4630      	mov	r0, r6
 8005c02:	f7ff ff0d 	bl	8005a20 <__multiply>
 8005c06:	6020      	str	r0, [r4, #0]
 8005c08:	f8c0 9000 	str.w	r9, [r0]
 8005c0c:	4604      	mov	r4, r0
 8005c0e:	e7e4      	b.n	8005bda <__pow5mult+0x6a>
 8005c10:	4638      	mov	r0, r7
 8005c12:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005c16:	bf00      	nop
 8005c18:	08008ff0 	.word	0x08008ff0
 8005c1c:	08008e7c 	.word	0x08008e7c
 8005c20:	08008e93 	.word	0x08008e93

08005c24 <__lshift>:
 8005c24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005c28:	460c      	mov	r4, r1
 8005c2a:	4607      	mov	r7, r0
 8005c2c:	4691      	mov	r9, r2
 8005c2e:	6923      	ldr	r3, [r4, #16]
 8005c30:	6849      	ldr	r1, [r1, #4]
 8005c32:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8005c36:	68a3      	ldr	r3, [r4, #8]
 8005c38:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8005c3c:	f108 0601 	add.w	r6, r8, #1
 8005c40:	42b3      	cmp	r3, r6
 8005c42:	db0b      	blt.n	8005c5c <__lshift+0x38>
 8005c44:	4638      	mov	r0, r7
 8005c46:	f7ff fddf 	bl	8005808 <_Balloc>
 8005c4a:	4605      	mov	r5, r0
 8005c4c:	b948      	cbnz	r0, 8005c62 <__lshift+0x3e>
 8005c4e:	4602      	mov	r2, r0
 8005c50:	f240 11d9 	movw	r1, #473	; 0x1d9
 8005c54:	4b29      	ldr	r3, [pc, #164]	; (8005cfc <__lshift+0xd8>)
 8005c56:	482a      	ldr	r0, [pc, #168]	; (8005d00 <__lshift+0xdc>)
 8005c58:	f000 fd54 	bl	8006704 <__assert_func>
 8005c5c:	3101      	adds	r1, #1
 8005c5e:	005b      	lsls	r3, r3, #1
 8005c60:	e7ee      	b.n	8005c40 <__lshift+0x1c>
 8005c62:	2300      	movs	r3, #0
 8005c64:	f100 0114 	add.w	r1, r0, #20
 8005c68:	f100 0210 	add.w	r2, r0, #16
 8005c6c:	4618      	mov	r0, r3
 8005c6e:	4553      	cmp	r3, sl
 8005c70:	db37      	blt.n	8005ce2 <__lshift+0xbe>
 8005c72:	6920      	ldr	r0, [r4, #16]
 8005c74:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8005c78:	f104 0314 	add.w	r3, r4, #20
 8005c7c:	f019 091f 	ands.w	r9, r9, #31
 8005c80:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8005c84:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8005c88:	d02f      	beq.n	8005cea <__lshift+0xc6>
 8005c8a:	468a      	mov	sl, r1
 8005c8c:	f04f 0c00 	mov.w	ip, #0
 8005c90:	f1c9 0e20 	rsb	lr, r9, #32
 8005c94:	681a      	ldr	r2, [r3, #0]
 8005c96:	fa02 f209 	lsl.w	r2, r2, r9
 8005c9a:	ea42 020c 	orr.w	r2, r2, ip
 8005c9e:	f84a 2b04 	str.w	r2, [sl], #4
 8005ca2:	f853 2b04 	ldr.w	r2, [r3], #4
 8005ca6:	4298      	cmp	r0, r3
 8005ca8:	fa22 fc0e 	lsr.w	ip, r2, lr
 8005cac:	d8f2      	bhi.n	8005c94 <__lshift+0x70>
 8005cae:	1b03      	subs	r3, r0, r4
 8005cb0:	3b15      	subs	r3, #21
 8005cb2:	f023 0303 	bic.w	r3, r3, #3
 8005cb6:	3304      	adds	r3, #4
 8005cb8:	f104 0215 	add.w	r2, r4, #21
 8005cbc:	4290      	cmp	r0, r2
 8005cbe:	bf38      	it	cc
 8005cc0:	2304      	movcc	r3, #4
 8005cc2:	f841 c003 	str.w	ip, [r1, r3]
 8005cc6:	f1bc 0f00 	cmp.w	ip, #0
 8005cca:	d001      	beq.n	8005cd0 <__lshift+0xac>
 8005ccc:	f108 0602 	add.w	r6, r8, #2
 8005cd0:	3e01      	subs	r6, #1
 8005cd2:	4638      	mov	r0, r7
 8005cd4:	4621      	mov	r1, r4
 8005cd6:	612e      	str	r6, [r5, #16]
 8005cd8:	f7ff fdd6 	bl	8005888 <_Bfree>
 8005cdc:	4628      	mov	r0, r5
 8005cde:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005ce2:	f842 0f04 	str.w	r0, [r2, #4]!
 8005ce6:	3301      	adds	r3, #1
 8005ce8:	e7c1      	b.n	8005c6e <__lshift+0x4a>
 8005cea:	3904      	subs	r1, #4
 8005cec:	f853 2b04 	ldr.w	r2, [r3], #4
 8005cf0:	4298      	cmp	r0, r3
 8005cf2:	f841 2f04 	str.w	r2, [r1, #4]!
 8005cf6:	d8f9      	bhi.n	8005cec <__lshift+0xc8>
 8005cf8:	e7ea      	b.n	8005cd0 <__lshift+0xac>
 8005cfa:	bf00      	nop
 8005cfc:	08008eef 	.word	0x08008eef
 8005d00:	08008e93 	.word	0x08008e93

08005d04 <__mcmp>:
 8005d04:	4603      	mov	r3, r0
 8005d06:	690a      	ldr	r2, [r1, #16]
 8005d08:	6900      	ldr	r0, [r0, #16]
 8005d0a:	b530      	push	{r4, r5, lr}
 8005d0c:	1a80      	subs	r0, r0, r2
 8005d0e:	d10d      	bne.n	8005d2c <__mcmp+0x28>
 8005d10:	3314      	adds	r3, #20
 8005d12:	3114      	adds	r1, #20
 8005d14:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8005d18:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8005d1c:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8005d20:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8005d24:	4295      	cmp	r5, r2
 8005d26:	d002      	beq.n	8005d2e <__mcmp+0x2a>
 8005d28:	d304      	bcc.n	8005d34 <__mcmp+0x30>
 8005d2a:	2001      	movs	r0, #1
 8005d2c:	bd30      	pop	{r4, r5, pc}
 8005d2e:	42a3      	cmp	r3, r4
 8005d30:	d3f4      	bcc.n	8005d1c <__mcmp+0x18>
 8005d32:	e7fb      	b.n	8005d2c <__mcmp+0x28>
 8005d34:	f04f 30ff 	mov.w	r0, #4294967295
 8005d38:	e7f8      	b.n	8005d2c <__mcmp+0x28>
	...

08005d3c <__mdiff>:
 8005d3c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005d40:	460d      	mov	r5, r1
 8005d42:	4607      	mov	r7, r0
 8005d44:	4611      	mov	r1, r2
 8005d46:	4628      	mov	r0, r5
 8005d48:	4614      	mov	r4, r2
 8005d4a:	f7ff ffdb 	bl	8005d04 <__mcmp>
 8005d4e:	1e06      	subs	r6, r0, #0
 8005d50:	d111      	bne.n	8005d76 <__mdiff+0x3a>
 8005d52:	4631      	mov	r1, r6
 8005d54:	4638      	mov	r0, r7
 8005d56:	f7ff fd57 	bl	8005808 <_Balloc>
 8005d5a:	4602      	mov	r2, r0
 8005d5c:	b928      	cbnz	r0, 8005d6a <__mdiff+0x2e>
 8005d5e:	f240 2132 	movw	r1, #562	; 0x232
 8005d62:	4b3a      	ldr	r3, [pc, #232]	; (8005e4c <__mdiff+0x110>)
 8005d64:	483a      	ldr	r0, [pc, #232]	; (8005e50 <__mdiff+0x114>)
 8005d66:	f000 fccd 	bl	8006704 <__assert_func>
 8005d6a:	2301      	movs	r3, #1
 8005d6c:	e9c0 3604 	strd	r3, r6, [r0, #16]
 8005d70:	4610      	mov	r0, r2
 8005d72:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005d76:	bfa4      	itt	ge
 8005d78:	4623      	movge	r3, r4
 8005d7a:	462c      	movge	r4, r5
 8005d7c:	4638      	mov	r0, r7
 8005d7e:	6861      	ldr	r1, [r4, #4]
 8005d80:	bfa6      	itte	ge
 8005d82:	461d      	movge	r5, r3
 8005d84:	2600      	movge	r6, #0
 8005d86:	2601      	movlt	r6, #1
 8005d88:	f7ff fd3e 	bl	8005808 <_Balloc>
 8005d8c:	4602      	mov	r2, r0
 8005d8e:	b918      	cbnz	r0, 8005d98 <__mdiff+0x5c>
 8005d90:	f44f 7110 	mov.w	r1, #576	; 0x240
 8005d94:	4b2d      	ldr	r3, [pc, #180]	; (8005e4c <__mdiff+0x110>)
 8005d96:	e7e5      	b.n	8005d64 <__mdiff+0x28>
 8005d98:	f102 0814 	add.w	r8, r2, #20
 8005d9c:	46c2      	mov	sl, r8
 8005d9e:	f04f 0c00 	mov.w	ip, #0
 8005da2:	6927      	ldr	r7, [r4, #16]
 8005da4:	60c6      	str	r6, [r0, #12]
 8005da6:	692e      	ldr	r6, [r5, #16]
 8005da8:	f104 0014 	add.w	r0, r4, #20
 8005dac:	f105 0914 	add.w	r9, r5, #20
 8005db0:	eb00 0e87 	add.w	lr, r0, r7, lsl #2
 8005db4:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8005db8:	3410      	adds	r4, #16
 8005dba:	f854 bf04 	ldr.w	fp, [r4, #4]!
 8005dbe:	f859 3b04 	ldr.w	r3, [r9], #4
 8005dc2:	fa1f f18b 	uxth.w	r1, fp
 8005dc6:	448c      	add	ip, r1
 8005dc8:	b299      	uxth	r1, r3
 8005dca:	0c1b      	lsrs	r3, r3, #16
 8005dcc:	ebac 0101 	sub.w	r1, ip, r1
 8005dd0:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8005dd4:	eb03 4321 	add.w	r3, r3, r1, asr #16
 8005dd8:	b289      	uxth	r1, r1
 8005dda:	ea4f 4c23 	mov.w	ip, r3, asr #16
 8005dde:	454e      	cmp	r6, r9
 8005de0:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8005de4:	f84a 3b04 	str.w	r3, [sl], #4
 8005de8:	d8e7      	bhi.n	8005dba <__mdiff+0x7e>
 8005dea:	1b73      	subs	r3, r6, r5
 8005dec:	3b15      	subs	r3, #21
 8005dee:	f023 0303 	bic.w	r3, r3, #3
 8005df2:	3515      	adds	r5, #21
 8005df4:	3304      	adds	r3, #4
 8005df6:	42ae      	cmp	r6, r5
 8005df8:	bf38      	it	cc
 8005dfa:	2304      	movcc	r3, #4
 8005dfc:	4418      	add	r0, r3
 8005dfe:	4443      	add	r3, r8
 8005e00:	461e      	mov	r6, r3
 8005e02:	4605      	mov	r5, r0
 8005e04:	4575      	cmp	r5, lr
 8005e06:	d30e      	bcc.n	8005e26 <__mdiff+0xea>
 8005e08:	f10e 0103 	add.w	r1, lr, #3
 8005e0c:	1a09      	subs	r1, r1, r0
 8005e0e:	f021 0103 	bic.w	r1, r1, #3
 8005e12:	3803      	subs	r0, #3
 8005e14:	4586      	cmp	lr, r0
 8005e16:	bf38      	it	cc
 8005e18:	2100      	movcc	r1, #0
 8005e1a:	4419      	add	r1, r3
 8005e1c:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 8005e20:	b18b      	cbz	r3, 8005e46 <__mdiff+0x10a>
 8005e22:	6117      	str	r7, [r2, #16]
 8005e24:	e7a4      	b.n	8005d70 <__mdiff+0x34>
 8005e26:	f855 8b04 	ldr.w	r8, [r5], #4
 8005e2a:	fa1f f188 	uxth.w	r1, r8
 8005e2e:	4461      	add	r1, ip
 8005e30:	140c      	asrs	r4, r1, #16
 8005e32:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8005e36:	b289      	uxth	r1, r1
 8005e38:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8005e3c:	ea4f 4c24 	mov.w	ip, r4, asr #16
 8005e40:	f846 1b04 	str.w	r1, [r6], #4
 8005e44:	e7de      	b.n	8005e04 <__mdiff+0xc8>
 8005e46:	3f01      	subs	r7, #1
 8005e48:	e7e8      	b.n	8005e1c <__mdiff+0xe0>
 8005e4a:	bf00      	nop
 8005e4c:	08008eef 	.word	0x08008eef
 8005e50:	08008e93 	.word	0x08008e93

08005e54 <__d2b>:
 8005e54:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8005e58:	2101      	movs	r1, #1
 8005e5a:	e9dd 7608 	ldrd	r7, r6, [sp, #32]
 8005e5e:	4690      	mov	r8, r2
 8005e60:	461d      	mov	r5, r3
 8005e62:	f7ff fcd1 	bl	8005808 <_Balloc>
 8005e66:	4604      	mov	r4, r0
 8005e68:	b930      	cbnz	r0, 8005e78 <__d2b+0x24>
 8005e6a:	4602      	mov	r2, r0
 8005e6c:	f240 310a 	movw	r1, #778	; 0x30a
 8005e70:	4b24      	ldr	r3, [pc, #144]	; (8005f04 <__d2b+0xb0>)
 8005e72:	4825      	ldr	r0, [pc, #148]	; (8005f08 <__d2b+0xb4>)
 8005e74:	f000 fc46 	bl	8006704 <__assert_func>
 8005e78:	f3c5 0313 	ubfx	r3, r5, #0, #20
 8005e7c:	f3c5 550a 	ubfx	r5, r5, #20, #11
 8005e80:	bb2d      	cbnz	r5, 8005ece <__d2b+0x7a>
 8005e82:	9301      	str	r3, [sp, #4]
 8005e84:	f1b8 0300 	subs.w	r3, r8, #0
 8005e88:	d026      	beq.n	8005ed8 <__d2b+0x84>
 8005e8a:	4668      	mov	r0, sp
 8005e8c:	9300      	str	r3, [sp, #0]
 8005e8e:	f7ff fd83 	bl	8005998 <__lo0bits>
 8005e92:	9900      	ldr	r1, [sp, #0]
 8005e94:	b1f0      	cbz	r0, 8005ed4 <__d2b+0x80>
 8005e96:	9a01      	ldr	r2, [sp, #4]
 8005e98:	f1c0 0320 	rsb	r3, r0, #32
 8005e9c:	fa02 f303 	lsl.w	r3, r2, r3
 8005ea0:	430b      	orrs	r3, r1
 8005ea2:	40c2      	lsrs	r2, r0
 8005ea4:	6163      	str	r3, [r4, #20]
 8005ea6:	9201      	str	r2, [sp, #4]
 8005ea8:	9b01      	ldr	r3, [sp, #4]
 8005eaa:	2b00      	cmp	r3, #0
 8005eac:	bf14      	ite	ne
 8005eae:	2102      	movne	r1, #2
 8005eb0:	2101      	moveq	r1, #1
 8005eb2:	61a3      	str	r3, [r4, #24]
 8005eb4:	6121      	str	r1, [r4, #16]
 8005eb6:	b1c5      	cbz	r5, 8005eea <__d2b+0x96>
 8005eb8:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8005ebc:	4405      	add	r5, r0
 8005ebe:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8005ec2:	603d      	str	r5, [r7, #0]
 8005ec4:	6030      	str	r0, [r6, #0]
 8005ec6:	4620      	mov	r0, r4
 8005ec8:	b002      	add	sp, #8
 8005eca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005ece:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005ed2:	e7d6      	b.n	8005e82 <__d2b+0x2e>
 8005ed4:	6161      	str	r1, [r4, #20]
 8005ed6:	e7e7      	b.n	8005ea8 <__d2b+0x54>
 8005ed8:	a801      	add	r0, sp, #4
 8005eda:	f7ff fd5d 	bl	8005998 <__lo0bits>
 8005ede:	2101      	movs	r1, #1
 8005ee0:	9b01      	ldr	r3, [sp, #4]
 8005ee2:	6121      	str	r1, [r4, #16]
 8005ee4:	6163      	str	r3, [r4, #20]
 8005ee6:	3020      	adds	r0, #32
 8005ee8:	e7e5      	b.n	8005eb6 <__d2b+0x62>
 8005eea:	eb04 0381 	add.w	r3, r4, r1, lsl #2
 8005eee:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8005ef2:	6038      	str	r0, [r7, #0]
 8005ef4:	6918      	ldr	r0, [r3, #16]
 8005ef6:	f7ff fd2f 	bl	8005958 <__hi0bits>
 8005efa:	ebc0 1141 	rsb	r1, r0, r1, lsl #5
 8005efe:	6031      	str	r1, [r6, #0]
 8005f00:	e7e1      	b.n	8005ec6 <__d2b+0x72>
 8005f02:	bf00      	nop
 8005f04:	08008eef 	.word	0x08008eef
 8005f08:	08008e93 	.word	0x08008e93

08005f0c <_mprec_log10>:
 8005f0c:	2817      	cmp	r0, #23
 8005f0e:	b5d0      	push	{r4, r6, r7, lr}
 8005f10:	4604      	mov	r4, r0
 8005f12:	dc05      	bgt.n	8005f20 <_mprec_log10+0x14>
 8005f14:	4808      	ldr	r0, [pc, #32]	; (8005f38 <_mprec_log10+0x2c>)
 8005f16:	eb00 04c4 	add.w	r4, r0, r4, lsl #3
 8005f1a:	e9d4 0100 	ldrd	r0, r1, [r4]
 8005f1e:	bdd0      	pop	{r4, r6, r7, pc}
 8005f20:	2000      	movs	r0, #0
 8005f22:	2600      	movs	r6, #0
 8005f24:	4905      	ldr	r1, [pc, #20]	; (8005f3c <_mprec_log10+0x30>)
 8005f26:	4f06      	ldr	r7, [pc, #24]	; (8005f40 <_mprec_log10+0x34>)
 8005f28:	4632      	mov	r2, r6
 8005f2a:	463b      	mov	r3, r7
 8005f2c:	f7fa facc 	bl	80004c8 <__aeabi_dmul>
 8005f30:	3c01      	subs	r4, #1
 8005f32:	d1f9      	bne.n	8005f28 <_mprec_log10+0x1c>
 8005f34:	e7f3      	b.n	8005f1e <_mprec_log10+0x12>
 8005f36:	bf00      	nop
 8005f38:	08008f28 	.word	0x08008f28
 8005f3c:	3ff00000 	.word	0x3ff00000
 8005f40:	40240000 	.word	0x40240000

08005f44 <_calloc_r>:
 8005f44:	b570      	push	{r4, r5, r6, lr}
 8005f46:	fba1 5402 	umull	r5, r4, r1, r2
 8005f4a:	b934      	cbnz	r4, 8005f5a <_calloc_r+0x16>
 8005f4c:	4629      	mov	r1, r5
 8005f4e:	f000 f82d 	bl	8005fac <_malloc_r>
 8005f52:	4606      	mov	r6, r0
 8005f54:	b928      	cbnz	r0, 8005f62 <_calloc_r+0x1e>
 8005f56:	4630      	mov	r0, r6
 8005f58:	bd70      	pop	{r4, r5, r6, pc}
 8005f5a:	220c      	movs	r2, #12
 8005f5c:	2600      	movs	r6, #0
 8005f5e:	6002      	str	r2, [r0, #0]
 8005f60:	e7f9      	b.n	8005f56 <_calloc_r+0x12>
 8005f62:	462a      	mov	r2, r5
 8005f64:	4621      	mov	r1, r4
 8005f66:	f7ff faed 	bl	8005544 <memset>
 8005f6a:	e7f4      	b.n	8005f56 <_calloc_r+0x12>

08005f6c <sbrk_aligned>:
 8005f6c:	b570      	push	{r4, r5, r6, lr}
 8005f6e:	4e0e      	ldr	r6, [pc, #56]	; (8005fa8 <sbrk_aligned+0x3c>)
 8005f70:	460c      	mov	r4, r1
 8005f72:	6831      	ldr	r1, [r6, #0]
 8005f74:	4605      	mov	r5, r0
 8005f76:	b911      	cbnz	r1, 8005f7e <sbrk_aligned+0x12>
 8005f78:	f000 fbac 	bl	80066d4 <_sbrk_r>
 8005f7c:	6030      	str	r0, [r6, #0]
 8005f7e:	4621      	mov	r1, r4
 8005f80:	4628      	mov	r0, r5
 8005f82:	f000 fba7 	bl	80066d4 <_sbrk_r>
 8005f86:	1c43      	adds	r3, r0, #1
 8005f88:	d00a      	beq.n	8005fa0 <sbrk_aligned+0x34>
 8005f8a:	1cc4      	adds	r4, r0, #3
 8005f8c:	f024 0403 	bic.w	r4, r4, #3
 8005f90:	42a0      	cmp	r0, r4
 8005f92:	d007      	beq.n	8005fa4 <sbrk_aligned+0x38>
 8005f94:	1a21      	subs	r1, r4, r0
 8005f96:	4628      	mov	r0, r5
 8005f98:	f000 fb9c 	bl	80066d4 <_sbrk_r>
 8005f9c:	3001      	adds	r0, #1
 8005f9e:	d101      	bne.n	8005fa4 <sbrk_aligned+0x38>
 8005fa0:	f04f 34ff 	mov.w	r4, #4294967295
 8005fa4:	4620      	mov	r0, r4
 8005fa6:	bd70      	pop	{r4, r5, r6, pc}
 8005fa8:	2000021c 	.word	0x2000021c

08005fac <_malloc_r>:
 8005fac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005fb0:	1ccd      	adds	r5, r1, #3
 8005fb2:	f025 0503 	bic.w	r5, r5, #3
 8005fb6:	3508      	adds	r5, #8
 8005fb8:	2d0c      	cmp	r5, #12
 8005fba:	bf38      	it	cc
 8005fbc:	250c      	movcc	r5, #12
 8005fbe:	2d00      	cmp	r5, #0
 8005fc0:	4607      	mov	r7, r0
 8005fc2:	db01      	blt.n	8005fc8 <_malloc_r+0x1c>
 8005fc4:	42a9      	cmp	r1, r5
 8005fc6:	d905      	bls.n	8005fd4 <_malloc_r+0x28>
 8005fc8:	230c      	movs	r3, #12
 8005fca:	2600      	movs	r6, #0
 8005fcc:	603b      	str	r3, [r7, #0]
 8005fce:	4630      	mov	r0, r6
 8005fd0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005fd4:	4e2e      	ldr	r6, [pc, #184]	; (8006090 <_malloc_r+0xe4>)
 8005fd6:	f001 fa7d 	bl	80074d4 <__malloc_lock>
 8005fda:	6833      	ldr	r3, [r6, #0]
 8005fdc:	461c      	mov	r4, r3
 8005fde:	bb34      	cbnz	r4, 800602e <_malloc_r+0x82>
 8005fe0:	4629      	mov	r1, r5
 8005fe2:	4638      	mov	r0, r7
 8005fe4:	f7ff ffc2 	bl	8005f6c <sbrk_aligned>
 8005fe8:	1c43      	adds	r3, r0, #1
 8005fea:	4604      	mov	r4, r0
 8005fec:	d14d      	bne.n	800608a <_malloc_r+0xde>
 8005fee:	6834      	ldr	r4, [r6, #0]
 8005ff0:	4626      	mov	r6, r4
 8005ff2:	2e00      	cmp	r6, #0
 8005ff4:	d140      	bne.n	8006078 <_malloc_r+0xcc>
 8005ff6:	6823      	ldr	r3, [r4, #0]
 8005ff8:	4631      	mov	r1, r6
 8005ffa:	4638      	mov	r0, r7
 8005ffc:	eb04 0803 	add.w	r8, r4, r3
 8006000:	f000 fb68 	bl	80066d4 <_sbrk_r>
 8006004:	4580      	cmp	r8, r0
 8006006:	d13a      	bne.n	800607e <_malloc_r+0xd2>
 8006008:	6821      	ldr	r1, [r4, #0]
 800600a:	3503      	adds	r5, #3
 800600c:	1a6d      	subs	r5, r5, r1
 800600e:	f025 0503 	bic.w	r5, r5, #3
 8006012:	3508      	adds	r5, #8
 8006014:	2d0c      	cmp	r5, #12
 8006016:	bf38      	it	cc
 8006018:	250c      	movcc	r5, #12
 800601a:	4638      	mov	r0, r7
 800601c:	4629      	mov	r1, r5
 800601e:	f7ff ffa5 	bl	8005f6c <sbrk_aligned>
 8006022:	3001      	adds	r0, #1
 8006024:	d02b      	beq.n	800607e <_malloc_r+0xd2>
 8006026:	6823      	ldr	r3, [r4, #0]
 8006028:	442b      	add	r3, r5
 800602a:	6023      	str	r3, [r4, #0]
 800602c:	e00e      	b.n	800604c <_malloc_r+0xa0>
 800602e:	6822      	ldr	r2, [r4, #0]
 8006030:	1b52      	subs	r2, r2, r5
 8006032:	d41e      	bmi.n	8006072 <_malloc_r+0xc6>
 8006034:	2a0b      	cmp	r2, #11
 8006036:	d916      	bls.n	8006066 <_malloc_r+0xba>
 8006038:	1961      	adds	r1, r4, r5
 800603a:	42a3      	cmp	r3, r4
 800603c:	6025      	str	r5, [r4, #0]
 800603e:	bf18      	it	ne
 8006040:	6059      	strne	r1, [r3, #4]
 8006042:	6863      	ldr	r3, [r4, #4]
 8006044:	bf08      	it	eq
 8006046:	6031      	streq	r1, [r6, #0]
 8006048:	5162      	str	r2, [r4, r5]
 800604a:	604b      	str	r3, [r1, #4]
 800604c:	4638      	mov	r0, r7
 800604e:	f104 060b 	add.w	r6, r4, #11
 8006052:	f001 fa45 	bl	80074e0 <__malloc_unlock>
 8006056:	f026 0607 	bic.w	r6, r6, #7
 800605a:	1d23      	adds	r3, r4, #4
 800605c:	1af2      	subs	r2, r6, r3
 800605e:	d0b6      	beq.n	8005fce <_malloc_r+0x22>
 8006060:	1b9b      	subs	r3, r3, r6
 8006062:	50a3      	str	r3, [r4, r2]
 8006064:	e7b3      	b.n	8005fce <_malloc_r+0x22>
 8006066:	6862      	ldr	r2, [r4, #4]
 8006068:	42a3      	cmp	r3, r4
 800606a:	bf0c      	ite	eq
 800606c:	6032      	streq	r2, [r6, #0]
 800606e:	605a      	strne	r2, [r3, #4]
 8006070:	e7ec      	b.n	800604c <_malloc_r+0xa0>
 8006072:	4623      	mov	r3, r4
 8006074:	6864      	ldr	r4, [r4, #4]
 8006076:	e7b2      	b.n	8005fde <_malloc_r+0x32>
 8006078:	4634      	mov	r4, r6
 800607a:	6876      	ldr	r6, [r6, #4]
 800607c:	e7b9      	b.n	8005ff2 <_malloc_r+0x46>
 800607e:	230c      	movs	r3, #12
 8006080:	4638      	mov	r0, r7
 8006082:	603b      	str	r3, [r7, #0]
 8006084:	f001 fa2c 	bl	80074e0 <__malloc_unlock>
 8006088:	e7a1      	b.n	8005fce <_malloc_r+0x22>
 800608a:	6025      	str	r5, [r4, #0]
 800608c:	e7de      	b.n	800604c <_malloc_r+0xa0>
 800608e:	bf00      	nop
 8006090:	20000218 	.word	0x20000218

08006094 <_realloc_r>:
 8006094:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006098:	4680      	mov	r8, r0
 800609a:	4614      	mov	r4, r2
 800609c:	460e      	mov	r6, r1
 800609e:	b921      	cbnz	r1, 80060aa <_realloc_r+0x16>
 80060a0:	4611      	mov	r1, r2
 80060a2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80060a6:	f7ff bf81 	b.w	8005fac <_malloc_r>
 80060aa:	b92a      	cbnz	r2, 80060b8 <_realloc_r+0x24>
 80060ac:	f001 fa1e 	bl	80074ec <_free_r>
 80060b0:	4625      	mov	r5, r4
 80060b2:	4628      	mov	r0, r5
 80060b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80060b8:	f001 fa60 	bl	800757c <_malloc_usable_size_r>
 80060bc:	4284      	cmp	r4, r0
 80060be:	4607      	mov	r7, r0
 80060c0:	d802      	bhi.n	80060c8 <_realloc_r+0x34>
 80060c2:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80060c6:	d812      	bhi.n	80060ee <_realloc_r+0x5a>
 80060c8:	4621      	mov	r1, r4
 80060ca:	4640      	mov	r0, r8
 80060cc:	f7ff ff6e 	bl	8005fac <_malloc_r>
 80060d0:	4605      	mov	r5, r0
 80060d2:	2800      	cmp	r0, #0
 80060d4:	d0ed      	beq.n	80060b2 <_realloc_r+0x1e>
 80060d6:	42bc      	cmp	r4, r7
 80060d8:	4622      	mov	r2, r4
 80060da:	4631      	mov	r1, r6
 80060dc:	bf28      	it	cs
 80060de:	463a      	movcs	r2, r7
 80060e0:	f001 f9d0 	bl	8007484 <memcpy>
 80060e4:	4631      	mov	r1, r6
 80060e6:	4640      	mov	r0, r8
 80060e8:	f001 fa00 	bl	80074ec <_free_r>
 80060ec:	e7e1      	b.n	80060b2 <_realloc_r+0x1e>
 80060ee:	4635      	mov	r5, r6
 80060f0:	e7df      	b.n	80060b2 <_realloc_r+0x1e>

080060f2 <__ssputs_r>:
 80060f2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80060f6:	688e      	ldr	r6, [r1, #8]
 80060f8:	4682      	mov	sl, r0
 80060fa:	429e      	cmp	r6, r3
 80060fc:	460c      	mov	r4, r1
 80060fe:	4690      	mov	r8, r2
 8006100:	461f      	mov	r7, r3
 8006102:	d838      	bhi.n	8006176 <__ssputs_r+0x84>
 8006104:	898a      	ldrh	r2, [r1, #12]
 8006106:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800610a:	d032      	beq.n	8006172 <__ssputs_r+0x80>
 800610c:	6825      	ldr	r5, [r4, #0]
 800610e:	6909      	ldr	r1, [r1, #16]
 8006110:	3301      	adds	r3, #1
 8006112:	eba5 0901 	sub.w	r9, r5, r1
 8006116:	6965      	ldr	r5, [r4, #20]
 8006118:	444b      	add	r3, r9
 800611a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800611e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8006122:	106d      	asrs	r5, r5, #1
 8006124:	429d      	cmp	r5, r3
 8006126:	bf38      	it	cc
 8006128:	461d      	movcc	r5, r3
 800612a:	0553      	lsls	r3, r2, #21
 800612c:	d531      	bpl.n	8006192 <__ssputs_r+0xa0>
 800612e:	4629      	mov	r1, r5
 8006130:	f7ff ff3c 	bl	8005fac <_malloc_r>
 8006134:	4606      	mov	r6, r0
 8006136:	b950      	cbnz	r0, 800614e <__ssputs_r+0x5c>
 8006138:	230c      	movs	r3, #12
 800613a:	f04f 30ff 	mov.w	r0, #4294967295
 800613e:	f8ca 3000 	str.w	r3, [sl]
 8006142:	89a3      	ldrh	r3, [r4, #12]
 8006144:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006148:	81a3      	strh	r3, [r4, #12]
 800614a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800614e:	464a      	mov	r2, r9
 8006150:	6921      	ldr	r1, [r4, #16]
 8006152:	f001 f997 	bl	8007484 <memcpy>
 8006156:	89a3      	ldrh	r3, [r4, #12]
 8006158:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800615c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006160:	81a3      	strh	r3, [r4, #12]
 8006162:	6126      	str	r6, [r4, #16]
 8006164:	444e      	add	r6, r9
 8006166:	6026      	str	r6, [r4, #0]
 8006168:	463e      	mov	r6, r7
 800616a:	6165      	str	r5, [r4, #20]
 800616c:	eba5 0509 	sub.w	r5, r5, r9
 8006170:	60a5      	str	r5, [r4, #8]
 8006172:	42be      	cmp	r6, r7
 8006174:	d900      	bls.n	8006178 <__ssputs_r+0x86>
 8006176:	463e      	mov	r6, r7
 8006178:	4632      	mov	r2, r6
 800617a:	4641      	mov	r1, r8
 800617c:	6820      	ldr	r0, [r4, #0]
 800617e:	f001 f98f 	bl	80074a0 <memmove>
 8006182:	68a3      	ldr	r3, [r4, #8]
 8006184:	2000      	movs	r0, #0
 8006186:	1b9b      	subs	r3, r3, r6
 8006188:	60a3      	str	r3, [r4, #8]
 800618a:	6823      	ldr	r3, [r4, #0]
 800618c:	4433      	add	r3, r6
 800618e:	6023      	str	r3, [r4, #0]
 8006190:	e7db      	b.n	800614a <__ssputs_r+0x58>
 8006192:	462a      	mov	r2, r5
 8006194:	f7ff ff7e 	bl	8006094 <_realloc_r>
 8006198:	4606      	mov	r6, r0
 800619a:	2800      	cmp	r0, #0
 800619c:	d1e1      	bne.n	8006162 <__ssputs_r+0x70>
 800619e:	4650      	mov	r0, sl
 80061a0:	6921      	ldr	r1, [r4, #16]
 80061a2:	f001 f9a3 	bl	80074ec <_free_r>
 80061a6:	e7c7      	b.n	8006138 <__ssputs_r+0x46>

080061a8 <_svfiprintf_r>:
 80061a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80061ac:	4698      	mov	r8, r3
 80061ae:	898b      	ldrh	r3, [r1, #12]
 80061b0:	4607      	mov	r7, r0
 80061b2:	061b      	lsls	r3, r3, #24
 80061b4:	460d      	mov	r5, r1
 80061b6:	4614      	mov	r4, r2
 80061b8:	b09d      	sub	sp, #116	; 0x74
 80061ba:	d50e      	bpl.n	80061da <_svfiprintf_r+0x32>
 80061bc:	690b      	ldr	r3, [r1, #16]
 80061be:	b963      	cbnz	r3, 80061da <_svfiprintf_r+0x32>
 80061c0:	2140      	movs	r1, #64	; 0x40
 80061c2:	f7ff fef3 	bl	8005fac <_malloc_r>
 80061c6:	6028      	str	r0, [r5, #0]
 80061c8:	6128      	str	r0, [r5, #16]
 80061ca:	b920      	cbnz	r0, 80061d6 <_svfiprintf_r+0x2e>
 80061cc:	230c      	movs	r3, #12
 80061ce:	603b      	str	r3, [r7, #0]
 80061d0:	f04f 30ff 	mov.w	r0, #4294967295
 80061d4:	e0d1      	b.n	800637a <_svfiprintf_r+0x1d2>
 80061d6:	2340      	movs	r3, #64	; 0x40
 80061d8:	616b      	str	r3, [r5, #20]
 80061da:	2300      	movs	r3, #0
 80061dc:	9309      	str	r3, [sp, #36]	; 0x24
 80061de:	2320      	movs	r3, #32
 80061e0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80061e4:	2330      	movs	r3, #48	; 0x30
 80061e6:	f04f 0901 	mov.w	r9, #1
 80061ea:	f8cd 800c 	str.w	r8, [sp, #12]
 80061ee:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8006394 <_svfiprintf_r+0x1ec>
 80061f2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80061f6:	4623      	mov	r3, r4
 80061f8:	469a      	mov	sl, r3
 80061fa:	f813 2b01 	ldrb.w	r2, [r3], #1
 80061fe:	b10a      	cbz	r2, 8006204 <_svfiprintf_r+0x5c>
 8006200:	2a25      	cmp	r2, #37	; 0x25
 8006202:	d1f9      	bne.n	80061f8 <_svfiprintf_r+0x50>
 8006204:	ebba 0b04 	subs.w	fp, sl, r4
 8006208:	d00b      	beq.n	8006222 <_svfiprintf_r+0x7a>
 800620a:	465b      	mov	r3, fp
 800620c:	4622      	mov	r2, r4
 800620e:	4629      	mov	r1, r5
 8006210:	4638      	mov	r0, r7
 8006212:	f7ff ff6e 	bl	80060f2 <__ssputs_r>
 8006216:	3001      	adds	r0, #1
 8006218:	f000 80aa 	beq.w	8006370 <_svfiprintf_r+0x1c8>
 800621c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800621e:	445a      	add	r2, fp
 8006220:	9209      	str	r2, [sp, #36]	; 0x24
 8006222:	f89a 3000 	ldrb.w	r3, [sl]
 8006226:	2b00      	cmp	r3, #0
 8006228:	f000 80a2 	beq.w	8006370 <_svfiprintf_r+0x1c8>
 800622c:	2300      	movs	r3, #0
 800622e:	f04f 32ff 	mov.w	r2, #4294967295
 8006232:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006236:	f10a 0a01 	add.w	sl, sl, #1
 800623a:	9304      	str	r3, [sp, #16]
 800623c:	9307      	str	r3, [sp, #28]
 800623e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006242:	931a      	str	r3, [sp, #104]	; 0x68
 8006244:	4654      	mov	r4, sl
 8006246:	2205      	movs	r2, #5
 8006248:	f814 1b01 	ldrb.w	r1, [r4], #1
 800624c:	4851      	ldr	r0, [pc, #324]	; (8006394 <_svfiprintf_r+0x1ec>)
 800624e:	f001 f90b 	bl	8007468 <memchr>
 8006252:	9a04      	ldr	r2, [sp, #16]
 8006254:	b9d8      	cbnz	r0, 800628e <_svfiprintf_r+0xe6>
 8006256:	06d0      	lsls	r0, r2, #27
 8006258:	bf44      	itt	mi
 800625a:	2320      	movmi	r3, #32
 800625c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006260:	0711      	lsls	r1, r2, #28
 8006262:	bf44      	itt	mi
 8006264:	232b      	movmi	r3, #43	; 0x2b
 8006266:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800626a:	f89a 3000 	ldrb.w	r3, [sl]
 800626e:	2b2a      	cmp	r3, #42	; 0x2a
 8006270:	d015      	beq.n	800629e <_svfiprintf_r+0xf6>
 8006272:	4654      	mov	r4, sl
 8006274:	2000      	movs	r0, #0
 8006276:	f04f 0c0a 	mov.w	ip, #10
 800627a:	9a07      	ldr	r2, [sp, #28]
 800627c:	4621      	mov	r1, r4
 800627e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006282:	3b30      	subs	r3, #48	; 0x30
 8006284:	2b09      	cmp	r3, #9
 8006286:	d94e      	bls.n	8006326 <_svfiprintf_r+0x17e>
 8006288:	b1b0      	cbz	r0, 80062b8 <_svfiprintf_r+0x110>
 800628a:	9207      	str	r2, [sp, #28]
 800628c:	e014      	b.n	80062b8 <_svfiprintf_r+0x110>
 800628e:	eba0 0308 	sub.w	r3, r0, r8
 8006292:	fa09 f303 	lsl.w	r3, r9, r3
 8006296:	4313      	orrs	r3, r2
 8006298:	46a2      	mov	sl, r4
 800629a:	9304      	str	r3, [sp, #16]
 800629c:	e7d2      	b.n	8006244 <_svfiprintf_r+0x9c>
 800629e:	9b03      	ldr	r3, [sp, #12]
 80062a0:	1d19      	adds	r1, r3, #4
 80062a2:	681b      	ldr	r3, [r3, #0]
 80062a4:	9103      	str	r1, [sp, #12]
 80062a6:	2b00      	cmp	r3, #0
 80062a8:	bfbb      	ittet	lt
 80062aa:	425b      	neglt	r3, r3
 80062ac:	f042 0202 	orrlt.w	r2, r2, #2
 80062b0:	9307      	strge	r3, [sp, #28]
 80062b2:	9307      	strlt	r3, [sp, #28]
 80062b4:	bfb8      	it	lt
 80062b6:	9204      	strlt	r2, [sp, #16]
 80062b8:	7823      	ldrb	r3, [r4, #0]
 80062ba:	2b2e      	cmp	r3, #46	; 0x2e
 80062bc:	d10c      	bne.n	80062d8 <_svfiprintf_r+0x130>
 80062be:	7863      	ldrb	r3, [r4, #1]
 80062c0:	2b2a      	cmp	r3, #42	; 0x2a
 80062c2:	d135      	bne.n	8006330 <_svfiprintf_r+0x188>
 80062c4:	9b03      	ldr	r3, [sp, #12]
 80062c6:	3402      	adds	r4, #2
 80062c8:	1d1a      	adds	r2, r3, #4
 80062ca:	681b      	ldr	r3, [r3, #0]
 80062cc:	9203      	str	r2, [sp, #12]
 80062ce:	2b00      	cmp	r3, #0
 80062d0:	bfb8      	it	lt
 80062d2:	f04f 33ff 	movlt.w	r3, #4294967295
 80062d6:	9305      	str	r3, [sp, #20]
 80062d8:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 8006398 <_svfiprintf_r+0x1f0>
 80062dc:	2203      	movs	r2, #3
 80062de:	4650      	mov	r0, sl
 80062e0:	7821      	ldrb	r1, [r4, #0]
 80062e2:	f001 f8c1 	bl	8007468 <memchr>
 80062e6:	b140      	cbz	r0, 80062fa <_svfiprintf_r+0x152>
 80062e8:	2340      	movs	r3, #64	; 0x40
 80062ea:	eba0 000a 	sub.w	r0, r0, sl
 80062ee:	fa03 f000 	lsl.w	r0, r3, r0
 80062f2:	9b04      	ldr	r3, [sp, #16]
 80062f4:	3401      	adds	r4, #1
 80062f6:	4303      	orrs	r3, r0
 80062f8:	9304      	str	r3, [sp, #16]
 80062fa:	f814 1b01 	ldrb.w	r1, [r4], #1
 80062fe:	2206      	movs	r2, #6
 8006300:	4826      	ldr	r0, [pc, #152]	; (800639c <_svfiprintf_r+0x1f4>)
 8006302:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006306:	f001 f8af 	bl	8007468 <memchr>
 800630a:	2800      	cmp	r0, #0
 800630c:	d038      	beq.n	8006380 <_svfiprintf_r+0x1d8>
 800630e:	4b24      	ldr	r3, [pc, #144]	; (80063a0 <_svfiprintf_r+0x1f8>)
 8006310:	bb1b      	cbnz	r3, 800635a <_svfiprintf_r+0x1b2>
 8006312:	9b03      	ldr	r3, [sp, #12]
 8006314:	3307      	adds	r3, #7
 8006316:	f023 0307 	bic.w	r3, r3, #7
 800631a:	3308      	adds	r3, #8
 800631c:	9303      	str	r3, [sp, #12]
 800631e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006320:	4433      	add	r3, r6
 8006322:	9309      	str	r3, [sp, #36]	; 0x24
 8006324:	e767      	b.n	80061f6 <_svfiprintf_r+0x4e>
 8006326:	460c      	mov	r4, r1
 8006328:	2001      	movs	r0, #1
 800632a:	fb0c 3202 	mla	r2, ip, r2, r3
 800632e:	e7a5      	b.n	800627c <_svfiprintf_r+0xd4>
 8006330:	2300      	movs	r3, #0
 8006332:	f04f 0c0a 	mov.w	ip, #10
 8006336:	4619      	mov	r1, r3
 8006338:	3401      	adds	r4, #1
 800633a:	9305      	str	r3, [sp, #20]
 800633c:	4620      	mov	r0, r4
 800633e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006342:	3a30      	subs	r2, #48	; 0x30
 8006344:	2a09      	cmp	r2, #9
 8006346:	d903      	bls.n	8006350 <_svfiprintf_r+0x1a8>
 8006348:	2b00      	cmp	r3, #0
 800634a:	d0c5      	beq.n	80062d8 <_svfiprintf_r+0x130>
 800634c:	9105      	str	r1, [sp, #20]
 800634e:	e7c3      	b.n	80062d8 <_svfiprintf_r+0x130>
 8006350:	4604      	mov	r4, r0
 8006352:	2301      	movs	r3, #1
 8006354:	fb0c 2101 	mla	r1, ip, r1, r2
 8006358:	e7f0      	b.n	800633c <_svfiprintf_r+0x194>
 800635a:	ab03      	add	r3, sp, #12
 800635c:	9300      	str	r3, [sp, #0]
 800635e:	462a      	mov	r2, r5
 8006360:	4638      	mov	r0, r7
 8006362:	4b10      	ldr	r3, [pc, #64]	; (80063a4 <_svfiprintf_r+0x1fc>)
 8006364:	a904      	add	r1, sp, #16
 8006366:	f3af 8000 	nop.w
 800636a:	1c42      	adds	r2, r0, #1
 800636c:	4606      	mov	r6, r0
 800636e:	d1d6      	bne.n	800631e <_svfiprintf_r+0x176>
 8006370:	89ab      	ldrh	r3, [r5, #12]
 8006372:	065b      	lsls	r3, r3, #25
 8006374:	f53f af2c 	bmi.w	80061d0 <_svfiprintf_r+0x28>
 8006378:	9809      	ldr	r0, [sp, #36]	; 0x24
 800637a:	b01d      	add	sp, #116	; 0x74
 800637c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006380:	ab03      	add	r3, sp, #12
 8006382:	9300      	str	r3, [sp, #0]
 8006384:	462a      	mov	r2, r5
 8006386:	4638      	mov	r0, r7
 8006388:	4b06      	ldr	r3, [pc, #24]	; (80063a4 <_svfiprintf_r+0x1fc>)
 800638a:	a904      	add	r1, sp, #16
 800638c:	f000 f87c 	bl	8006488 <_printf_i>
 8006390:	e7eb      	b.n	800636a <_svfiprintf_r+0x1c2>
 8006392:	bf00      	nop
 8006394:	08008ffc 	.word	0x08008ffc
 8006398:	08009002 	.word	0x08009002
 800639c:	08009006 	.word	0x08009006
 80063a0:	00000000 	.word	0x00000000
 80063a4:	080060f3 	.word	0x080060f3

080063a8 <_printf_common>:
 80063a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80063ac:	4616      	mov	r6, r2
 80063ae:	4699      	mov	r9, r3
 80063b0:	688a      	ldr	r2, [r1, #8]
 80063b2:	690b      	ldr	r3, [r1, #16]
 80063b4:	4607      	mov	r7, r0
 80063b6:	4293      	cmp	r3, r2
 80063b8:	bfb8      	it	lt
 80063ba:	4613      	movlt	r3, r2
 80063bc:	6033      	str	r3, [r6, #0]
 80063be:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80063c2:	460c      	mov	r4, r1
 80063c4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80063c8:	b10a      	cbz	r2, 80063ce <_printf_common+0x26>
 80063ca:	3301      	adds	r3, #1
 80063cc:	6033      	str	r3, [r6, #0]
 80063ce:	6823      	ldr	r3, [r4, #0]
 80063d0:	0699      	lsls	r1, r3, #26
 80063d2:	bf42      	ittt	mi
 80063d4:	6833      	ldrmi	r3, [r6, #0]
 80063d6:	3302      	addmi	r3, #2
 80063d8:	6033      	strmi	r3, [r6, #0]
 80063da:	6825      	ldr	r5, [r4, #0]
 80063dc:	f015 0506 	ands.w	r5, r5, #6
 80063e0:	d106      	bne.n	80063f0 <_printf_common+0x48>
 80063e2:	f104 0a19 	add.w	sl, r4, #25
 80063e6:	68e3      	ldr	r3, [r4, #12]
 80063e8:	6832      	ldr	r2, [r6, #0]
 80063ea:	1a9b      	subs	r3, r3, r2
 80063ec:	42ab      	cmp	r3, r5
 80063ee:	dc28      	bgt.n	8006442 <_printf_common+0x9a>
 80063f0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80063f4:	1e13      	subs	r3, r2, #0
 80063f6:	6822      	ldr	r2, [r4, #0]
 80063f8:	bf18      	it	ne
 80063fa:	2301      	movne	r3, #1
 80063fc:	0692      	lsls	r2, r2, #26
 80063fe:	d42d      	bmi.n	800645c <_printf_common+0xb4>
 8006400:	4649      	mov	r1, r9
 8006402:	4638      	mov	r0, r7
 8006404:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006408:	47c0      	blx	r8
 800640a:	3001      	adds	r0, #1
 800640c:	d020      	beq.n	8006450 <_printf_common+0xa8>
 800640e:	6823      	ldr	r3, [r4, #0]
 8006410:	68e5      	ldr	r5, [r4, #12]
 8006412:	f003 0306 	and.w	r3, r3, #6
 8006416:	2b04      	cmp	r3, #4
 8006418:	bf18      	it	ne
 800641a:	2500      	movne	r5, #0
 800641c:	6832      	ldr	r2, [r6, #0]
 800641e:	f04f 0600 	mov.w	r6, #0
 8006422:	68a3      	ldr	r3, [r4, #8]
 8006424:	bf08      	it	eq
 8006426:	1aad      	subeq	r5, r5, r2
 8006428:	6922      	ldr	r2, [r4, #16]
 800642a:	bf08      	it	eq
 800642c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006430:	4293      	cmp	r3, r2
 8006432:	bfc4      	itt	gt
 8006434:	1a9b      	subgt	r3, r3, r2
 8006436:	18ed      	addgt	r5, r5, r3
 8006438:	341a      	adds	r4, #26
 800643a:	42b5      	cmp	r5, r6
 800643c:	d11a      	bne.n	8006474 <_printf_common+0xcc>
 800643e:	2000      	movs	r0, #0
 8006440:	e008      	b.n	8006454 <_printf_common+0xac>
 8006442:	2301      	movs	r3, #1
 8006444:	4652      	mov	r2, sl
 8006446:	4649      	mov	r1, r9
 8006448:	4638      	mov	r0, r7
 800644a:	47c0      	blx	r8
 800644c:	3001      	adds	r0, #1
 800644e:	d103      	bne.n	8006458 <_printf_common+0xb0>
 8006450:	f04f 30ff 	mov.w	r0, #4294967295
 8006454:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006458:	3501      	adds	r5, #1
 800645a:	e7c4      	b.n	80063e6 <_printf_common+0x3e>
 800645c:	2030      	movs	r0, #48	; 0x30
 800645e:	18e1      	adds	r1, r4, r3
 8006460:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006464:	1c5a      	adds	r2, r3, #1
 8006466:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800646a:	4422      	add	r2, r4
 800646c:	3302      	adds	r3, #2
 800646e:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006472:	e7c5      	b.n	8006400 <_printf_common+0x58>
 8006474:	2301      	movs	r3, #1
 8006476:	4622      	mov	r2, r4
 8006478:	4649      	mov	r1, r9
 800647a:	4638      	mov	r0, r7
 800647c:	47c0      	blx	r8
 800647e:	3001      	adds	r0, #1
 8006480:	d0e6      	beq.n	8006450 <_printf_common+0xa8>
 8006482:	3601      	adds	r6, #1
 8006484:	e7d9      	b.n	800643a <_printf_common+0x92>
	...

08006488 <_printf_i>:
 8006488:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800648c:	7e0f      	ldrb	r7, [r1, #24]
 800648e:	4691      	mov	r9, r2
 8006490:	2f78      	cmp	r7, #120	; 0x78
 8006492:	4680      	mov	r8, r0
 8006494:	460c      	mov	r4, r1
 8006496:	469a      	mov	sl, r3
 8006498:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800649a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800649e:	d807      	bhi.n	80064b0 <_printf_i+0x28>
 80064a0:	2f62      	cmp	r7, #98	; 0x62
 80064a2:	d80a      	bhi.n	80064ba <_printf_i+0x32>
 80064a4:	2f00      	cmp	r7, #0
 80064a6:	f000 80d9 	beq.w	800665c <_printf_i+0x1d4>
 80064aa:	2f58      	cmp	r7, #88	; 0x58
 80064ac:	f000 80a4 	beq.w	80065f8 <_printf_i+0x170>
 80064b0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80064b4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80064b8:	e03a      	b.n	8006530 <_printf_i+0xa8>
 80064ba:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80064be:	2b15      	cmp	r3, #21
 80064c0:	d8f6      	bhi.n	80064b0 <_printf_i+0x28>
 80064c2:	a101      	add	r1, pc, #4	; (adr r1, 80064c8 <_printf_i+0x40>)
 80064c4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80064c8:	08006521 	.word	0x08006521
 80064cc:	08006535 	.word	0x08006535
 80064d0:	080064b1 	.word	0x080064b1
 80064d4:	080064b1 	.word	0x080064b1
 80064d8:	080064b1 	.word	0x080064b1
 80064dc:	080064b1 	.word	0x080064b1
 80064e0:	08006535 	.word	0x08006535
 80064e4:	080064b1 	.word	0x080064b1
 80064e8:	080064b1 	.word	0x080064b1
 80064ec:	080064b1 	.word	0x080064b1
 80064f0:	080064b1 	.word	0x080064b1
 80064f4:	08006643 	.word	0x08006643
 80064f8:	08006565 	.word	0x08006565
 80064fc:	08006625 	.word	0x08006625
 8006500:	080064b1 	.word	0x080064b1
 8006504:	080064b1 	.word	0x080064b1
 8006508:	08006665 	.word	0x08006665
 800650c:	080064b1 	.word	0x080064b1
 8006510:	08006565 	.word	0x08006565
 8006514:	080064b1 	.word	0x080064b1
 8006518:	080064b1 	.word	0x080064b1
 800651c:	0800662d 	.word	0x0800662d
 8006520:	682b      	ldr	r3, [r5, #0]
 8006522:	1d1a      	adds	r2, r3, #4
 8006524:	681b      	ldr	r3, [r3, #0]
 8006526:	602a      	str	r2, [r5, #0]
 8006528:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800652c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006530:	2301      	movs	r3, #1
 8006532:	e0a4      	b.n	800667e <_printf_i+0x1f6>
 8006534:	6820      	ldr	r0, [r4, #0]
 8006536:	6829      	ldr	r1, [r5, #0]
 8006538:	0606      	lsls	r6, r0, #24
 800653a:	f101 0304 	add.w	r3, r1, #4
 800653e:	d50a      	bpl.n	8006556 <_printf_i+0xce>
 8006540:	680e      	ldr	r6, [r1, #0]
 8006542:	602b      	str	r3, [r5, #0]
 8006544:	2e00      	cmp	r6, #0
 8006546:	da03      	bge.n	8006550 <_printf_i+0xc8>
 8006548:	232d      	movs	r3, #45	; 0x2d
 800654a:	4276      	negs	r6, r6
 800654c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006550:	230a      	movs	r3, #10
 8006552:	485e      	ldr	r0, [pc, #376]	; (80066cc <_printf_i+0x244>)
 8006554:	e019      	b.n	800658a <_printf_i+0x102>
 8006556:	680e      	ldr	r6, [r1, #0]
 8006558:	f010 0f40 	tst.w	r0, #64	; 0x40
 800655c:	602b      	str	r3, [r5, #0]
 800655e:	bf18      	it	ne
 8006560:	b236      	sxthne	r6, r6
 8006562:	e7ef      	b.n	8006544 <_printf_i+0xbc>
 8006564:	682b      	ldr	r3, [r5, #0]
 8006566:	6820      	ldr	r0, [r4, #0]
 8006568:	1d19      	adds	r1, r3, #4
 800656a:	6029      	str	r1, [r5, #0]
 800656c:	0601      	lsls	r1, r0, #24
 800656e:	d501      	bpl.n	8006574 <_printf_i+0xec>
 8006570:	681e      	ldr	r6, [r3, #0]
 8006572:	e002      	b.n	800657a <_printf_i+0xf2>
 8006574:	0646      	lsls	r6, r0, #25
 8006576:	d5fb      	bpl.n	8006570 <_printf_i+0xe8>
 8006578:	881e      	ldrh	r6, [r3, #0]
 800657a:	2f6f      	cmp	r7, #111	; 0x6f
 800657c:	bf0c      	ite	eq
 800657e:	2308      	moveq	r3, #8
 8006580:	230a      	movne	r3, #10
 8006582:	4852      	ldr	r0, [pc, #328]	; (80066cc <_printf_i+0x244>)
 8006584:	2100      	movs	r1, #0
 8006586:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800658a:	6865      	ldr	r5, [r4, #4]
 800658c:	2d00      	cmp	r5, #0
 800658e:	bfa8      	it	ge
 8006590:	6821      	ldrge	r1, [r4, #0]
 8006592:	60a5      	str	r5, [r4, #8]
 8006594:	bfa4      	itt	ge
 8006596:	f021 0104 	bicge.w	r1, r1, #4
 800659a:	6021      	strge	r1, [r4, #0]
 800659c:	b90e      	cbnz	r6, 80065a2 <_printf_i+0x11a>
 800659e:	2d00      	cmp	r5, #0
 80065a0:	d04d      	beq.n	800663e <_printf_i+0x1b6>
 80065a2:	4615      	mov	r5, r2
 80065a4:	fbb6 f1f3 	udiv	r1, r6, r3
 80065a8:	fb03 6711 	mls	r7, r3, r1, r6
 80065ac:	5dc7      	ldrb	r7, [r0, r7]
 80065ae:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80065b2:	4637      	mov	r7, r6
 80065b4:	42bb      	cmp	r3, r7
 80065b6:	460e      	mov	r6, r1
 80065b8:	d9f4      	bls.n	80065a4 <_printf_i+0x11c>
 80065ba:	2b08      	cmp	r3, #8
 80065bc:	d10b      	bne.n	80065d6 <_printf_i+0x14e>
 80065be:	6823      	ldr	r3, [r4, #0]
 80065c0:	07de      	lsls	r6, r3, #31
 80065c2:	d508      	bpl.n	80065d6 <_printf_i+0x14e>
 80065c4:	6923      	ldr	r3, [r4, #16]
 80065c6:	6861      	ldr	r1, [r4, #4]
 80065c8:	4299      	cmp	r1, r3
 80065ca:	bfde      	ittt	le
 80065cc:	2330      	movle	r3, #48	; 0x30
 80065ce:	f805 3c01 	strble.w	r3, [r5, #-1]
 80065d2:	f105 35ff 	addle.w	r5, r5, #4294967295
 80065d6:	1b52      	subs	r2, r2, r5
 80065d8:	6122      	str	r2, [r4, #16]
 80065da:	464b      	mov	r3, r9
 80065dc:	4621      	mov	r1, r4
 80065de:	4640      	mov	r0, r8
 80065e0:	f8cd a000 	str.w	sl, [sp]
 80065e4:	aa03      	add	r2, sp, #12
 80065e6:	f7ff fedf 	bl	80063a8 <_printf_common>
 80065ea:	3001      	adds	r0, #1
 80065ec:	d14c      	bne.n	8006688 <_printf_i+0x200>
 80065ee:	f04f 30ff 	mov.w	r0, #4294967295
 80065f2:	b004      	add	sp, #16
 80065f4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80065f8:	4834      	ldr	r0, [pc, #208]	; (80066cc <_printf_i+0x244>)
 80065fa:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80065fe:	6829      	ldr	r1, [r5, #0]
 8006600:	6823      	ldr	r3, [r4, #0]
 8006602:	f851 6b04 	ldr.w	r6, [r1], #4
 8006606:	6029      	str	r1, [r5, #0]
 8006608:	061d      	lsls	r5, r3, #24
 800660a:	d514      	bpl.n	8006636 <_printf_i+0x1ae>
 800660c:	07df      	lsls	r7, r3, #31
 800660e:	bf44      	itt	mi
 8006610:	f043 0320 	orrmi.w	r3, r3, #32
 8006614:	6023      	strmi	r3, [r4, #0]
 8006616:	b91e      	cbnz	r6, 8006620 <_printf_i+0x198>
 8006618:	6823      	ldr	r3, [r4, #0]
 800661a:	f023 0320 	bic.w	r3, r3, #32
 800661e:	6023      	str	r3, [r4, #0]
 8006620:	2310      	movs	r3, #16
 8006622:	e7af      	b.n	8006584 <_printf_i+0xfc>
 8006624:	6823      	ldr	r3, [r4, #0]
 8006626:	f043 0320 	orr.w	r3, r3, #32
 800662a:	6023      	str	r3, [r4, #0]
 800662c:	2378      	movs	r3, #120	; 0x78
 800662e:	4828      	ldr	r0, [pc, #160]	; (80066d0 <_printf_i+0x248>)
 8006630:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8006634:	e7e3      	b.n	80065fe <_printf_i+0x176>
 8006636:	0659      	lsls	r1, r3, #25
 8006638:	bf48      	it	mi
 800663a:	b2b6      	uxthmi	r6, r6
 800663c:	e7e6      	b.n	800660c <_printf_i+0x184>
 800663e:	4615      	mov	r5, r2
 8006640:	e7bb      	b.n	80065ba <_printf_i+0x132>
 8006642:	682b      	ldr	r3, [r5, #0]
 8006644:	6826      	ldr	r6, [r4, #0]
 8006646:	1d18      	adds	r0, r3, #4
 8006648:	6961      	ldr	r1, [r4, #20]
 800664a:	6028      	str	r0, [r5, #0]
 800664c:	0635      	lsls	r5, r6, #24
 800664e:	681b      	ldr	r3, [r3, #0]
 8006650:	d501      	bpl.n	8006656 <_printf_i+0x1ce>
 8006652:	6019      	str	r1, [r3, #0]
 8006654:	e002      	b.n	800665c <_printf_i+0x1d4>
 8006656:	0670      	lsls	r0, r6, #25
 8006658:	d5fb      	bpl.n	8006652 <_printf_i+0x1ca>
 800665a:	8019      	strh	r1, [r3, #0]
 800665c:	2300      	movs	r3, #0
 800665e:	4615      	mov	r5, r2
 8006660:	6123      	str	r3, [r4, #16]
 8006662:	e7ba      	b.n	80065da <_printf_i+0x152>
 8006664:	682b      	ldr	r3, [r5, #0]
 8006666:	2100      	movs	r1, #0
 8006668:	1d1a      	adds	r2, r3, #4
 800666a:	602a      	str	r2, [r5, #0]
 800666c:	681d      	ldr	r5, [r3, #0]
 800666e:	6862      	ldr	r2, [r4, #4]
 8006670:	4628      	mov	r0, r5
 8006672:	f000 fef9 	bl	8007468 <memchr>
 8006676:	b108      	cbz	r0, 800667c <_printf_i+0x1f4>
 8006678:	1b40      	subs	r0, r0, r5
 800667a:	6060      	str	r0, [r4, #4]
 800667c:	6863      	ldr	r3, [r4, #4]
 800667e:	6123      	str	r3, [r4, #16]
 8006680:	2300      	movs	r3, #0
 8006682:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006686:	e7a8      	b.n	80065da <_printf_i+0x152>
 8006688:	462a      	mov	r2, r5
 800668a:	4649      	mov	r1, r9
 800668c:	4640      	mov	r0, r8
 800668e:	6923      	ldr	r3, [r4, #16]
 8006690:	47d0      	blx	sl
 8006692:	3001      	adds	r0, #1
 8006694:	d0ab      	beq.n	80065ee <_printf_i+0x166>
 8006696:	6823      	ldr	r3, [r4, #0]
 8006698:	079b      	lsls	r3, r3, #30
 800669a:	d413      	bmi.n	80066c4 <_printf_i+0x23c>
 800669c:	68e0      	ldr	r0, [r4, #12]
 800669e:	9b03      	ldr	r3, [sp, #12]
 80066a0:	4298      	cmp	r0, r3
 80066a2:	bfb8      	it	lt
 80066a4:	4618      	movlt	r0, r3
 80066a6:	e7a4      	b.n	80065f2 <_printf_i+0x16a>
 80066a8:	2301      	movs	r3, #1
 80066aa:	4632      	mov	r2, r6
 80066ac:	4649      	mov	r1, r9
 80066ae:	4640      	mov	r0, r8
 80066b0:	47d0      	blx	sl
 80066b2:	3001      	adds	r0, #1
 80066b4:	d09b      	beq.n	80065ee <_printf_i+0x166>
 80066b6:	3501      	adds	r5, #1
 80066b8:	68e3      	ldr	r3, [r4, #12]
 80066ba:	9903      	ldr	r1, [sp, #12]
 80066bc:	1a5b      	subs	r3, r3, r1
 80066be:	42ab      	cmp	r3, r5
 80066c0:	dcf2      	bgt.n	80066a8 <_printf_i+0x220>
 80066c2:	e7eb      	b.n	800669c <_printf_i+0x214>
 80066c4:	2500      	movs	r5, #0
 80066c6:	f104 0619 	add.w	r6, r4, #25
 80066ca:	e7f5      	b.n	80066b8 <_printf_i+0x230>
 80066cc:	0800900d 	.word	0x0800900d
 80066d0:	0800901e 	.word	0x0800901e

080066d4 <_sbrk_r>:
 80066d4:	b538      	push	{r3, r4, r5, lr}
 80066d6:	2300      	movs	r3, #0
 80066d8:	4d05      	ldr	r5, [pc, #20]	; (80066f0 <_sbrk_r+0x1c>)
 80066da:	4604      	mov	r4, r0
 80066dc:	4608      	mov	r0, r1
 80066de:	602b      	str	r3, [r5, #0]
 80066e0:	f7fc fd46 	bl	8003170 <_sbrk>
 80066e4:	1c43      	adds	r3, r0, #1
 80066e6:	d102      	bne.n	80066ee <_sbrk_r+0x1a>
 80066e8:	682b      	ldr	r3, [r5, #0]
 80066ea:	b103      	cbz	r3, 80066ee <_sbrk_r+0x1a>
 80066ec:	6023      	str	r3, [r4, #0]
 80066ee:	bd38      	pop	{r3, r4, r5, pc}
 80066f0:	20000220 	.word	0x20000220

080066f4 <strcpy>:
 80066f4:	4603      	mov	r3, r0
 80066f6:	f811 2b01 	ldrb.w	r2, [r1], #1
 80066fa:	f803 2b01 	strb.w	r2, [r3], #1
 80066fe:	2a00      	cmp	r2, #0
 8006700:	d1f9      	bne.n	80066f6 <strcpy+0x2>
 8006702:	4770      	bx	lr

08006704 <__assert_func>:
 8006704:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8006706:	4614      	mov	r4, r2
 8006708:	461a      	mov	r2, r3
 800670a:	4b09      	ldr	r3, [pc, #36]	; (8006730 <__assert_func+0x2c>)
 800670c:	4605      	mov	r5, r0
 800670e:	681b      	ldr	r3, [r3, #0]
 8006710:	68d8      	ldr	r0, [r3, #12]
 8006712:	b14c      	cbz	r4, 8006728 <__assert_func+0x24>
 8006714:	4b07      	ldr	r3, [pc, #28]	; (8006734 <__assert_func+0x30>)
 8006716:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800671a:	9100      	str	r1, [sp, #0]
 800671c:	462b      	mov	r3, r5
 800671e:	4906      	ldr	r1, [pc, #24]	; (8006738 <__assert_func+0x34>)
 8006720:	f000 fe88 	bl	8007434 <fiprintf>
 8006724:	f001 f94a 	bl	80079bc <abort>
 8006728:	4b04      	ldr	r3, [pc, #16]	; (800673c <__assert_func+0x38>)
 800672a:	461c      	mov	r4, r3
 800672c:	e7f3      	b.n	8006716 <__assert_func+0x12>
 800672e:	bf00      	nop
 8006730:	2000002c 	.word	0x2000002c
 8006734:	0800902f 	.word	0x0800902f
 8006738:	0800903c 	.word	0x0800903c
 800673c:	0800906a 	.word	0x0800906a

08006740 <quorem>:
 8006740:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006744:	6903      	ldr	r3, [r0, #16]
 8006746:	690c      	ldr	r4, [r1, #16]
 8006748:	4607      	mov	r7, r0
 800674a:	42a3      	cmp	r3, r4
 800674c:	f2c0 8082 	blt.w	8006854 <quorem+0x114>
 8006750:	3c01      	subs	r4, #1
 8006752:	f100 0514 	add.w	r5, r0, #20
 8006756:	f101 0814 	add.w	r8, r1, #20
 800675a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800675e:	9301      	str	r3, [sp, #4]
 8006760:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8006764:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006768:	3301      	adds	r3, #1
 800676a:	429a      	cmp	r2, r3
 800676c:	fbb2 f6f3 	udiv	r6, r2, r3
 8006770:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8006774:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8006778:	d331      	bcc.n	80067de <quorem+0x9e>
 800677a:	f04f 0e00 	mov.w	lr, #0
 800677e:	4640      	mov	r0, r8
 8006780:	46ac      	mov	ip, r5
 8006782:	46f2      	mov	sl, lr
 8006784:	f850 2b04 	ldr.w	r2, [r0], #4
 8006788:	b293      	uxth	r3, r2
 800678a:	fb06 e303 	mla	r3, r6, r3, lr
 800678e:	0c12      	lsrs	r2, r2, #16
 8006790:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8006794:	b29b      	uxth	r3, r3
 8006796:	fb06 e202 	mla	r2, r6, r2, lr
 800679a:	ebaa 0303 	sub.w	r3, sl, r3
 800679e:	f8dc a000 	ldr.w	sl, [ip]
 80067a2:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80067a6:	fa1f fa8a 	uxth.w	sl, sl
 80067aa:	4453      	add	r3, sl
 80067ac:	f8dc a000 	ldr.w	sl, [ip]
 80067b0:	b292      	uxth	r2, r2
 80067b2:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 80067b6:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80067ba:	b29b      	uxth	r3, r3
 80067bc:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80067c0:	4581      	cmp	r9, r0
 80067c2:	ea4f 4a22 	mov.w	sl, r2, asr #16
 80067c6:	f84c 3b04 	str.w	r3, [ip], #4
 80067ca:	d2db      	bcs.n	8006784 <quorem+0x44>
 80067cc:	f855 300b 	ldr.w	r3, [r5, fp]
 80067d0:	b92b      	cbnz	r3, 80067de <quorem+0x9e>
 80067d2:	9b01      	ldr	r3, [sp, #4]
 80067d4:	3b04      	subs	r3, #4
 80067d6:	429d      	cmp	r5, r3
 80067d8:	461a      	mov	r2, r3
 80067da:	d32f      	bcc.n	800683c <quorem+0xfc>
 80067dc:	613c      	str	r4, [r7, #16]
 80067de:	4638      	mov	r0, r7
 80067e0:	f7ff fa90 	bl	8005d04 <__mcmp>
 80067e4:	2800      	cmp	r0, #0
 80067e6:	db25      	blt.n	8006834 <quorem+0xf4>
 80067e8:	4628      	mov	r0, r5
 80067ea:	f04f 0c00 	mov.w	ip, #0
 80067ee:	3601      	adds	r6, #1
 80067f0:	f858 1b04 	ldr.w	r1, [r8], #4
 80067f4:	f8d0 e000 	ldr.w	lr, [r0]
 80067f8:	b28b      	uxth	r3, r1
 80067fa:	ebac 0303 	sub.w	r3, ip, r3
 80067fe:	fa1f f28e 	uxth.w	r2, lr
 8006802:	4413      	add	r3, r2
 8006804:	0c0a      	lsrs	r2, r1, #16
 8006806:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800680a:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800680e:	b29b      	uxth	r3, r3
 8006810:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006814:	45c1      	cmp	r9, r8
 8006816:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800681a:	f840 3b04 	str.w	r3, [r0], #4
 800681e:	d2e7      	bcs.n	80067f0 <quorem+0xb0>
 8006820:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006824:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006828:	b922      	cbnz	r2, 8006834 <quorem+0xf4>
 800682a:	3b04      	subs	r3, #4
 800682c:	429d      	cmp	r5, r3
 800682e:	461a      	mov	r2, r3
 8006830:	d30a      	bcc.n	8006848 <quorem+0x108>
 8006832:	613c      	str	r4, [r7, #16]
 8006834:	4630      	mov	r0, r6
 8006836:	b003      	add	sp, #12
 8006838:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800683c:	6812      	ldr	r2, [r2, #0]
 800683e:	3b04      	subs	r3, #4
 8006840:	2a00      	cmp	r2, #0
 8006842:	d1cb      	bne.n	80067dc <quorem+0x9c>
 8006844:	3c01      	subs	r4, #1
 8006846:	e7c6      	b.n	80067d6 <quorem+0x96>
 8006848:	6812      	ldr	r2, [r2, #0]
 800684a:	3b04      	subs	r3, #4
 800684c:	2a00      	cmp	r2, #0
 800684e:	d1f0      	bne.n	8006832 <quorem+0xf2>
 8006850:	3c01      	subs	r4, #1
 8006852:	e7eb      	b.n	800682c <quorem+0xec>
 8006854:	2000      	movs	r0, #0
 8006856:	e7ee      	b.n	8006836 <quorem+0xf6>

08006858 <_dtoa_r>:
 8006858:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800685c:	4616      	mov	r6, r2
 800685e:	461f      	mov	r7, r3
 8006860:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8006862:	b099      	sub	sp, #100	; 0x64
 8006864:	4605      	mov	r5, r0
 8006866:	e9cd 6704 	strd	r6, r7, [sp, #16]
 800686a:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 800686e:	b974      	cbnz	r4, 800688e <_dtoa_r+0x36>
 8006870:	2010      	movs	r0, #16
 8006872:	f000 fdf1 	bl	8007458 <malloc>
 8006876:	4602      	mov	r2, r0
 8006878:	6268      	str	r0, [r5, #36]	; 0x24
 800687a:	b920      	cbnz	r0, 8006886 <_dtoa_r+0x2e>
 800687c:	21ea      	movs	r1, #234	; 0xea
 800687e:	4ba8      	ldr	r3, [pc, #672]	; (8006b20 <_dtoa_r+0x2c8>)
 8006880:	48a8      	ldr	r0, [pc, #672]	; (8006b24 <_dtoa_r+0x2cc>)
 8006882:	f7ff ff3f 	bl	8006704 <__assert_func>
 8006886:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800688a:	6004      	str	r4, [r0, #0]
 800688c:	60c4      	str	r4, [r0, #12]
 800688e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8006890:	6819      	ldr	r1, [r3, #0]
 8006892:	b151      	cbz	r1, 80068aa <_dtoa_r+0x52>
 8006894:	685a      	ldr	r2, [r3, #4]
 8006896:	2301      	movs	r3, #1
 8006898:	4093      	lsls	r3, r2
 800689a:	604a      	str	r2, [r1, #4]
 800689c:	608b      	str	r3, [r1, #8]
 800689e:	4628      	mov	r0, r5
 80068a0:	f7fe fff2 	bl	8005888 <_Bfree>
 80068a4:	2200      	movs	r2, #0
 80068a6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80068a8:	601a      	str	r2, [r3, #0]
 80068aa:	1e3b      	subs	r3, r7, #0
 80068ac:	bfaf      	iteee	ge
 80068ae:	2300      	movge	r3, #0
 80068b0:	2201      	movlt	r2, #1
 80068b2:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 80068b6:	9305      	strlt	r3, [sp, #20]
 80068b8:	bfa8      	it	ge
 80068ba:	f8c8 3000 	strge.w	r3, [r8]
 80068be:	f8dd 9014 	ldr.w	r9, [sp, #20]
 80068c2:	4b99      	ldr	r3, [pc, #612]	; (8006b28 <_dtoa_r+0x2d0>)
 80068c4:	bfb8      	it	lt
 80068c6:	f8c8 2000 	strlt.w	r2, [r8]
 80068ca:	ea33 0309 	bics.w	r3, r3, r9
 80068ce:	d119      	bne.n	8006904 <_dtoa_r+0xac>
 80068d0:	f242 730f 	movw	r3, #9999	; 0x270f
 80068d4:	9a24      	ldr	r2, [sp, #144]	; 0x90
 80068d6:	6013      	str	r3, [r2, #0]
 80068d8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80068dc:	4333      	orrs	r3, r6
 80068de:	f000 857f 	beq.w	80073e0 <_dtoa_r+0xb88>
 80068e2:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80068e4:	b953      	cbnz	r3, 80068fc <_dtoa_r+0xa4>
 80068e6:	4b91      	ldr	r3, [pc, #580]	; (8006b2c <_dtoa_r+0x2d4>)
 80068e8:	e022      	b.n	8006930 <_dtoa_r+0xd8>
 80068ea:	4b91      	ldr	r3, [pc, #580]	; (8006b30 <_dtoa_r+0x2d8>)
 80068ec:	9303      	str	r3, [sp, #12]
 80068ee:	3308      	adds	r3, #8
 80068f0:	9a26      	ldr	r2, [sp, #152]	; 0x98
 80068f2:	6013      	str	r3, [r2, #0]
 80068f4:	9803      	ldr	r0, [sp, #12]
 80068f6:	b019      	add	sp, #100	; 0x64
 80068f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80068fc:	4b8b      	ldr	r3, [pc, #556]	; (8006b2c <_dtoa_r+0x2d4>)
 80068fe:	9303      	str	r3, [sp, #12]
 8006900:	3303      	adds	r3, #3
 8006902:	e7f5      	b.n	80068f0 <_dtoa_r+0x98>
 8006904:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8006908:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 800690c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8006910:	2200      	movs	r2, #0
 8006912:	2300      	movs	r3, #0
 8006914:	f7fa f840 	bl	8000998 <__aeabi_dcmpeq>
 8006918:	4680      	mov	r8, r0
 800691a:	b158      	cbz	r0, 8006934 <_dtoa_r+0xdc>
 800691c:	2301      	movs	r3, #1
 800691e:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8006920:	6013      	str	r3, [r2, #0]
 8006922:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8006924:	2b00      	cmp	r3, #0
 8006926:	f000 8558 	beq.w	80073da <_dtoa_r+0xb82>
 800692a:	4882      	ldr	r0, [pc, #520]	; (8006b34 <_dtoa_r+0x2dc>)
 800692c:	6018      	str	r0, [r3, #0]
 800692e:	1e43      	subs	r3, r0, #1
 8006930:	9303      	str	r3, [sp, #12]
 8006932:	e7df      	b.n	80068f4 <_dtoa_r+0x9c>
 8006934:	ab16      	add	r3, sp, #88	; 0x58
 8006936:	9301      	str	r3, [sp, #4]
 8006938:	ab17      	add	r3, sp, #92	; 0x5c
 800693a:	9300      	str	r3, [sp, #0]
 800693c:	4628      	mov	r0, r5
 800693e:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8006942:	f7ff fa87 	bl	8005e54 <__d2b>
 8006946:	f3c9 540a 	ubfx	r4, r9, #20, #11
 800694a:	4683      	mov	fp, r0
 800694c:	2c00      	cmp	r4, #0
 800694e:	d07f      	beq.n	8006a50 <_dtoa_r+0x1f8>
 8006950:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8006954:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006956:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 800695a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800695e:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 8006962:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 8006966:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 800696a:	2200      	movs	r2, #0
 800696c:	4b72      	ldr	r3, [pc, #456]	; (8006b38 <_dtoa_r+0x2e0>)
 800696e:	f7f9 fbf3 	bl	8000158 <__aeabi_dsub>
 8006972:	a365      	add	r3, pc, #404	; (adr r3, 8006b08 <_dtoa_r+0x2b0>)
 8006974:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006978:	f7f9 fda6 	bl	80004c8 <__aeabi_dmul>
 800697c:	a364      	add	r3, pc, #400	; (adr r3, 8006b10 <_dtoa_r+0x2b8>)
 800697e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006982:	f7f9 fbeb 	bl	800015c <__adddf3>
 8006986:	4606      	mov	r6, r0
 8006988:	4620      	mov	r0, r4
 800698a:	460f      	mov	r7, r1
 800698c:	f7f9 fd32 	bl	80003f4 <__aeabi_i2d>
 8006990:	a361      	add	r3, pc, #388	; (adr r3, 8006b18 <_dtoa_r+0x2c0>)
 8006992:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006996:	f7f9 fd97 	bl	80004c8 <__aeabi_dmul>
 800699a:	4602      	mov	r2, r0
 800699c:	460b      	mov	r3, r1
 800699e:	4630      	mov	r0, r6
 80069a0:	4639      	mov	r1, r7
 80069a2:	f7f9 fbdb 	bl	800015c <__adddf3>
 80069a6:	4606      	mov	r6, r0
 80069a8:	460f      	mov	r7, r1
 80069aa:	f7fa f83d 	bl	8000a28 <__aeabi_d2iz>
 80069ae:	2200      	movs	r2, #0
 80069b0:	4682      	mov	sl, r0
 80069b2:	2300      	movs	r3, #0
 80069b4:	4630      	mov	r0, r6
 80069b6:	4639      	mov	r1, r7
 80069b8:	f7f9 fff8 	bl	80009ac <__aeabi_dcmplt>
 80069bc:	b148      	cbz	r0, 80069d2 <_dtoa_r+0x17a>
 80069be:	4650      	mov	r0, sl
 80069c0:	f7f9 fd18 	bl	80003f4 <__aeabi_i2d>
 80069c4:	4632      	mov	r2, r6
 80069c6:	463b      	mov	r3, r7
 80069c8:	f7f9 ffe6 	bl	8000998 <__aeabi_dcmpeq>
 80069cc:	b908      	cbnz	r0, 80069d2 <_dtoa_r+0x17a>
 80069ce:	f10a 3aff 	add.w	sl, sl, #4294967295
 80069d2:	f1ba 0f16 	cmp.w	sl, #22
 80069d6:	d858      	bhi.n	8006a8a <_dtoa_r+0x232>
 80069d8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80069dc:	4b57      	ldr	r3, [pc, #348]	; (8006b3c <_dtoa_r+0x2e4>)
 80069de:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 80069e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80069e6:	f7f9 ffe1 	bl	80009ac <__aeabi_dcmplt>
 80069ea:	2800      	cmp	r0, #0
 80069ec:	d04f      	beq.n	8006a8e <_dtoa_r+0x236>
 80069ee:	2300      	movs	r3, #0
 80069f0:	f10a 3aff 	add.w	sl, sl, #4294967295
 80069f4:	930f      	str	r3, [sp, #60]	; 0x3c
 80069f6:	9b16      	ldr	r3, [sp, #88]	; 0x58
 80069f8:	1b1c      	subs	r4, r3, r4
 80069fa:	1e63      	subs	r3, r4, #1
 80069fc:	9309      	str	r3, [sp, #36]	; 0x24
 80069fe:	bf49      	itett	mi
 8006a00:	f1c4 0301 	rsbmi	r3, r4, #1
 8006a04:	2300      	movpl	r3, #0
 8006a06:	9306      	strmi	r3, [sp, #24]
 8006a08:	2300      	movmi	r3, #0
 8006a0a:	bf54      	ite	pl
 8006a0c:	9306      	strpl	r3, [sp, #24]
 8006a0e:	9309      	strmi	r3, [sp, #36]	; 0x24
 8006a10:	f1ba 0f00 	cmp.w	sl, #0
 8006a14:	db3d      	blt.n	8006a92 <_dtoa_r+0x23a>
 8006a16:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006a18:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 8006a1c:	4453      	add	r3, sl
 8006a1e:	9309      	str	r3, [sp, #36]	; 0x24
 8006a20:	2300      	movs	r3, #0
 8006a22:	930a      	str	r3, [sp, #40]	; 0x28
 8006a24:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006a26:	2b09      	cmp	r3, #9
 8006a28:	f200 808c 	bhi.w	8006b44 <_dtoa_r+0x2ec>
 8006a2c:	2b05      	cmp	r3, #5
 8006a2e:	bfc4      	itt	gt
 8006a30:	3b04      	subgt	r3, #4
 8006a32:	9322      	strgt	r3, [sp, #136]	; 0x88
 8006a34:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006a36:	bfc8      	it	gt
 8006a38:	2400      	movgt	r4, #0
 8006a3a:	f1a3 0302 	sub.w	r3, r3, #2
 8006a3e:	bfd8      	it	le
 8006a40:	2401      	movle	r4, #1
 8006a42:	2b03      	cmp	r3, #3
 8006a44:	f200 808a 	bhi.w	8006b5c <_dtoa_r+0x304>
 8006a48:	e8df f003 	tbb	[pc, r3]
 8006a4c:	5b4d4f2d 	.word	0x5b4d4f2d
 8006a50:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 8006a54:	441c      	add	r4, r3
 8006a56:	f204 4332 	addw	r3, r4, #1074	; 0x432
 8006a5a:	2b20      	cmp	r3, #32
 8006a5c:	bfc3      	ittte	gt
 8006a5e:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8006a62:	f204 4012 	addwgt	r0, r4, #1042	; 0x412
 8006a66:	fa09 f303 	lslgt.w	r3, r9, r3
 8006a6a:	f1c3 0320 	rsble	r3, r3, #32
 8006a6e:	bfc6      	itte	gt
 8006a70:	fa26 f000 	lsrgt.w	r0, r6, r0
 8006a74:	4318      	orrgt	r0, r3
 8006a76:	fa06 f003 	lslle.w	r0, r6, r3
 8006a7a:	f7f9 fcab 	bl	80003d4 <__aeabi_ui2d>
 8006a7e:	2301      	movs	r3, #1
 8006a80:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 8006a84:	3c01      	subs	r4, #1
 8006a86:	9313      	str	r3, [sp, #76]	; 0x4c
 8006a88:	e76f      	b.n	800696a <_dtoa_r+0x112>
 8006a8a:	2301      	movs	r3, #1
 8006a8c:	e7b2      	b.n	80069f4 <_dtoa_r+0x19c>
 8006a8e:	900f      	str	r0, [sp, #60]	; 0x3c
 8006a90:	e7b1      	b.n	80069f6 <_dtoa_r+0x19e>
 8006a92:	9b06      	ldr	r3, [sp, #24]
 8006a94:	eba3 030a 	sub.w	r3, r3, sl
 8006a98:	9306      	str	r3, [sp, #24]
 8006a9a:	f1ca 0300 	rsb	r3, sl, #0
 8006a9e:	930a      	str	r3, [sp, #40]	; 0x28
 8006aa0:	2300      	movs	r3, #0
 8006aa2:	930e      	str	r3, [sp, #56]	; 0x38
 8006aa4:	e7be      	b.n	8006a24 <_dtoa_r+0x1cc>
 8006aa6:	2300      	movs	r3, #0
 8006aa8:	930b      	str	r3, [sp, #44]	; 0x2c
 8006aaa:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8006aac:	2b00      	cmp	r3, #0
 8006aae:	dc58      	bgt.n	8006b62 <_dtoa_r+0x30a>
 8006ab0:	f04f 0901 	mov.w	r9, #1
 8006ab4:	464b      	mov	r3, r9
 8006ab6:	f8cd 9020 	str.w	r9, [sp, #32]
 8006aba:	f8cd 908c 	str.w	r9, [sp, #140]	; 0x8c
 8006abe:	2200      	movs	r2, #0
 8006ac0:	6a68      	ldr	r0, [r5, #36]	; 0x24
 8006ac2:	6042      	str	r2, [r0, #4]
 8006ac4:	2204      	movs	r2, #4
 8006ac6:	f102 0614 	add.w	r6, r2, #20
 8006aca:	429e      	cmp	r6, r3
 8006acc:	6841      	ldr	r1, [r0, #4]
 8006ace:	d94e      	bls.n	8006b6e <_dtoa_r+0x316>
 8006ad0:	4628      	mov	r0, r5
 8006ad2:	f7fe fe99 	bl	8005808 <_Balloc>
 8006ad6:	9003      	str	r0, [sp, #12]
 8006ad8:	2800      	cmp	r0, #0
 8006ada:	d14c      	bne.n	8006b76 <_dtoa_r+0x31e>
 8006adc:	4602      	mov	r2, r0
 8006ade:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8006ae2:	4b17      	ldr	r3, [pc, #92]	; (8006b40 <_dtoa_r+0x2e8>)
 8006ae4:	e6cc      	b.n	8006880 <_dtoa_r+0x28>
 8006ae6:	2301      	movs	r3, #1
 8006ae8:	e7de      	b.n	8006aa8 <_dtoa_r+0x250>
 8006aea:	2300      	movs	r3, #0
 8006aec:	930b      	str	r3, [sp, #44]	; 0x2c
 8006aee:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8006af0:	eb0a 0903 	add.w	r9, sl, r3
 8006af4:	f109 0301 	add.w	r3, r9, #1
 8006af8:	2b01      	cmp	r3, #1
 8006afa:	9308      	str	r3, [sp, #32]
 8006afc:	bfb8      	it	lt
 8006afe:	2301      	movlt	r3, #1
 8006b00:	e7dd      	b.n	8006abe <_dtoa_r+0x266>
 8006b02:	2301      	movs	r3, #1
 8006b04:	e7f2      	b.n	8006aec <_dtoa_r+0x294>
 8006b06:	bf00      	nop
 8006b08:	636f4361 	.word	0x636f4361
 8006b0c:	3fd287a7 	.word	0x3fd287a7
 8006b10:	8b60c8b3 	.word	0x8b60c8b3
 8006b14:	3fc68a28 	.word	0x3fc68a28
 8006b18:	509f79fb 	.word	0x509f79fb
 8006b1c:	3fd34413 	.word	0x3fd34413
 8006b20:	08008e7c 	.word	0x08008e7c
 8006b24:	0800907a 	.word	0x0800907a
 8006b28:	7ff00000 	.word	0x7ff00000
 8006b2c:	08009074 	.word	0x08009074
 8006b30:	0800906b 	.word	0x0800906b
 8006b34:	08009079 	.word	0x08009079
 8006b38:	3ff80000 	.word	0x3ff80000
 8006b3c:	08008f28 	.word	0x08008f28
 8006b40:	08008eef 	.word	0x08008eef
 8006b44:	2401      	movs	r4, #1
 8006b46:	2300      	movs	r3, #0
 8006b48:	940b      	str	r4, [sp, #44]	; 0x2c
 8006b4a:	9322      	str	r3, [sp, #136]	; 0x88
 8006b4c:	f04f 39ff 	mov.w	r9, #4294967295
 8006b50:	2200      	movs	r2, #0
 8006b52:	2312      	movs	r3, #18
 8006b54:	f8cd 9020 	str.w	r9, [sp, #32]
 8006b58:	9223      	str	r2, [sp, #140]	; 0x8c
 8006b5a:	e7b0      	b.n	8006abe <_dtoa_r+0x266>
 8006b5c:	2301      	movs	r3, #1
 8006b5e:	930b      	str	r3, [sp, #44]	; 0x2c
 8006b60:	e7f4      	b.n	8006b4c <_dtoa_r+0x2f4>
 8006b62:	f8dd 908c 	ldr.w	r9, [sp, #140]	; 0x8c
 8006b66:	464b      	mov	r3, r9
 8006b68:	f8cd 9020 	str.w	r9, [sp, #32]
 8006b6c:	e7a7      	b.n	8006abe <_dtoa_r+0x266>
 8006b6e:	3101      	adds	r1, #1
 8006b70:	6041      	str	r1, [r0, #4]
 8006b72:	0052      	lsls	r2, r2, #1
 8006b74:	e7a7      	b.n	8006ac6 <_dtoa_r+0x26e>
 8006b76:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8006b78:	9a03      	ldr	r2, [sp, #12]
 8006b7a:	601a      	str	r2, [r3, #0]
 8006b7c:	9b08      	ldr	r3, [sp, #32]
 8006b7e:	2b0e      	cmp	r3, #14
 8006b80:	f200 80a8 	bhi.w	8006cd4 <_dtoa_r+0x47c>
 8006b84:	2c00      	cmp	r4, #0
 8006b86:	f000 80a5 	beq.w	8006cd4 <_dtoa_r+0x47c>
 8006b8a:	f1ba 0f00 	cmp.w	sl, #0
 8006b8e:	dd34      	ble.n	8006bfa <_dtoa_r+0x3a2>
 8006b90:	4a9a      	ldr	r2, [pc, #616]	; (8006dfc <_dtoa_r+0x5a4>)
 8006b92:	f00a 030f 	and.w	r3, sl, #15
 8006b96:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8006b9a:	f41a 7f80 	tst.w	sl, #256	; 0x100
 8006b9e:	e9d3 3400 	ldrd	r3, r4, [r3]
 8006ba2:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8006ba6:	ea4f 142a 	mov.w	r4, sl, asr #4
 8006baa:	d016      	beq.n	8006bda <_dtoa_r+0x382>
 8006bac:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8006bb0:	4b93      	ldr	r3, [pc, #588]	; (8006e00 <_dtoa_r+0x5a8>)
 8006bb2:	2703      	movs	r7, #3
 8006bb4:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8006bb8:	f7f9 fdb0 	bl	800071c <__aeabi_ddiv>
 8006bbc:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006bc0:	f004 040f 	and.w	r4, r4, #15
 8006bc4:	4e8e      	ldr	r6, [pc, #568]	; (8006e00 <_dtoa_r+0x5a8>)
 8006bc6:	b954      	cbnz	r4, 8006bde <_dtoa_r+0x386>
 8006bc8:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8006bcc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006bd0:	f7f9 fda4 	bl	800071c <__aeabi_ddiv>
 8006bd4:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006bd8:	e029      	b.n	8006c2e <_dtoa_r+0x3d6>
 8006bda:	2702      	movs	r7, #2
 8006bdc:	e7f2      	b.n	8006bc4 <_dtoa_r+0x36c>
 8006bde:	07e1      	lsls	r1, r4, #31
 8006be0:	d508      	bpl.n	8006bf4 <_dtoa_r+0x39c>
 8006be2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8006be6:	e9d6 2300 	ldrd	r2, r3, [r6]
 8006bea:	f7f9 fc6d 	bl	80004c8 <__aeabi_dmul>
 8006bee:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8006bf2:	3701      	adds	r7, #1
 8006bf4:	1064      	asrs	r4, r4, #1
 8006bf6:	3608      	adds	r6, #8
 8006bf8:	e7e5      	b.n	8006bc6 <_dtoa_r+0x36e>
 8006bfa:	f000 80a5 	beq.w	8006d48 <_dtoa_r+0x4f0>
 8006bfe:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8006c02:	f1ca 0400 	rsb	r4, sl, #0
 8006c06:	4b7d      	ldr	r3, [pc, #500]	; (8006dfc <_dtoa_r+0x5a4>)
 8006c08:	f004 020f 	and.w	r2, r4, #15
 8006c0c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006c10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c14:	f7f9 fc58 	bl	80004c8 <__aeabi_dmul>
 8006c18:	2702      	movs	r7, #2
 8006c1a:	2300      	movs	r3, #0
 8006c1c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006c20:	4e77      	ldr	r6, [pc, #476]	; (8006e00 <_dtoa_r+0x5a8>)
 8006c22:	1124      	asrs	r4, r4, #4
 8006c24:	2c00      	cmp	r4, #0
 8006c26:	f040 8084 	bne.w	8006d32 <_dtoa_r+0x4da>
 8006c2a:	2b00      	cmp	r3, #0
 8006c2c:	d1d2      	bne.n	8006bd4 <_dtoa_r+0x37c>
 8006c2e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8006c30:	2b00      	cmp	r3, #0
 8006c32:	f000 808b 	beq.w	8006d4c <_dtoa_r+0x4f4>
 8006c36:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8006c3a:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8006c3e:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8006c42:	2200      	movs	r2, #0
 8006c44:	4b6f      	ldr	r3, [pc, #444]	; (8006e04 <_dtoa_r+0x5ac>)
 8006c46:	f7f9 feb1 	bl	80009ac <__aeabi_dcmplt>
 8006c4a:	2800      	cmp	r0, #0
 8006c4c:	d07e      	beq.n	8006d4c <_dtoa_r+0x4f4>
 8006c4e:	9b08      	ldr	r3, [sp, #32]
 8006c50:	2b00      	cmp	r3, #0
 8006c52:	d07b      	beq.n	8006d4c <_dtoa_r+0x4f4>
 8006c54:	f1b9 0f00 	cmp.w	r9, #0
 8006c58:	dd38      	ble.n	8006ccc <_dtoa_r+0x474>
 8006c5a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8006c5e:	2200      	movs	r2, #0
 8006c60:	4b69      	ldr	r3, [pc, #420]	; (8006e08 <_dtoa_r+0x5b0>)
 8006c62:	f7f9 fc31 	bl	80004c8 <__aeabi_dmul>
 8006c66:	464c      	mov	r4, r9
 8006c68:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006c6c:	f10a 38ff 	add.w	r8, sl, #4294967295
 8006c70:	3701      	adds	r7, #1
 8006c72:	4638      	mov	r0, r7
 8006c74:	f7f9 fbbe 	bl	80003f4 <__aeabi_i2d>
 8006c78:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006c7c:	f7f9 fc24 	bl	80004c8 <__aeabi_dmul>
 8006c80:	2200      	movs	r2, #0
 8006c82:	4b62      	ldr	r3, [pc, #392]	; (8006e0c <_dtoa_r+0x5b4>)
 8006c84:	f7f9 fa6a 	bl	800015c <__adddf3>
 8006c88:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 8006c8c:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8006c90:	9611      	str	r6, [sp, #68]	; 0x44
 8006c92:	2c00      	cmp	r4, #0
 8006c94:	d15d      	bne.n	8006d52 <_dtoa_r+0x4fa>
 8006c96:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006c9a:	2200      	movs	r2, #0
 8006c9c:	4b5c      	ldr	r3, [pc, #368]	; (8006e10 <_dtoa_r+0x5b8>)
 8006c9e:	f7f9 fa5b 	bl	8000158 <__aeabi_dsub>
 8006ca2:	4602      	mov	r2, r0
 8006ca4:	460b      	mov	r3, r1
 8006ca6:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8006caa:	4633      	mov	r3, r6
 8006cac:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8006cae:	f7f9 fe9b 	bl	80009e8 <__aeabi_dcmpgt>
 8006cb2:	2800      	cmp	r0, #0
 8006cb4:	f040 829c 	bne.w	80071f0 <_dtoa_r+0x998>
 8006cb8:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006cbc:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8006cbe:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8006cc2:	f7f9 fe73 	bl	80009ac <__aeabi_dcmplt>
 8006cc6:	2800      	cmp	r0, #0
 8006cc8:	f040 8290 	bne.w	80071ec <_dtoa_r+0x994>
 8006ccc:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 8006cd0:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8006cd4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8006cd6:	2b00      	cmp	r3, #0
 8006cd8:	f2c0 8152 	blt.w	8006f80 <_dtoa_r+0x728>
 8006cdc:	f1ba 0f0e 	cmp.w	sl, #14
 8006ce0:	f300 814e 	bgt.w	8006f80 <_dtoa_r+0x728>
 8006ce4:	4b45      	ldr	r3, [pc, #276]	; (8006dfc <_dtoa_r+0x5a4>)
 8006ce6:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8006cea:	e9d3 3400 	ldrd	r3, r4, [r3]
 8006cee:	e9cd 3406 	strd	r3, r4, [sp, #24]
 8006cf2:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8006cf4:	2b00      	cmp	r3, #0
 8006cf6:	f280 80db 	bge.w	8006eb0 <_dtoa_r+0x658>
 8006cfa:	9b08      	ldr	r3, [sp, #32]
 8006cfc:	2b00      	cmp	r3, #0
 8006cfe:	f300 80d7 	bgt.w	8006eb0 <_dtoa_r+0x658>
 8006d02:	f040 8272 	bne.w	80071ea <_dtoa_r+0x992>
 8006d06:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006d0a:	2200      	movs	r2, #0
 8006d0c:	4b40      	ldr	r3, [pc, #256]	; (8006e10 <_dtoa_r+0x5b8>)
 8006d0e:	f7f9 fbdb 	bl	80004c8 <__aeabi_dmul>
 8006d12:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006d16:	f7f9 fe5d 	bl	80009d4 <__aeabi_dcmpge>
 8006d1a:	9c08      	ldr	r4, [sp, #32]
 8006d1c:	4626      	mov	r6, r4
 8006d1e:	2800      	cmp	r0, #0
 8006d20:	f040 8248 	bne.w	80071b4 <_dtoa_r+0x95c>
 8006d24:	2331      	movs	r3, #49	; 0x31
 8006d26:	9f03      	ldr	r7, [sp, #12]
 8006d28:	f10a 0a01 	add.w	sl, sl, #1
 8006d2c:	f807 3b01 	strb.w	r3, [r7], #1
 8006d30:	e244      	b.n	80071bc <_dtoa_r+0x964>
 8006d32:	07e2      	lsls	r2, r4, #31
 8006d34:	d505      	bpl.n	8006d42 <_dtoa_r+0x4ea>
 8006d36:	e9d6 2300 	ldrd	r2, r3, [r6]
 8006d3a:	f7f9 fbc5 	bl	80004c8 <__aeabi_dmul>
 8006d3e:	2301      	movs	r3, #1
 8006d40:	3701      	adds	r7, #1
 8006d42:	1064      	asrs	r4, r4, #1
 8006d44:	3608      	adds	r6, #8
 8006d46:	e76d      	b.n	8006c24 <_dtoa_r+0x3cc>
 8006d48:	2702      	movs	r7, #2
 8006d4a:	e770      	b.n	8006c2e <_dtoa_r+0x3d6>
 8006d4c:	46d0      	mov	r8, sl
 8006d4e:	9c08      	ldr	r4, [sp, #32]
 8006d50:	e78f      	b.n	8006c72 <_dtoa_r+0x41a>
 8006d52:	9903      	ldr	r1, [sp, #12]
 8006d54:	4b29      	ldr	r3, [pc, #164]	; (8006dfc <_dtoa_r+0x5a4>)
 8006d56:	4421      	add	r1, r4
 8006d58:	9112      	str	r1, [sp, #72]	; 0x48
 8006d5a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8006d5c:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8006d60:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 8006d64:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8006d68:	2900      	cmp	r1, #0
 8006d6a:	d055      	beq.n	8006e18 <_dtoa_r+0x5c0>
 8006d6c:	2000      	movs	r0, #0
 8006d6e:	4929      	ldr	r1, [pc, #164]	; (8006e14 <_dtoa_r+0x5bc>)
 8006d70:	f7f9 fcd4 	bl	800071c <__aeabi_ddiv>
 8006d74:	463b      	mov	r3, r7
 8006d76:	4632      	mov	r2, r6
 8006d78:	f7f9 f9ee 	bl	8000158 <__aeabi_dsub>
 8006d7c:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8006d80:	9f03      	ldr	r7, [sp, #12]
 8006d82:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006d86:	f7f9 fe4f 	bl	8000a28 <__aeabi_d2iz>
 8006d8a:	4604      	mov	r4, r0
 8006d8c:	f7f9 fb32 	bl	80003f4 <__aeabi_i2d>
 8006d90:	4602      	mov	r2, r0
 8006d92:	460b      	mov	r3, r1
 8006d94:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006d98:	f7f9 f9de 	bl	8000158 <__aeabi_dsub>
 8006d9c:	4602      	mov	r2, r0
 8006d9e:	460b      	mov	r3, r1
 8006da0:	3430      	adds	r4, #48	; 0x30
 8006da2:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8006da6:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8006daa:	f807 4b01 	strb.w	r4, [r7], #1
 8006dae:	f7f9 fdfd 	bl	80009ac <__aeabi_dcmplt>
 8006db2:	2800      	cmp	r0, #0
 8006db4:	d174      	bne.n	8006ea0 <_dtoa_r+0x648>
 8006db6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006dba:	2000      	movs	r0, #0
 8006dbc:	4911      	ldr	r1, [pc, #68]	; (8006e04 <_dtoa_r+0x5ac>)
 8006dbe:	f7f9 f9cb 	bl	8000158 <__aeabi_dsub>
 8006dc2:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8006dc6:	f7f9 fdf1 	bl	80009ac <__aeabi_dcmplt>
 8006dca:	2800      	cmp	r0, #0
 8006dcc:	f040 80b7 	bne.w	8006f3e <_dtoa_r+0x6e6>
 8006dd0:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8006dd2:	429f      	cmp	r7, r3
 8006dd4:	f43f af7a 	beq.w	8006ccc <_dtoa_r+0x474>
 8006dd8:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8006ddc:	2200      	movs	r2, #0
 8006dde:	4b0a      	ldr	r3, [pc, #40]	; (8006e08 <_dtoa_r+0x5b0>)
 8006de0:	f7f9 fb72 	bl	80004c8 <__aeabi_dmul>
 8006de4:	2200      	movs	r2, #0
 8006de6:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8006dea:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006dee:	4b06      	ldr	r3, [pc, #24]	; (8006e08 <_dtoa_r+0x5b0>)
 8006df0:	f7f9 fb6a 	bl	80004c8 <__aeabi_dmul>
 8006df4:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006df8:	e7c3      	b.n	8006d82 <_dtoa_r+0x52a>
 8006dfa:	bf00      	nop
 8006dfc:	08008f28 	.word	0x08008f28
 8006e00:	08008f00 	.word	0x08008f00
 8006e04:	3ff00000 	.word	0x3ff00000
 8006e08:	40240000 	.word	0x40240000
 8006e0c:	401c0000 	.word	0x401c0000
 8006e10:	40140000 	.word	0x40140000
 8006e14:	3fe00000 	.word	0x3fe00000
 8006e18:	4630      	mov	r0, r6
 8006e1a:	4639      	mov	r1, r7
 8006e1c:	f7f9 fb54 	bl	80004c8 <__aeabi_dmul>
 8006e20:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8006e22:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8006e26:	9c03      	ldr	r4, [sp, #12]
 8006e28:	9314      	str	r3, [sp, #80]	; 0x50
 8006e2a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006e2e:	f7f9 fdfb 	bl	8000a28 <__aeabi_d2iz>
 8006e32:	9015      	str	r0, [sp, #84]	; 0x54
 8006e34:	f7f9 fade 	bl	80003f4 <__aeabi_i2d>
 8006e38:	4602      	mov	r2, r0
 8006e3a:	460b      	mov	r3, r1
 8006e3c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006e40:	f7f9 f98a 	bl	8000158 <__aeabi_dsub>
 8006e44:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8006e46:	4606      	mov	r6, r0
 8006e48:	3330      	adds	r3, #48	; 0x30
 8006e4a:	f804 3b01 	strb.w	r3, [r4], #1
 8006e4e:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8006e50:	460f      	mov	r7, r1
 8006e52:	429c      	cmp	r4, r3
 8006e54:	f04f 0200 	mov.w	r2, #0
 8006e58:	d124      	bne.n	8006ea4 <_dtoa_r+0x64c>
 8006e5a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8006e5e:	4bb0      	ldr	r3, [pc, #704]	; (8007120 <_dtoa_r+0x8c8>)
 8006e60:	f7f9 f97c 	bl	800015c <__adddf3>
 8006e64:	4602      	mov	r2, r0
 8006e66:	460b      	mov	r3, r1
 8006e68:	4630      	mov	r0, r6
 8006e6a:	4639      	mov	r1, r7
 8006e6c:	f7f9 fdbc 	bl	80009e8 <__aeabi_dcmpgt>
 8006e70:	2800      	cmp	r0, #0
 8006e72:	d163      	bne.n	8006f3c <_dtoa_r+0x6e4>
 8006e74:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8006e78:	2000      	movs	r0, #0
 8006e7a:	49a9      	ldr	r1, [pc, #676]	; (8007120 <_dtoa_r+0x8c8>)
 8006e7c:	f7f9 f96c 	bl	8000158 <__aeabi_dsub>
 8006e80:	4602      	mov	r2, r0
 8006e82:	460b      	mov	r3, r1
 8006e84:	4630      	mov	r0, r6
 8006e86:	4639      	mov	r1, r7
 8006e88:	f7f9 fd90 	bl	80009ac <__aeabi_dcmplt>
 8006e8c:	2800      	cmp	r0, #0
 8006e8e:	f43f af1d 	beq.w	8006ccc <_dtoa_r+0x474>
 8006e92:	9f14      	ldr	r7, [sp, #80]	; 0x50
 8006e94:	1e7b      	subs	r3, r7, #1
 8006e96:	9314      	str	r3, [sp, #80]	; 0x50
 8006e98:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 8006e9c:	2b30      	cmp	r3, #48	; 0x30
 8006e9e:	d0f8      	beq.n	8006e92 <_dtoa_r+0x63a>
 8006ea0:	46c2      	mov	sl, r8
 8006ea2:	e03b      	b.n	8006f1c <_dtoa_r+0x6c4>
 8006ea4:	4b9f      	ldr	r3, [pc, #636]	; (8007124 <_dtoa_r+0x8cc>)
 8006ea6:	f7f9 fb0f 	bl	80004c8 <__aeabi_dmul>
 8006eaa:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006eae:	e7bc      	b.n	8006e2a <_dtoa_r+0x5d2>
 8006eb0:	9f03      	ldr	r7, [sp, #12]
 8006eb2:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 8006eb6:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8006eba:	4640      	mov	r0, r8
 8006ebc:	4649      	mov	r1, r9
 8006ebe:	f7f9 fc2d 	bl	800071c <__aeabi_ddiv>
 8006ec2:	f7f9 fdb1 	bl	8000a28 <__aeabi_d2iz>
 8006ec6:	4604      	mov	r4, r0
 8006ec8:	f7f9 fa94 	bl	80003f4 <__aeabi_i2d>
 8006ecc:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8006ed0:	f7f9 fafa 	bl	80004c8 <__aeabi_dmul>
 8006ed4:	4602      	mov	r2, r0
 8006ed6:	460b      	mov	r3, r1
 8006ed8:	4640      	mov	r0, r8
 8006eda:	4649      	mov	r1, r9
 8006edc:	f7f9 f93c 	bl	8000158 <__aeabi_dsub>
 8006ee0:	f104 0630 	add.w	r6, r4, #48	; 0x30
 8006ee4:	f807 6b01 	strb.w	r6, [r7], #1
 8006ee8:	9e03      	ldr	r6, [sp, #12]
 8006eea:	f8dd c020 	ldr.w	ip, [sp, #32]
 8006eee:	1bbe      	subs	r6, r7, r6
 8006ef0:	45b4      	cmp	ip, r6
 8006ef2:	4602      	mov	r2, r0
 8006ef4:	460b      	mov	r3, r1
 8006ef6:	d136      	bne.n	8006f66 <_dtoa_r+0x70e>
 8006ef8:	f7f9 f930 	bl	800015c <__adddf3>
 8006efc:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8006f00:	4680      	mov	r8, r0
 8006f02:	4689      	mov	r9, r1
 8006f04:	f7f9 fd70 	bl	80009e8 <__aeabi_dcmpgt>
 8006f08:	bb58      	cbnz	r0, 8006f62 <_dtoa_r+0x70a>
 8006f0a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8006f0e:	4640      	mov	r0, r8
 8006f10:	4649      	mov	r1, r9
 8006f12:	f7f9 fd41 	bl	8000998 <__aeabi_dcmpeq>
 8006f16:	b108      	cbz	r0, 8006f1c <_dtoa_r+0x6c4>
 8006f18:	07e1      	lsls	r1, r4, #31
 8006f1a:	d422      	bmi.n	8006f62 <_dtoa_r+0x70a>
 8006f1c:	4628      	mov	r0, r5
 8006f1e:	4659      	mov	r1, fp
 8006f20:	f7fe fcb2 	bl	8005888 <_Bfree>
 8006f24:	2300      	movs	r3, #0
 8006f26:	703b      	strb	r3, [r7, #0]
 8006f28:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8006f2a:	f10a 0001 	add.w	r0, sl, #1
 8006f2e:	6018      	str	r0, [r3, #0]
 8006f30:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8006f32:	2b00      	cmp	r3, #0
 8006f34:	f43f acde 	beq.w	80068f4 <_dtoa_r+0x9c>
 8006f38:	601f      	str	r7, [r3, #0]
 8006f3a:	e4db      	b.n	80068f4 <_dtoa_r+0x9c>
 8006f3c:	4627      	mov	r7, r4
 8006f3e:	463b      	mov	r3, r7
 8006f40:	461f      	mov	r7, r3
 8006f42:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006f46:	2a39      	cmp	r2, #57	; 0x39
 8006f48:	d107      	bne.n	8006f5a <_dtoa_r+0x702>
 8006f4a:	9a03      	ldr	r2, [sp, #12]
 8006f4c:	429a      	cmp	r2, r3
 8006f4e:	d1f7      	bne.n	8006f40 <_dtoa_r+0x6e8>
 8006f50:	2230      	movs	r2, #48	; 0x30
 8006f52:	9903      	ldr	r1, [sp, #12]
 8006f54:	f108 0801 	add.w	r8, r8, #1
 8006f58:	700a      	strb	r2, [r1, #0]
 8006f5a:	781a      	ldrb	r2, [r3, #0]
 8006f5c:	3201      	adds	r2, #1
 8006f5e:	701a      	strb	r2, [r3, #0]
 8006f60:	e79e      	b.n	8006ea0 <_dtoa_r+0x648>
 8006f62:	46d0      	mov	r8, sl
 8006f64:	e7eb      	b.n	8006f3e <_dtoa_r+0x6e6>
 8006f66:	2200      	movs	r2, #0
 8006f68:	4b6e      	ldr	r3, [pc, #440]	; (8007124 <_dtoa_r+0x8cc>)
 8006f6a:	f7f9 faad 	bl	80004c8 <__aeabi_dmul>
 8006f6e:	2200      	movs	r2, #0
 8006f70:	2300      	movs	r3, #0
 8006f72:	4680      	mov	r8, r0
 8006f74:	4689      	mov	r9, r1
 8006f76:	f7f9 fd0f 	bl	8000998 <__aeabi_dcmpeq>
 8006f7a:	2800      	cmp	r0, #0
 8006f7c:	d09b      	beq.n	8006eb6 <_dtoa_r+0x65e>
 8006f7e:	e7cd      	b.n	8006f1c <_dtoa_r+0x6c4>
 8006f80:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8006f82:	2a00      	cmp	r2, #0
 8006f84:	f000 80d0 	beq.w	8007128 <_dtoa_r+0x8d0>
 8006f88:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8006f8a:	2a01      	cmp	r2, #1
 8006f8c:	f300 80ae 	bgt.w	80070ec <_dtoa_r+0x894>
 8006f90:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8006f92:	2a00      	cmp	r2, #0
 8006f94:	f000 80a6 	beq.w	80070e4 <_dtoa_r+0x88c>
 8006f98:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8006f9c:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8006f9e:	9f06      	ldr	r7, [sp, #24]
 8006fa0:	9a06      	ldr	r2, [sp, #24]
 8006fa2:	2101      	movs	r1, #1
 8006fa4:	441a      	add	r2, r3
 8006fa6:	9206      	str	r2, [sp, #24]
 8006fa8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006faa:	4628      	mov	r0, r5
 8006fac:	441a      	add	r2, r3
 8006fae:	9209      	str	r2, [sp, #36]	; 0x24
 8006fb0:	f7fe fd20 	bl	80059f4 <__i2b>
 8006fb4:	4606      	mov	r6, r0
 8006fb6:	2f00      	cmp	r7, #0
 8006fb8:	dd0c      	ble.n	8006fd4 <_dtoa_r+0x77c>
 8006fba:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006fbc:	2b00      	cmp	r3, #0
 8006fbe:	dd09      	ble.n	8006fd4 <_dtoa_r+0x77c>
 8006fc0:	42bb      	cmp	r3, r7
 8006fc2:	bfa8      	it	ge
 8006fc4:	463b      	movge	r3, r7
 8006fc6:	9a06      	ldr	r2, [sp, #24]
 8006fc8:	1aff      	subs	r7, r7, r3
 8006fca:	1ad2      	subs	r2, r2, r3
 8006fcc:	9206      	str	r2, [sp, #24]
 8006fce:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006fd0:	1ad3      	subs	r3, r2, r3
 8006fd2:	9309      	str	r3, [sp, #36]	; 0x24
 8006fd4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006fd6:	b1f3      	cbz	r3, 8007016 <_dtoa_r+0x7be>
 8006fd8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006fda:	2b00      	cmp	r3, #0
 8006fdc:	f000 80a8 	beq.w	8007130 <_dtoa_r+0x8d8>
 8006fe0:	2c00      	cmp	r4, #0
 8006fe2:	dd10      	ble.n	8007006 <_dtoa_r+0x7ae>
 8006fe4:	4631      	mov	r1, r6
 8006fe6:	4622      	mov	r2, r4
 8006fe8:	4628      	mov	r0, r5
 8006fea:	f7fe fdc1 	bl	8005b70 <__pow5mult>
 8006fee:	465a      	mov	r2, fp
 8006ff0:	4601      	mov	r1, r0
 8006ff2:	4606      	mov	r6, r0
 8006ff4:	4628      	mov	r0, r5
 8006ff6:	f7fe fd13 	bl	8005a20 <__multiply>
 8006ffa:	4680      	mov	r8, r0
 8006ffc:	4659      	mov	r1, fp
 8006ffe:	4628      	mov	r0, r5
 8007000:	f7fe fc42 	bl	8005888 <_Bfree>
 8007004:	46c3      	mov	fp, r8
 8007006:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007008:	1b1a      	subs	r2, r3, r4
 800700a:	d004      	beq.n	8007016 <_dtoa_r+0x7be>
 800700c:	4659      	mov	r1, fp
 800700e:	4628      	mov	r0, r5
 8007010:	f7fe fdae 	bl	8005b70 <__pow5mult>
 8007014:	4683      	mov	fp, r0
 8007016:	2101      	movs	r1, #1
 8007018:	4628      	mov	r0, r5
 800701a:	f7fe fceb 	bl	80059f4 <__i2b>
 800701e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007020:	4604      	mov	r4, r0
 8007022:	2b00      	cmp	r3, #0
 8007024:	f340 8086 	ble.w	8007134 <_dtoa_r+0x8dc>
 8007028:	461a      	mov	r2, r3
 800702a:	4601      	mov	r1, r0
 800702c:	4628      	mov	r0, r5
 800702e:	f7fe fd9f 	bl	8005b70 <__pow5mult>
 8007032:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8007034:	4604      	mov	r4, r0
 8007036:	2b01      	cmp	r3, #1
 8007038:	dd7f      	ble.n	800713a <_dtoa_r+0x8e2>
 800703a:	f04f 0800 	mov.w	r8, #0
 800703e:	6923      	ldr	r3, [r4, #16]
 8007040:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8007044:	6918      	ldr	r0, [r3, #16]
 8007046:	f7fe fc87 	bl	8005958 <__hi0bits>
 800704a:	f1c0 0020 	rsb	r0, r0, #32
 800704e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007050:	4418      	add	r0, r3
 8007052:	f010 001f 	ands.w	r0, r0, #31
 8007056:	f000 8092 	beq.w	800717e <_dtoa_r+0x926>
 800705a:	f1c0 0320 	rsb	r3, r0, #32
 800705e:	2b04      	cmp	r3, #4
 8007060:	f340 808a 	ble.w	8007178 <_dtoa_r+0x920>
 8007064:	f1c0 001c 	rsb	r0, r0, #28
 8007068:	9b06      	ldr	r3, [sp, #24]
 800706a:	4407      	add	r7, r0
 800706c:	4403      	add	r3, r0
 800706e:	9306      	str	r3, [sp, #24]
 8007070:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007072:	4403      	add	r3, r0
 8007074:	9309      	str	r3, [sp, #36]	; 0x24
 8007076:	9b06      	ldr	r3, [sp, #24]
 8007078:	2b00      	cmp	r3, #0
 800707a:	dd05      	ble.n	8007088 <_dtoa_r+0x830>
 800707c:	4659      	mov	r1, fp
 800707e:	461a      	mov	r2, r3
 8007080:	4628      	mov	r0, r5
 8007082:	f7fe fdcf 	bl	8005c24 <__lshift>
 8007086:	4683      	mov	fp, r0
 8007088:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800708a:	2b00      	cmp	r3, #0
 800708c:	dd05      	ble.n	800709a <_dtoa_r+0x842>
 800708e:	4621      	mov	r1, r4
 8007090:	461a      	mov	r2, r3
 8007092:	4628      	mov	r0, r5
 8007094:	f7fe fdc6 	bl	8005c24 <__lshift>
 8007098:	4604      	mov	r4, r0
 800709a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800709c:	2b00      	cmp	r3, #0
 800709e:	d070      	beq.n	8007182 <_dtoa_r+0x92a>
 80070a0:	4621      	mov	r1, r4
 80070a2:	4658      	mov	r0, fp
 80070a4:	f7fe fe2e 	bl	8005d04 <__mcmp>
 80070a8:	2800      	cmp	r0, #0
 80070aa:	da6a      	bge.n	8007182 <_dtoa_r+0x92a>
 80070ac:	2300      	movs	r3, #0
 80070ae:	4659      	mov	r1, fp
 80070b0:	220a      	movs	r2, #10
 80070b2:	4628      	mov	r0, r5
 80070b4:	f7fe fc0a 	bl	80058cc <__multadd>
 80070b8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80070ba:	4683      	mov	fp, r0
 80070bc:	f10a 3aff 	add.w	sl, sl, #4294967295
 80070c0:	2b00      	cmp	r3, #0
 80070c2:	f000 8194 	beq.w	80073ee <_dtoa_r+0xb96>
 80070c6:	4631      	mov	r1, r6
 80070c8:	2300      	movs	r3, #0
 80070ca:	220a      	movs	r2, #10
 80070cc:	4628      	mov	r0, r5
 80070ce:	f7fe fbfd 	bl	80058cc <__multadd>
 80070d2:	f1b9 0f00 	cmp.w	r9, #0
 80070d6:	4606      	mov	r6, r0
 80070d8:	f300 8093 	bgt.w	8007202 <_dtoa_r+0x9aa>
 80070dc:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80070de:	2b02      	cmp	r3, #2
 80070e0:	dc57      	bgt.n	8007192 <_dtoa_r+0x93a>
 80070e2:	e08e      	b.n	8007202 <_dtoa_r+0x9aa>
 80070e4:	9b16      	ldr	r3, [sp, #88]	; 0x58
 80070e6:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80070ea:	e757      	b.n	8006f9c <_dtoa_r+0x744>
 80070ec:	9b08      	ldr	r3, [sp, #32]
 80070ee:	1e5c      	subs	r4, r3, #1
 80070f0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80070f2:	42a3      	cmp	r3, r4
 80070f4:	bfb7      	itett	lt
 80070f6:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 80070f8:	1b1c      	subge	r4, r3, r4
 80070fa:	1ae2      	sublt	r2, r4, r3
 80070fc:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 80070fe:	bfbe      	ittt	lt
 8007100:	940a      	strlt	r4, [sp, #40]	; 0x28
 8007102:	189b      	addlt	r3, r3, r2
 8007104:	930e      	strlt	r3, [sp, #56]	; 0x38
 8007106:	9b08      	ldr	r3, [sp, #32]
 8007108:	bfb8      	it	lt
 800710a:	2400      	movlt	r4, #0
 800710c:	2b00      	cmp	r3, #0
 800710e:	bfbb      	ittet	lt
 8007110:	9b06      	ldrlt	r3, [sp, #24]
 8007112:	9a08      	ldrlt	r2, [sp, #32]
 8007114:	9f06      	ldrge	r7, [sp, #24]
 8007116:	1a9f      	sublt	r7, r3, r2
 8007118:	bfac      	ite	ge
 800711a:	9b08      	ldrge	r3, [sp, #32]
 800711c:	2300      	movlt	r3, #0
 800711e:	e73f      	b.n	8006fa0 <_dtoa_r+0x748>
 8007120:	3fe00000 	.word	0x3fe00000
 8007124:	40240000 	.word	0x40240000
 8007128:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800712a:	9f06      	ldr	r7, [sp, #24]
 800712c:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 800712e:	e742      	b.n	8006fb6 <_dtoa_r+0x75e>
 8007130:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007132:	e76b      	b.n	800700c <_dtoa_r+0x7b4>
 8007134:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8007136:	2b01      	cmp	r3, #1
 8007138:	dc19      	bgt.n	800716e <_dtoa_r+0x916>
 800713a:	9b04      	ldr	r3, [sp, #16]
 800713c:	b9bb      	cbnz	r3, 800716e <_dtoa_r+0x916>
 800713e:	9b05      	ldr	r3, [sp, #20]
 8007140:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007144:	b99b      	cbnz	r3, 800716e <_dtoa_r+0x916>
 8007146:	9b05      	ldr	r3, [sp, #20]
 8007148:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800714c:	0d1b      	lsrs	r3, r3, #20
 800714e:	051b      	lsls	r3, r3, #20
 8007150:	b183      	cbz	r3, 8007174 <_dtoa_r+0x91c>
 8007152:	f04f 0801 	mov.w	r8, #1
 8007156:	9b06      	ldr	r3, [sp, #24]
 8007158:	3301      	adds	r3, #1
 800715a:	9306      	str	r3, [sp, #24]
 800715c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800715e:	3301      	adds	r3, #1
 8007160:	9309      	str	r3, [sp, #36]	; 0x24
 8007162:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007164:	2b00      	cmp	r3, #0
 8007166:	f47f af6a 	bne.w	800703e <_dtoa_r+0x7e6>
 800716a:	2001      	movs	r0, #1
 800716c:	e76f      	b.n	800704e <_dtoa_r+0x7f6>
 800716e:	f04f 0800 	mov.w	r8, #0
 8007172:	e7f6      	b.n	8007162 <_dtoa_r+0x90a>
 8007174:	4698      	mov	r8, r3
 8007176:	e7f4      	b.n	8007162 <_dtoa_r+0x90a>
 8007178:	f43f af7d 	beq.w	8007076 <_dtoa_r+0x81e>
 800717c:	4618      	mov	r0, r3
 800717e:	301c      	adds	r0, #28
 8007180:	e772      	b.n	8007068 <_dtoa_r+0x810>
 8007182:	9b08      	ldr	r3, [sp, #32]
 8007184:	2b00      	cmp	r3, #0
 8007186:	dc36      	bgt.n	80071f6 <_dtoa_r+0x99e>
 8007188:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800718a:	2b02      	cmp	r3, #2
 800718c:	dd33      	ble.n	80071f6 <_dtoa_r+0x99e>
 800718e:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8007192:	f1b9 0f00 	cmp.w	r9, #0
 8007196:	d10d      	bne.n	80071b4 <_dtoa_r+0x95c>
 8007198:	4621      	mov	r1, r4
 800719a:	464b      	mov	r3, r9
 800719c:	2205      	movs	r2, #5
 800719e:	4628      	mov	r0, r5
 80071a0:	f7fe fb94 	bl	80058cc <__multadd>
 80071a4:	4601      	mov	r1, r0
 80071a6:	4604      	mov	r4, r0
 80071a8:	4658      	mov	r0, fp
 80071aa:	f7fe fdab 	bl	8005d04 <__mcmp>
 80071ae:	2800      	cmp	r0, #0
 80071b0:	f73f adb8 	bgt.w	8006d24 <_dtoa_r+0x4cc>
 80071b4:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80071b6:	9f03      	ldr	r7, [sp, #12]
 80071b8:	ea6f 0a03 	mvn.w	sl, r3
 80071bc:	f04f 0800 	mov.w	r8, #0
 80071c0:	4621      	mov	r1, r4
 80071c2:	4628      	mov	r0, r5
 80071c4:	f7fe fb60 	bl	8005888 <_Bfree>
 80071c8:	2e00      	cmp	r6, #0
 80071ca:	f43f aea7 	beq.w	8006f1c <_dtoa_r+0x6c4>
 80071ce:	f1b8 0f00 	cmp.w	r8, #0
 80071d2:	d005      	beq.n	80071e0 <_dtoa_r+0x988>
 80071d4:	45b0      	cmp	r8, r6
 80071d6:	d003      	beq.n	80071e0 <_dtoa_r+0x988>
 80071d8:	4641      	mov	r1, r8
 80071da:	4628      	mov	r0, r5
 80071dc:	f7fe fb54 	bl	8005888 <_Bfree>
 80071e0:	4631      	mov	r1, r6
 80071e2:	4628      	mov	r0, r5
 80071e4:	f7fe fb50 	bl	8005888 <_Bfree>
 80071e8:	e698      	b.n	8006f1c <_dtoa_r+0x6c4>
 80071ea:	2400      	movs	r4, #0
 80071ec:	4626      	mov	r6, r4
 80071ee:	e7e1      	b.n	80071b4 <_dtoa_r+0x95c>
 80071f0:	46c2      	mov	sl, r8
 80071f2:	4626      	mov	r6, r4
 80071f4:	e596      	b.n	8006d24 <_dtoa_r+0x4cc>
 80071f6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80071f8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80071fc:	2b00      	cmp	r3, #0
 80071fe:	f000 80fd 	beq.w	80073fc <_dtoa_r+0xba4>
 8007202:	2f00      	cmp	r7, #0
 8007204:	dd05      	ble.n	8007212 <_dtoa_r+0x9ba>
 8007206:	4631      	mov	r1, r6
 8007208:	463a      	mov	r2, r7
 800720a:	4628      	mov	r0, r5
 800720c:	f7fe fd0a 	bl	8005c24 <__lshift>
 8007210:	4606      	mov	r6, r0
 8007212:	f1b8 0f00 	cmp.w	r8, #0
 8007216:	d05c      	beq.n	80072d2 <_dtoa_r+0xa7a>
 8007218:	4628      	mov	r0, r5
 800721a:	6871      	ldr	r1, [r6, #4]
 800721c:	f7fe faf4 	bl	8005808 <_Balloc>
 8007220:	4607      	mov	r7, r0
 8007222:	b928      	cbnz	r0, 8007230 <_dtoa_r+0x9d8>
 8007224:	4602      	mov	r2, r0
 8007226:	f240 21ea 	movw	r1, #746	; 0x2ea
 800722a:	4b7f      	ldr	r3, [pc, #508]	; (8007428 <_dtoa_r+0xbd0>)
 800722c:	f7ff bb28 	b.w	8006880 <_dtoa_r+0x28>
 8007230:	6932      	ldr	r2, [r6, #16]
 8007232:	f106 010c 	add.w	r1, r6, #12
 8007236:	3202      	adds	r2, #2
 8007238:	0092      	lsls	r2, r2, #2
 800723a:	300c      	adds	r0, #12
 800723c:	f000 f922 	bl	8007484 <memcpy>
 8007240:	2201      	movs	r2, #1
 8007242:	4639      	mov	r1, r7
 8007244:	4628      	mov	r0, r5
 8007246:	f7fe fced 	bl	8005c24 <__lshift>
 800724a:	46b0      	mov	r8, r6
 800724c:	4606      	mov	r6, r0
 800724e:	9b03      	ldr	r3, [sp, #12]
 8007250:	3301      	adds	r3, #1
 8007252:	9308      	str	r3, [sp, #32]
 8007254:	9b03      	ldr	r3, [sp, #12]
 8007256:	444b      	add	r3, r9
 8007258:	930a      	str	r3, [sp, #40]	; 0x28
 800725a:	9b04      	ldr	r3, [sp, #16]
 800725c:	f003 0301 	and.w	r3, r3, #1
 8007260:	9309      	str	r3, [sp, #36]	; 0x24
 8007262:	9b08      	ldr	r3, [sp, #32]
 8007264:	4621      	mov	r1, r4
 8007266:	3b01      	subs	r3, #1
 8007268:	4658      	mov	r0, fp
 800726a:	9304      	str	r3, [sp, #16]
 800726c:	f7ff fa68 	bl	8006740 <quorem>
 8007270:	4603      	mov	r3, r0
 8007272:	4641      	mov	r1, r8
 8007274:	3330      	adds	r3, #48	; 0x30
 8007276:	9006      	str	r0, [sp, #24]
 8007278:	4658      	mov	r0, fp
 800727a:	930b      	str	r3, [sp, #44]	; 0x2c
 800727c:	f7fe fd42 	bl	8005d04 <__mcmp>
 8007280:	4632      	mov	r2, r6
 8007282:	4681      	mov	r9, r0
 8007284:	4621      	mov	r1, r4
 8007286:	4628      	mov	r0, r5
 8007288:	f7fe fd58 	bl	8005d3c <__mdiff>
 800728c:	68c2      	ldr	r2, [r0, #12]
 800728e:	4607      	mov	r7, r0
 8007290:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007292:	bb02      	cbnz	r2, 80072d6 <_dtoa_r+0xa7e>
 8007294:	4601      	mov	r1, r0
 8007296:	4658      	mov	r0, fp
 8007298:	f7fe fd34 	bl	8005d04 <__mcmp>
 800729c:	4602      	mov	r2, r0
 800729e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80072a0:	4639      	mov	r1, r7
 80072a2:	4628      	mov	r0, r5
 80072a4:	e9cd 320b 	strd	r3, r2, [sp, #44]	; 0x2c
 80072a8:	f7fe faee 	bl	8005888 <_Bfree>
 80072ac:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80072ae:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80072b0:	9f08      	ldr	r7, [sp, #32]
 80072b2:	ea43 0102 	orr.w	r1, r3, r2
 80072b6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80072b8:	430b      	orrs	r3, r1
 80072ba:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80072bc:	d10d      	bne.n	80072da <_dtoa_r+0xa82>
 80072be:	2b39      	cmp	r3, #57	; 0x39
 80072c0:	d029      	beq.n	8007316 <_dtoa_r+0xabe>
 80072c2:	f1b9 0f00 	cmp.w	r9, #0
 80072c6:	dd01      	ble.n	80072cc <_dtoa_r+0xa74>
 80072c8:	9b06      	ldr	r3, [sp, #24]
 80072ca:	3331      	adds	r3, #49	; 0x31
 80072cc:	9a04      	ldr	r2, [sp, #16]
 80072ce:	7013      	strb	r3, [r2, #0]
 80072d0:	e776      	b.n	80071c0 <_dtoa_r+0x968>
 80072d2:	4630      	mov	r0, r6
 80072d4:	e7b9      	b.n	800724a <_dtoa_r+0x9f2>
 80072d6:	2201      	movs	r2, #1
 80072d8:	e7e2      	b.n	80072a0 <_dtoa_r+0xa48>
 80072da:	f1b9 0f00 	cmp.w	r9, #0
 80072de:	db06      	blt.n	80072ee <_dtoa_r+0xa96>
 80072e0:	9922      	ldr	r1, [sp, #136]	; 0x88
 80072e2:	ea41 0909 	orr.w	r9, r1, r9
 80072e6:	9909      	ldr	r1, [sp, #36]	; 0x24
 80072e8:	ea59 0101 	orrs.w	r1, r9, r1
 80072ec:	d120      	bne.n	8007330 <_dtoa_r+0xad8>
 80072ee:	2a00      	cmp	r2, #0
 80072f0:	ddec      	ble.n	80072cc <_dtoa_r+0xa74>
 80072f2:	4659      	mov	r1, fp
 80072f4:	2201      	movs	r2, #1
 80072f6:	4628      	mov	r0, r5
 80072f8:	9308      	str	r3, [sp, #32]
 80072fa:	f7fe fc93 	bl	8005c24 <__lshift>
 80072fe:	4621      	mov	r1, r4
 8007300:	4683      	mov	fp, r0
 8007302:	f7fe fcff 	bl	8005d04 <__mcmp>
 8007306:	2800      	cmp	r0, #0
 8007308:	9b08      	ldr	r3, [sp, #32]
 800730a:	dc02      	bgt.n	8007312 <_dtoa_r+0xaba>
 800730c:	d1de      	bne.n	80072cc <_dtoa_r+0xa74>
 800730e:	07da      	lsls	r2, r3, #31
 8007310:	d5dc      	bpl.n	80072cc <_dtoa_r+0xa74>
 8007312:	2b39      	cmp	r3, #57	; 0x39
 8007314:	d1d8      	bne.n	80072c8 <_dtoa_r+0xa70>
 8007316:	2339      	movs	r3, #57	; 0x39
 8007318:	9a04      	ldr	r2, [sp, #16]
 800731a:	7013      	strb	r3, [r2, #0]
 800731c:	463b      	mov	r3, r7
 800731e:	461f      	mov	r7, r3
 8007320:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 8007324:	3b01      	subs	r3, #1
 8007326:	2a39      	cmp	r2, #57	; 0x39
 8007328:	d050      	beq.n	80073cc <_dtoa_r+0xb74>
 800732a:	3201      	adds	r2, #1
 800732c:	701a      	strb	r2, [r3, #0]
 800732e:	e747      	b.n	80071c0 <_dtoa_r+0x968>
 8007330:	2a00      	cmp	r2, #0
 8007332:	dd03      	ble.n	800733c <_dtoa_r+0xae4>
 8007334:	2b39      	cmp	r3, #57	; 0x39
 8007336:	d0ee      	beq.n	8007316 <_dtoa_r+0xabe>
 8007338:	3301      	adds	r3, #1
 800733a:	e7c7      	b.n	80072cc <_dtoa_r+0xa74>
 800733c:	9a08      	ldr	r2, [sp, #32]
 800733e:	990a      	ldr	r1, [sp, #40]	; 0x28
 8007340:	f802 3c01 	strb.w	r3, [r2, #-1]
 8007344:	428a      	cmp	r2, r1
 8007346:	d02a      	beq.n	800739e <_dtoa_r+0xb46>
 8007348:	4659      	mov	r1, fp
 800734a:	2300      	movs	r3, #0
 800734c:	220a      	movs	r2, #10
 800734e:	4628      	mov	r0, r5
 8007350:	f7fe fabc 	bl	80058cc <__multadd>
 8007354:	45b0      	cmp	r8, r6
 8007356:	4683      	mov	fp, r0
 8007358:	f04f 0300 	mov.w	r3, #0
 800735c:	f04f 020a 	mov.w	r2, #10
 8007360:	4641      	mov	r1, r8
 8007362:	4628      	mov	r0, r5
 8007364:	d107      	bne.n	8007376 <_dtoa_r+0xb1e>
 8007366:	f7fe fab1 	bl	80058cc <__multadd>
 800736a:	4680      	mov	r8, r0
 800736c:	4606      	mov	r6, r0
 800736e:	9b08      	ldr	r3, [sp, #32]
 8007370:	3301      	adds	r3, #1
 8007372:	9308      	str	r3, [sp, #32]
 8007374:	e775      	b.n	8007262 <_dtoa_r+0xa0a>
 8007376:	f7fe faa9 	bl	80058cc <__multadd>
 800737a:	4631      	mov	r1, r6
 800737c:	4680      	mov	r8, r0
 800737e:	2300      	movs	r3, #0
 8007380:	220a      	movs	r2, #10
 8007382:	4628      	mov	r0, r5
 8007384:	f7fe faa2 	bl	80058cc <__multadd>
 8007388:	4606      	mov	r6, r0
 800738a:	e7f0      	b.n	800736e <_dtoa_r+0xb16>
 800738c:	f1b9 0f00 	cmp.w	r9, #0
 8007390:	bfcc      	ite	gt
 8007392:	464f      	movgt	r7, r9
 8007394:	2701      	movle	r7, #1
 8007396:	f04f 0800 	mov.w	r8, #0
 800739a:	9a03      	ldr	r2, [sp, #12]
 800739c:	4417      	add	r7, r2
 800739e:	4659      	mov	r1, fp
 80073a0:	2201      	movs	r2, #1
 80073a2:	4628      	mov	r0, r5
 80073a4:	9308      	str	r3, [sp, #32]
 80073a6:	f7fe fc3d 	bl	8005c24 <__lshift>
 80073aa:	4621      	mov	r1, r4
 80073ac:	4683      	mov	fp, r0
 80073ae:	f7fe fca9 	bl	8005d04 <__mcmp>
 80073b2:	2800      	cmp	r0, #0
 80073b4:	dcb2      	bgt.n	800731c <_dtoa_r+0xac4>
 80073b6:	d102      	bne.n	80073be <_dtoa_r+0xb66>
 80073b8:	9b08      	ldr	r3, [sp, #32]
 80073ba:	07db      	lsls	r3, r3, #31
 80073bc:	d4ae      	bmi.n	800731c <_dtoa_r+0xac4>
 80073be:	463b      	mov	r3, r7
 80073c0:	461f      	mov	r7, r3
 80073c2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80073c6:	2a30      	cmp	r2, #48	; 0x30
 80073c8:	d0fa      	beq.n	80073c0 <_dtoa_r+0xb68>
 80073ca:	e6f9      	b.n	80071c0 <_dtoa_r+0x968>
 80073cc:	9a03      	ldr	r2, [sp, #12]
 80073ce:	429a      	cmp	r2, r3
 80073d0:	d1a5      	bne.n	800731e <_dtoa_r+0xac6>
 80073d2:	2331      	movs	r3, #49	; 0x31
 80073d4:	f10a 0a01 	add.w	sl, sl, #1
 80073d8:	e779      	b.n	80072ce <_dtoa_r+0xa76>
 80073da:	4b14      	ldr	r3, [pc, #80]	; (800742c <_dtoa_r+0xbd4>)
 80073dc:	f7ff baa8 	b.w	8006930 <_dtoa_r+0xd8>
 80073e0:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80073e2:	2b00      	cmp	r3, #0
 80073e4:	f47f aa81 	bne.w	80068ea <_dtoa_r+0x92>
 80073e8:	4b11      	ldr	r3, [pc, #68]	; (8007430 <_dtoa_r+0xbd8>)
 80073ea:	f7ff baa1 	b.w	8006930 <_dtoa_r+0xd8>
 80073ee:	f1b9 0f00 	cmp.w	r9, #0
 80073f2:	dc03      	bgt.n	80073fc <_dtoa_r+0xba4>
 80073f4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80073f6:	2b02      	cmp	r3, #2
 80073f8:	f73f aecb 	bgt.w	8007192 <_dtoa_r+0x93a>
 80073fc:	9f03      	ldr	r7, [sp, #12]
 80073fe:	4621      	mov	r1, r4
 8007400:	4658      	mov	r0, fp
 8007402:	f7ff f99d 	bl	8006740 <quorem>
 8007406:	9a03      	ldr	r2, [sp, #12]
 8007408:	f100 0330 	add.w	r3, r0, #48	; 0x30
 800740c:	f807 3b01 	strb.w	r3, [r7], #1
 8007410:	1aba      	subs	r2, r7, r2
 8007412:	4591      	cmp	r9, r2
 8007414:	ddba      	ble.n	800738c <_dtoa_r+0xb34>
 8007416:	4659      	mov	r1, fp
 8007418:	2300      	movs	r3, #0
 800741a:	220a      	movs	r2, #10
 800741c:	4628      	mov	r0, r5
 800741e:	f7fe fa55 	bl	80058cc <__multadd>
 8007422:	4683      	mov	fp, r0
 8007424:	e7eb      	b.n	80073fe <_dtoa_r+0xba6>
 8007426:	bf00      	nop
 8007428:	08008eef 	.word	0x08008eef
 800742c:	08009078 	.word	0x08009078
 8007430:	0800906b 	.word	0x0800906b

08007434 <fiprintf>:
 8007434:	b40e      	push	{r1, r2, r3}
 8007436:	b503      	push	{r0, r1, lr}
 8007438:	4601      	mov	r1, r0
 800743a:	ab03      	add	r3, sp, #12
 800743c:	4805      	ldr	r0, [pc, #20]	; (8007454 <fiprintf+0x20>)
 800743e:	f853 2b04 	ldr.w	r2, [r3], #4
 8007442:	6800      	ldr	r0, [r0, #0]
 8007444:	9301      	str	r3, [sp, #4]
 8007446:	f000 f8c9 	bl	80075dc <_vfiprintf_r>
 800744a:	b002      	add	sp, #8
 800744c:	f85d eb04 	ldr.w	lr, [sp], #4
 8007450:	b003      	add	sp, #12
 8007452:	4770      	bx	lr
 8007454:	2000002c 	.word	0x2000002c

08007458 <malloc>:
 8007458:	4b02      	ldr	r3, [pc, #8]	; (8007464 <malloc+0xc>)
 800745a:	4601      	mov	r1, r0
 800745c:	6818      	ldr	r0, [r3, #0]
 800745e:	f7fe bda5 	b.w	8005fac <_malloc_r>
 8007462:	bf00      	nop
 8007464:	2000002c 	.word	0x2000002c

08007468 <memchr>:
 8007468:	4603      	mov	r3, r0
 800746a:	b510      	push	{r4, lr}
 800746c:	b2c9      	uxtb	r1, r1
 800746e:	4402      	add	r2, r0
 8007470:	4293      	cmp	r3, r2
 8007472:	4618      	mov	r0, r3
 8007474:	d101      	bne.n	800747a <memchr+0x12>
 8007476:	2000      	movs	r0, #0
 8007478:	e003      	b.n	8007482 <memchr+0x1a>
 800747a:	7804      	ldrb	r4, [r0, #0]
 800747c:	3301      	adds	r3, #1
 800747e:	428c      	cmp	r4, r1
 8007480:	d1f6      	bne.n	8007470 <memchr+0x8>
 8007482:	bd10      	pop	{r4, pc}

08007484 <memcpy>:
 8007484:	440a      	add	r2, r1
 8007486:	4291      	cmp	r1, r2
 8007488:	f100 33ff 	add.w	r3, r0, #4294967295
 800748c:	d100      	bne.n	8007490 <memcpy+0xc>
 800748e:	4770      	bx	lr
 8007490:	b510      	push	{r4, lr}
 8007492:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007496:	4291      	cmp	r1, r2
 8007498:	f803 4f01 	strb.w	r4, [r3, #1]!
 800749c:	d1f9      	bne.n	8007492 <memcpy+0xe>
 800749e:	bd10      	pop	{r4, pc}

080074a0 <memmove>:
 80074a0:	4288      	cmp	r0, r1
 80074a2:	b510      	push	{r4, lr}
 80074a4:	eb01 0402 	add.w	r4, r1, r2
 80074a8:	d902      	bls.n	80074b0 <memmove+0x10>
 80074aa:	4284      	cmp	r4, r0
 80074ac:	4623      	mov	r3, r4
 80074ae:	d807      	bhi.n	80074c0 <memmove+0x20>
 80074b0:	1e43      	subs	r3, r0, #1
 80074b2:	42a1      	cmp	r1, r4
 80074b4:	d008      	beq.n	80074c8 <memmove+0x28>
 80074b6:	f811 2b01 	ldrb.w	r2, [r1], #1
 80074ba:	f803 2f01 	strb.w	r2, [r3, #1]!
 80074be:	e7f8      	b.n	80074b2 <memmove+0x12>
 80074c0:	4601      	mov	r1, r0
 80074c2:	4402      	add	r2, r0
 80074c4:	428a      	cmp	r2, r1
 80074c6:	d100      	bne.n	80074ca <memmove+0x2a>
 80074c8:	bd10      	pop	{r4, pc}
 80074ca:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80074ce:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80074d2:	e7f7      	b.n	80074c4 <memmove+0x24>

080074d4 <__malloc_lock>:
 80074d4:	4801      	ldr	r0, [pc, #4]	; (80074dc <__malloc_lock+0x8>)
 80074d6:	f000 bc2d 	b.w	8007d34 <__retarget_lock_acquire_recursive>
 80074da:	bf00      	nop
 80074dc:	20000224 	.word	0x20000224

080074e0 <__malloc_unlock>:
 80074e0:	4801      	ldr	r0, [pc, #4]	; (80074e8 <__malloc_unlock+0x8>)
 80074e2:	f000 bc28 	b.w	8007d36 <__retarget_lock_release_recursive>
 80074e6:	bf00      	nop
 80074e8:	20000224 	.word	0x20000224

080074ec <_free_r>:
 80074ec:	b538      	push	{r3, r4, r5, lr}
 80074ee:	4605      	mov	r5, r0
 80074f0:	2900      	cmp	r1, #0
 80074f2:	d040      	beq.n	8007576 <_free_r+0x8a>
 80074f4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80074f8:	1f0c      	subs	r4, r1, #4
 80074fa:	2b00      	cmp	r3, #0
 80074fc:	bfb8      	it	lt
 80074fe:	18e4      	addlt	r4, r4, r3
 8007500:	f7ff ffe8 	bl	80074d4 <__malloc_lock>
 8007504:	4a1c      	ldr	r2, [pc, #112]	; (8007578 <_free_r+0x8c>)
 8007506:	6813      	ldr	r3, [r2, #0]
 8007508:	b933      	cbnz	r3, 8007518 <_free_r+0x2c>
 800750a:	6063      	str	r3, [r4, #4]
 800750c:	6014      	str	r4, [r2, #0]
 800750e:	4628      	mov	r0, r5
 8007510:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007514:	f7ff bfe4 	b.w	80074e0 <__malloc_unlock>
 8007518:	42a3      	cmp	r3, r4
 800751a:	d908      	bls.n	800752e <_free_r+0x42>
 800751c:	6820      	ldr	r0, [r4, #0]
 800751e:	1821      	adds	r1, r4, r0
 8007520:	428b      	cmp	r3, r1
 8007522:	bf01      	itttt	eq
 8007524:	6819      	ldreq	r1, [r3, #0]
 8007526:	685b      	ldreq	r3, [r3, #4]
 8007528:	1809      	addeq	r1, r1, r0
 800752a:	6021      	streq	r1, [r4, #0]
 800752c:	e7ed      	b.n	800750a <_free_r+0x1e>
 800752e:	461a      	mov	r2, r3
 8007530:	685b      	ldr	r3, [r3, #4]
 8007532:	b10b      	cbz	r3, 8007538 <_free_r+0x4c>
 8007534:	42a3      	cmp	r3, r4
 8007536:	d9fa      	bls.n	800752e <_free_r+0x42>
 8007538:	6811      	ldr	r1, [r2, #0]
 800753a:	1850      	adds	r0, r2, r1
 800753c:	42a0      	cmp	r0, r4
 800753e:	d10b      	bne.n	8007558 <_free_r+0x6c>
 8007540:	6820      	ldr	r0, [r4, #0]
 8007542:	4401      	add	r1, r0
 8007544:	1850      	adds	r0, r2, r1
 8007546:	4283      	cmp	r3, r0
 8007548:	6011      	str	r1, [r2, #0]
 800754a:	d1e0      	bne.n	800750e <_free_r+0x22>
 800754c:	6818      	ldr	r0, [r3, #0]
 800754e:	685b      	ldr	r3, [r3, #4]
 8007550:	4401      	add	r1, r0
 8007552:	6011      	str	r1, [r2, #0]
 8007554:	6053      	str	r3, [r2, #4]
 8007556:	e7da      	b.n	800750e <_free_r+0x22>
 8007558:	d902      	bls.n	8007560 <_free_r+0x74>
 800755a:	230c      	movs	r3, #12
 800755c:	602b      	str	r3, [r5, #0]
 800755e:	e7d6      	b.n	800750e <_free_r+0x22>
 8007560:	6820      	ldr	r0, [r4, #0]
 8007562:	1821      	adds	r1, r4, r0
 8007564:	428b      	cmp	r3, r1
 8007566:	bf01      	itttt	eq
 8007568:	6819      	ldreq	r1, [r3, #0]
 800756a:	685b      	ldreq	r3, [r3, #4]
 800756c:	1809      	addeq	r1, r1, r0
 800756e:	6021      	streq	r1, [r4, #0]
 8007570:	6063      	str	r3, [r4, #4]
 8007572:	6054      	str	r4, [r2, #4]
 8007574:	e7cb      	b.n	800750e <_free_r+0x22>
 8007576:	bd38      	pop	{r3, r4, r5, pc}
 8007578:	20000218 	.word	0x20000218

0800757c <_malloc_usable_size_r>:
 800757c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007580:	1f18      	subs	r0, r3, #4
 8007582:	2b00      	cmp	r3, #0
 8007584:	bfbc      	itt	lt
 8007586:	580b      	ldrlt	r3, [r1, r0]
 8007588:	18c0      	addlt	r0, r0, r3
 800758a:	4770      	bx	lr

0800758c <__sfputc_r>:
 800758c:	6893      	ldr	r3, [r2, #8]
 800758e:	b410      	push	{r4}
 8007590:	3b01      	subs	r3, #1
 8007592:	2b00      	cmp	r3, #0
 8007594:	6093      	str	r3, [r2, #8]
 8007596:	da07      	bge.n	80075a8 <__sfputc_r+0x1c>
 8007598:	6994      	ldr	r4, [r2, #24]
 800759a:	42a3      	cmp	r3, r4
 800759c:	db01      	blt.n	80075a2 <__sfputc_r+0x16>
 800759e:	290a      	cmp	r1, #10
 80075a0:	d102      	bne.n	80075a8 <__sfputc_r+0x1c>
 80075a2:	bc10      	pop	{r4}
 80075a4:	f000 b94a 	b.w	800783c <__swbuf_r>
 80075a8:	6813      	ldr	r3, [r2, #0]
 80075aa:	1c58      	adds	r0, r3, #1
 80075ac:	6010      	str	r0, [r2, #0]
 80075ae:	7019      	strb	r1, [r3, #0]
 80075b0:	4608      	mov	r0, r1
 80075b2:	bc10      	pop	{r4}
 80075b4:	4770      	bx	lr

080075b6 <__sfputs_r>:
 80075b6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80075b8:	4606      	mov	r6, r0
 80075ba:	460f      	mov	r7, r1
 80075bc:	4614      	mov	r4, r2
 80075be:	18d5      	adds	r5, r2, r3
 80075c0:	42ac      	cmp	r4, r5
 80075c2:	d101      	bne.n	80075c8 <__sfputs_r+0x12>
 80075c4:	2000      	movs	r0, #0
 80075c6:	e007      	b.n	80075d8 <__sfputs_r+0x22>
 80075c8:	463a      	mov	r2, r7
 80075ca:	4630      	mov	r0, r6
 80075cc:	f814 1b01 	ldrb.w	r1, [r4], #1
 80075d0:	f7ff ffdc 	bl	800758c <__sfputc_r>
 80075d4:	1c43      	adds	r3, r0, #1
 80075d6:	d1f3      	bne.n	80075c0 <__sfputs_r+0xa>
 80075d8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080075dc <_vfiprintf_r>:
 80075dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80075e0:	460d      	mov	r5, r1
 80075e2:	4614      	mov	r4, r2
 80075e4:	4698      	mov	r8, r3
 80075e6:	4606      	mov	r6, r0
 80075e8:	b09d      	sub	sp, #116	; 0x74
 80075ea:	b118      	cbz	r0, 80075f4 <_vfiprintf_r+0x18>
 80075ec:	6983      	ldr	r3, [r0, #24]
 80075ee:	b90b      	cbnz	r3, 80075f4 <_vfiprintf_r+0x18>
 80075f0:	f000 fb02 	bl	8007bf8 <__sinit>
 80075f4:	4b89      	ldr	r3, [pc, #548]	; (800781c <_vfiprintf_r+0x240>)
 80075f6:	429d      	cmp	r5, r3
 80075f8:	d11b      	bne.n	8007632 <_vfiprintf_r+0x56>
 80075fa:	6875      	ldr	r5, [r6, #4]
 80075fc:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80075fe:	07d9      	lsls	r1, r3, #31
 8007600:	d405      	bmi.n	800760e <_vfiprintf_r+0x32>
 8007602:	89ab      	ldrh	r3, [r5, #12]
 8007604:	059a      	lsls	r2, r3, #22
 8007606:	d402      	bmi.n	800760e <_vfiprintf_r+0x32>
 8007608:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800760a:	f000 fb93 	bl	8007d34 <__retarget_lock_acquire_recursive>
 800760e:	89ab      	ldrh	r3, [r5, #12]
 8007610:	071b      	lsls	r3, r3, #28
 8007612:	d501      	bpl.n	8007618 <_vfiprintf_r+0x3c>
 8007614:	692b      	ldr	r3, [r5, #16]
 8007616:	b9eb      	cbnz	r3, 8007654 <_vfiprintf_r+0x78>
 8007618:	4629      	mov	r1, r5
 800761a:	4630      	mov	r0, r6
 800761c:	f000 f960 	bl	80078e0 <__swsetup_r>
 8007620:	b1c0      	cbz	r0, 8007654 <_vfiprintf_r+0x78>
 8007622:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007624:	07dc      	lsls	r4, r3, #31
 8007626:	d50e      	bpl.n	8007646 <_vfiprintf_r+0x6a>
 8007628:	f04f 30ff 	mov.w	r0, #4294967295
 800762c:	b01d      	add	sp, #116	; 0x74
 800762e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007632:	4b7b      	ldr	r3, [pc, #492]	; (8007820 <_vfiprintf_r+0x244>)
 8007634:	429d      	cmp	r5, r3
 8007636:	d101      	bne.n	800763c <_vfiprintf_r+0x60>
 8007638:	68b5      	ldr	r5, [r6, #8]
 800763a:	e7df      	b.n	80075fc <_vfiprintf_r+0x20>
 800763c:	4b79      	ldr	r3, [pc, #484]	; (8007824 <_vfiprintf_r+0x248>)
 800763e:	429d      	cmp	r5, r3
 8007640:	bf08      	it	eq
 8007642:	68f5      	ldreq	r5, [r6, #12]
 8007644:	e7da      	b.n	80075fc <_vfiprintf_r+0x20>
 8007646:	89ab      	ldrh	r3, [r5, #12]
 8007648:	0598      	lsls	r0, r3, #22
 800764a:	d4ed      	bmi.n	8007628 <_vfiprintf_r+0x4c>
 800764c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800764e:	f000 fb72 	bl	8007d36 <__retarget_lock_release_recursive>
 8007652:	e7e9      	b.n	8007628 <_vfiprintf_r+0x4c>
 8007654:	2300      	movs	r3, #0
 8007656:	9309      	str	r3, [sp, #36]	; 0x24
 8007658:	2320      	movs	r3, #32
 800765a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800765e:	2330      	movs	r3, #48	; 0x30
 8007660:	f04f 0901 	mov.w	r9, #1
 8007664:	f8cd 800c 	str.w	r8, [sp, #12]
 8007668:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 8007828 <_vfiprintf_r+0x24c>
 800766c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007670:	4623      	mov	r3, r4
 8007672:	469a      	mov	sl, r3
 8007674:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007678:	b10a      	cbz	r2, 800767e <_vfiprintf_r+0xa2>
 800767a:	2a25      	cmp	r2, #37	; 0x25
 800767c:	d1f9      	bne.n	8007672 <_vfiprintf_r+0x96>
 800767e:	ebba 0b04 	subs.w	fp, sl, r4
 8007682:	d00b      	beq.n	800769c <_vfiprintf_r+0xc0>
 8007684:	465b      	mov	r3, fp
 8007686:	4622      	mov	r2, r4
 8007688:	4629      	mov	r1, r5
 800768a:	4630      	mov	r0, r6
 800768c:	f7ff ff93 	bl	80075b6 <__sfputs_r>
 8007690:	3001      	adds	r0, #1
 8007692:	f000 80aa 	beq.w	80077ea <_vfiprintf_r+0x20e>
 8007696:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007698:	445a      	add	r2, fp
 800769a:	9209      	str	r2, [sp, #36]	; 0x24
 800769c:	f89a 3000 	ldrb.w	r3, [sl]
 80076a0:	2b00      	cmp	r3, #0
 80076a2:	f000 80a2 	beq.w	80077ea <_vfiprintf_r+0x20e>
 80076a6:	2300      	movs	r3, #0
 80076a8:	f04f 32ff 	mov.w	r2, #4294967295
 80076ac:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80076b0:	f10a 0a01 	add.w	sl, sl, #1
 80076b4:	9304      	str	r3, [sp, #16]
 80076b6:	9307      	str	r3, [sp, #28]
 80076b8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80076bc:	931a      	str	r3, [sp, #104]	; 0x68
 80076be:	4654      	mov	r4, sl
 80076c0:	2205      	movs	r2, #5
 80076c2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80076c6:	4858      	ldr	r0, [pc, #352]	; (8007828 <_vfiprintf_r+0x24c>)
 80076c8:	f7ff fece 	bl	8007468 <memchr>
 80076cc:	9a04      	ldr	r2, [sp, #16]
 80076ce:	b9d8      	cbnz	r0, 8007708 <_vfiprintf_r+0x12c>
 80076d0:	06d1      	lsls	r1, r2, #27
 80076d2:	bf44      	itt	mi
 80076d4:	2320      	movmi	r3, #32
 80076d6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80076da:	0713      	lsls	r3, r2, #28
 80076dc:	bf44      	itt	mi
 80076de:	232b      	movmi	r3, #43	; 0x2b
 80076e0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80076e4:	f89a 3000 	ldrb.w	r3, [sl]
 80076e8:	2b2a      	cmp	r3, #42	; 0x2a
 80076ea:	d015      	beq.n	8007718 <_vfiprintf_r+0x13c>
 80076ec:	4654      	mov	r4, sl
 80076ee:	2000      	movs	r0, #0
 80076f0:	f04f 0c0a 	mov.w	ip, #10
 80076f4:	9a07      	ldr	r2, [sp, #28]
 80076f6:	4621      	mov	r1, r4
 80076f8:	f811 3b01 	ldrb.w	r3, [r1], #1
 80076fc:	3b30      	subs	r3, #48	; 0x30
 80076fe:	2b09      	cmp	r3, #9
 8007700:	d94e      	bls.n	80077a0 <_vfiprintf_r+0x1c4>
 8007702:	b1b0      	cbz	r0, 8007732 <_vfiprintf_r+0x156>
 8007704:	9207      	str	r2, [sp, #28]
 8007706:	e014      	b.n	8007732 <_vfiprintf_r+0x156>
 8007708:	eba0 0308 	sub.w	r3, r0, r8
 800770c:	fa09 f303 	lsl.w	r3, r9, r3
 8007710:	4313      	orrs	r3, r2
 8007712:	46a2      	mov	sl, r4
 8007714:	9304      	str	r3, [sp, #16]
 8007716:	e7d2      	b.n	80076be <_vfiprintf_r+0xe2>
 8007718:	9b03      	ldr	r3, [sp, #12]
 800771a:	1d19      	adds	r1, r3, #4
 800771c:	681b      	ldr	r3, [r3, #0]
 800771e:	9103      	str	r1, [sp, #12]
 8007720:	2b00      	cmp	r3, #0
 8007722:	bfbb      	ittet	lt
 8007724:	425b      	neglt	r3, r3
 8007726:	f042 0202 	orrlt.w	r2, r2, #2
 800772a:	9307      	strge	r3, [sp, #28]
 800772c:	9307      	strlt	r3, [sp, #28]
 800772e:	bfb8      	it	lt
 8007730:	9204      	strlt	r2, [sp, #16]
 8007732:	7823      	ldrb	r3, [r4, #0]
 8007734:	2b2e      	cmp	r3, #46	; 0x2e
 8007736:	d10c      	bne.n	8007752 <_vfiprintf_r+0x176>
 8007738:	7863      	ldrb	r3, [r4, #1]
 800773a:	2b2a      	cmp	r3, #42	; 0x2a
 800773c:	d135      	bne.n	80077aa <_vfiprintf_r+0x1ce>
 800773e:	9b03      	ldr	r3, [sp, #12]
 8007740:	3402      	adds	r4, #2
 8007742:	1d1a      	adds	r2, r3, #4
 8007744:	681b      	ldr	r3, [r3, #0]
 8007746:	9203      	str	r2, [sp, #12]
 8007748:	2b00      	cmp	r3, #0
 800774a:	bfb8      	it	lt
 800774c:	f04f 33ff 	movlt.w	r3, #4294967295
 8007750:	9305      	str	r3, [sp, #20]
 8007752:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 800782c <_vfiprintf_r+0x250>
 8007756:	2203      	movs	r2, #3
 8007758:	4650      	mov	r0, sl
 800775a:	7821      	ldrb	r1, [r4, #0]
 800775c:	f7ff fe84 	bl	8007468 <memchr>
 8007760:	b140      	cbz	r0, 8007774 <_vfiprintf_r+0x198>
 8007762:	2340      	movs	r3, #64	; 0x40
 8007764:	eba0 000a 	sub.w	r0, r0, sl
 8007768:	fa03 f000 	lsl.w	r0, r3, r0
 800776c:	9b04      	ldr	r3, [sp, #16]
 800776e:	3401      	adds	r4, #1
 8007770:	4303      	orrs	r3, r0
 8007772:	9304      	str	r3, [sp, #16]
 8007774:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007778:	2206      	movs	r2, #6
 800777a:	482d      	ldr	r0, [pc, #180]	; (8007830 <_vfiprintf_r+0x254>)
 800777c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007780:	f7ff fe72 	bl	8007468 <memchr>
 8007784:	2800      	cmp	r0, #0
 8007786:	d03f      	beq.n	8007808 <_vfiprintf_r+0x22c>
 8007788:	4b2a      	ldr	r3, [pc, #168]	; (8007834 <_vfiprintf_r+0x258>)
 800778a:	bb1b      	cbnz	r3, 80077d4 <_vfiprintf_r+0x1f8>
 800778c:	9b03      	ldr	r3, [sp, #12]
 800778e:	3307      	adds	r3, #7
 8007790:	f023 0307 	bic.w	r3, r3, #7
 8007794:	3308      	adds	r3, #8
 8007796:	9303      	str	r3, [sp, #12]
 8007798:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800779a:	443b      	add	r3, r7
 800779c:	9309      	str	r3, [sp, #36]	; 0x24
 800779e:	e767      	b.n	8007670 <_vfiprintf_r+0x94>
 80077a0:	460c      	mov	r4, r1
 80077a2:	2001      	movs	r0, #1
 80077a4:	fb0c 3202 	mla	r2, ip, r2, r3
 80077a8:	e7a5      	b.n	80076f6 <_vfiprintf_r+0x11a>
 80077aa:	2300      	movs	r3, #0
 80077ac:	f04f 0c0a 	mov.w	ip, #10
 80077b0:	4619      	mov	r1, r3
 80077b2:	3401      	adds	r4, #1
 80077b4:	9305      	str	r3, [sp, #20]
 80077b6:	4620      	mov	r0, r4
 80077b8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80077bc:	3a30      	subs	r2, #48	; 0x30
 80077be:	2a09      	cmp	r2, #9
 80077c0:	d903      	bls.n	80077ca <_vfiprintf_r+0x1ee>
 80077c2:	2b00      	cmp	r3, #0
 80077c4:	d0c5      	beq.n	8007752 <_vfiprintf_r+0x176>
 80077c6:	9105      	str	r1, [sp, #20]
 80077c8:	e7c3      	b.n	8007752 <_vfiprintf_r+0x176>
 80077ca:	4604      	mov	r4, r0
 80077cc:	2301      	movs	r3, #1
 80077ce:	fb0c 2101 	mla	r1, ip, r1, r2
 80077d2:	e7f0      	b.n	80077b6 <_vfiprintf_r+0x1da>
 80077d4:	ab03      	add	r3, sp, #12
 80077d6:	9300      	str	r3, [sp, #0]
 80077d8:	462a      	mov	r2, r5
 80077da:	4630      	mov	r0, r6
 80077dc:	4b16      	ldr	r3, [pc, #88]	; (8007838 <_vfiprintf_r+0x25c>)
 80077de:	a904      	add	r1, sp, #16
 80077e0:	f3af 8000 	nop.w
 80077e4:	4607      	mov	r7, r0
 80077e6:	1c78      	adds	r0, r7, #1
 80077e8:	d1d6      	bne.n	8007798 <_vfiprintf_r+0x1bc>
 80077ea:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80077ec:	07d9      	lsls	r1, r3, #31
 80077ee:	d405      	bmi.n	80077fc <_vfiprintf_r+0x220>
 80077f0:	89ab      	ldrh	r3, [r5, #12]
 80077f2:	059a      	lsls	r2, r3, #22
 80077f4:	d402      	bmi.n	80077fc <_vfiprintf_r+0x220>
 80077f6:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80077f8:	f000 fa9d 	bl	8007d36 <__retarget_lock_release_recursive>
 80077fc:	89ab      	ldrh	r3, [r5, #12]
 80077fe:	065b      	lsls	r3, r3, #25
 8007800:	f53f af12 	bmi.w	8007628 <_vfiprintf_r+0x4c>
 8007804:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007806:	e711      	b.n	800762c <_vfiprintf_r+0x50>
 8007808:	ab03      	add	r3, sp, #12
 800780a:	9300      	str	r3, [sp, #0]
 800780c:	462a      	mov	r2, r5
 800780e:	4630      	mov	r0, r6
 8007810:	4b09      	ldr	r3, [pc, #36]	; (8007838 <_vfiprintf_r+0x25c>)
 8007812:	a904      	add	r1, sp, #16
 8007814:	f7fe fe38 	bl	8006488 <_printf_i>
 8007818:	e7e4      	b.n	80077e4 <_vfiprintf_r+0x208>
 800781a:	bf00      	nop
 800781c:	080090f8 	.word	0x080090f8
 8007820:	08009118 	.word	0x08009118
 8007824:	080090d8 	.word	0x080090d8
 8007828:	08008ffc 	.word	0x08008ffc
 800782c:	08009002 	.word	0x08009002
 8007830:	08009006 	.word	0x08009006
 8007834:	00000000 	.word	0x00000000
 8007838:	080075b7 	.word	0x080075b7

0800783c <__swbuf_r>:
 800783c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800783e:	460e      	mov	r6, r1
 8007840:	4614      	mov	r4, r2
 8007842:	4605      	mov	r5, r0
 8007844:	b118      	cbz	r0, 800784e <__swbuf_r+0x12>
 8007846:	6983      	ldr	r3, [r0, #24]
 8007848:	b90b      	cbnz	r3, 800784e <__swbuf_r+0x12>
 800784a:	f000 f9d5 	bl	8007bf8 <__sinit>
 800784e:	4b21      	ldr	r3, [pc, #132]	; (80078d4 <__swbuf_r+0x98>)
 8007850:	429c      	cmp	r4, r3
 8007852:	d12b      	bne.n	80078ac <__swbuf_r+0x70>
 8007854:	686c      	ldr	r4, [r5, #4]
 8007856:	69a3      	ldr	r3, [r4, #24]
 8007858:	60a3      	str	r3, [r4, #8]
 800785a:	89a3      	ldrh	r3, [r4, #12]
 800785c:	071a      	lsls	r2, r3, #28
 800785e:	d52f      	bpl.n	80078c0 <__swbuf_r+0x84>
 8007860:	6923      	ldr	r3, [r4, #16]
 8007862:	b36b      	cbz	r3, 80078c0 <__swbuf_r+0x84>
 8007864:	6923      	ldr	r3, [r4, #16]
 8007866:	6820      	ldr	r0, [r4, #0]
 8007868:	b2f6      	uxtb	r6, r6
 800786a:	1ac0      	subs	r0, r0, r3
 800786c:	6963      	ldr	r3, [r4, #20]
 800786e:	4637      	mov	r7, r6
 8007870:	4283      	cmp	r3, r0
 8007872:	dc04      	bgt.n	800787e <__swbuf_r+0x42>
 8007874:	4621      	mov	r1, r4
 8007876:	4628      	mov	r0, r5
 8007878:	f000 f92a 	bl	8007ad0 <_fflush_r>
 800787c:	bb30      	cbnz	r0, 80078cc <__swbuf_r+0x90>
 800787e:	68a3      	ldr	r3, [r4, #8]
 8007880:	3001      	adds	r0, #1
 8007882:	3b01      	subs	r3, #1
 8007884:	60a3      	str	r3, [r4, #8]
 8007886:	6823      	ldr	r3, [r4, #0]
 8007888:	1c5a      	adds	r2, r3, #1
 800788a:	6022      	str	r2, [r4, #0]
 800788c:	701e      	strb	r6, [r3, #0]
 800788e:	6963      	ldr	r3, [r4, #20]
 8007890:	4283      	cmp	r3, r0
 8007892:	d004      	beq.n	800789e <__swbuf_r+0x62>
 8007894:	89a3      	ldrh	r3, [r4, #12]
 8007896:	07db      	lsls	r3, r3, #31
 8007898:	d506      	bpl.n	80078a8 <__swbuf_r+0x6c>
 800789a:	2e0a      	cmp	r6, #10
 800789c:	d104      	bne.n	80078a8 <__swbuf_r+0x6c>
 800789e:	4621      	mov	r1, r4
 80078a0:	4628      	mov	r0, r5
 80078a2:	f000 f915 	bl	8007ad0 <_fflush_r>
 80078a6:	b988      	cbnz	r0, 80078cc <__swbuf_r+0x90>
 80078a8:	4638      	mov	r0, r7
 80078aa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80078ac:	4b0a      	ldr	r3, [pc, #40]	; (80078d8 <__swbuf_r+0x9c>)
 80078ae:	429c      	cmp	r4, r3
 80078b0:	d101      	bne.n	80078b6 <__swbuf_r+0x7a>
 80078b2:	68ac      	ldr	r4, [r5, #8]
 80078b4:	e7cf      	b.n	8007856 <__swbuf_r+0x1a>
 80078b6:	4b09      	ldr	r3, [pc, #36]	; (80078dc <__swbuf_r+0xa0>)
 80078b8:	429c      	cmp	r4, r3
 80078ba:	bf08      	it	eq
 80078bc:	68ec      	ldreq	r4, [r5, #12]
 80078be:	e7ca      	b.n	8007856 <__swbuf_r+0x1a>
 80078c0:	4621      	mov	r1, r4
 80078c2:	4628      	mov	r0, r5
 80078c4:	f000 f80c 	bl	80078e0 <__swsetup_r>
 80078c8:	2800      	cmp	r0, #0
 80078ca:	d0cb      	beq.n	8007864 <__swbuf_r+0x28>
 80078cc:	f04f 37ff 	mov.w	r7, #4294967295
 80078d0:	e7ea      	b.n	80078a8 <__swbuf_r+0x6c>
 80078d2:	bf00      	nop
 80078d4:	080090f8 	.word	0x080090f8
 80078d8:	08009118 	.word	0x08009118
 80078dc:	080090d8 	.word	0x080090d8

080078e0 <__swsetup_r>:
 80078e0:	4b32      	ldr	r3, [pc, #200]	; (80079ac <__swsetup_r+0xcc>)
 80078e2:	b570      	push	{r4, r5, r6, lr}
 80078e4:	681d      	ldr	r5, [r3, #0]
 80078e6:	4606      	mov	r6, r0
 80078e8:	460c      	mov	r4, r1
 80078ea:	b125      	cbz	r5, 80078f6 <__swsetup_r+0x16>
 80078ec:	69ab      	ldr	r3, [r5, #24]
 80078ee:	b913      	cbnz	r3, 80078f6 <__swsetup_r+0x16>
 80078f0:	4628      	mov	r0, r5
 80078f2:	f000 f981 	bl	8007bf8 <__sinit>
 80078f6:	4b2e      	ldr	r3, [pc, #184]	; (80079b0 <__swsetup_r+0xd0>)
 80078f8:	429c      	cmp	r4, r3
 80078fa:	d10f      	bne.n	800791c <__swsetup_r+0x3c>
 80078fc:	686c      	ldr	r4, [r5, #4]
 80078fe:	89a3      	ldrh	r3, [r4, #12]
 8007900:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007904:	0719      	lsls	r1, r3, #28
 8007906:	d42c      	bmi.n	8007962 <__swsetup_r+0x82>
 8007908:	06dd      	lsls	r5, r3, #27
 800790a:	d411      	bmi.n	8007930 <__swsetup_r+0x50>
 800790c:	2309      	movs	r3, #9
 800790e:	6033      	str	r3, [r6, #0]
 8007910:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8007914:	f04f 30ff 	mov.w	r0, #4294967295
 8007918:	81a3      	strh	r3, [r4, #12]
 800791a:	e03e      	b.n	800799a <__swsetup_r+0xba>
 800791c:	4b25      	ldr	r3, [pc, #148]	; (80079b4 <__swsetup_r+0xd4>)
 800791e:	429c      	cmp	r4, r3
 8007920:	d101      	bne.n	8007926 <__swsetup_r+0x46>
 8007922:	68ac      	ldr	r4, [r5, #8]
 8007924:	e7eb      	b.n	80078fe <__swsetup_r+0x1e>
 8007926:	4b24      	ldr	r3, [pc, #144]	; (80079b8 <__swsetup_r+0xd8>)
 8007928:	429c      	cmp	r4, r3
 800792a:	bf08      	it	eq
 800792c:	68ec      	ldreq	r4, [r5, #12]
 800792e:	e7e6      	b.n	80078fe <__swsetup_r+0x1e>
 8007930:	0758      	lsls	r0, r3, #29
 8007932:	d512      	bpl.n	800795a <__swsetup_r+0x7a>
 8007934:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007936:	b141      	cbz	r1, 800794a <__swsetup_r+0x6a>
 8007938:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800793c:	4299      	cmp	r1, r3
 800793e:	d002      	beq.n	8007946 <__swsetup_r+0x66>
 8007940:	4630      	mov	r0, r6
 8007942:	f7ff fdd3 	bl	80074ec <_free_r>
 8007946:	2300      	movs	r3, #0
 8007948:	6363      	str	r3, [r4, #52]	; 0x34
 800794a:	89a3      	ldrh	r3, [r4, #12]
 800794c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8007950:	81a3      	strh	r3, [r4, #12]
 8007952:	2300      	movs	r3, #0
 8007954:	6063      	str	r3, [r4, #4]
 8007956:	6923      	ldr	r3, [r4, #16]
 8007958:	6023      	str	r3, [r4, #0]
 800795a:	89a3      	ldrh	r3, [r4, #12]
 800795c:	f043 0308 	orr.w	r3, r3, #8
 8007960:	81a3      	strh	r3, [r4, #12]
 8007962:	6923      	ldr	r3, [r4, #16]
 8007964:	b94b      	cbnz	r3, 800797a <__swsetup_r+0x9a>
 8007966:	89a3      	ldrh	r3, [r4, #12]
 8007968:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800796c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007970:	d003      	beq.n	800797a <__swsetup_r+0x9a>
 8007972:	4621      	mov	r1, r4
 8007974:	4630      	mov	r0, r6
 8007976:	f000 fa05 	bl	8007d84 <__smakebuf_r>
 800797a:	89a0      	ldrh	r0, [r4, #12]
 800797c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007980:	f010 0301 	ands.w	r3, r0, #1
 8007984:	d00a      	beq.n	800799c <__swsetup_r+0xbc>
 8007986:	2300      	movs	r3, #0
 8007988:	60a3      	str	r3, [r4, #8]
 800798a:	6963      	ldr	r3, [r4, #20]
 800798c:	425b      	negs	r3, r3
 800798e:	61a3      	str	r3, [r4, #24]
 8007990:	6923      	ldr	r3, [r4, #16]
 8007992:	b943      	cbnz	r3, 80079a6 <__swsetup_r+0xc6>
 8007994:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8007998:	d1ba      	bne.n	8007910 <__swsetup_r+0x30>
 800799a:	bd70      	pop	{r4, r5, r6, pc}
 800799c:	0781      	lsls	r1, r0, #30
 800799e:	bf58      	it	pl
 80079a0:	6963      	ldrpl	r3, [r4, #20]
 80079a2:	60a3      	str	r3, [r4, #8]
 80079a4:	e7f4      	b.n	8007990 <__swsetup_r+0xb0>
 80079a6:	2000      	movs	r0, #0
 80079a8:	e7f7      	b.n	800799a <__swsetup_r+0xba>
 80079aa:	bf00      	nop
 80079ac:	2000002c 	.word	0x2000002c
 80079b0:	080090f8 	.word	0x080090f8
 80079b4:	08009118 	.word	0x08009118
 80079b8:	080090d8 	.word	0x080090d8

080079bc <abort>:
 80079bc:	2006      	movs	r0, #6
 80079be:	b508      	push	{r3, lr}
 80079c0:	f000 fa48 	bl	8007e54 <raise>
 80079c4:	2001      	movs	r0, #1
 80079c6:	f7fb fb60 	bl	800308a <_exit>
	...

080079cc <__sflush_r>:
 80079cc:	898a      	ldrh	r2, [r1, #12]
 80079ce:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80079d0:	4605      	mov	r5, r0
 80079d2:	0710      	lsls	r0, r2, #28
 80079d4:	460c      	mov	r4, r1
 80079d6:	d457      	bmi.n	8007a88 <__sflush_r+0xbc>
 80079d8:	684b      	ldr	r3, [r1, #4]
 80079da:	2b00      	cmp	r3, #0
 80079dc:	dc04      	bgt.n	80079e8 <__sflush_r+0x1c>
 80079de:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80079e0:	2b00      	cmp	r3, #0
 80079e2:	dc01      	bgt.n	80079e8 <__sflush_r+0x1c>
 80079e4:	2000      	movs	r0, #0
 80079e6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80079e8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80079ea:	2e00      	cmp	r6, #0
 80079ec:	d0fa      	beq.n	80079e4 <__sflush_r+0x18>
 80079ee:	2300      	movs	r3, #0
 80079f0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80079f4:	682f      	ldr	r7, [r5, #0]
 80079f6:	602b      	str	r3, [r5, #0]
 80079f8:	d032      	beq.n	8007a60 <__sflush_r+0x94>
 80079fa:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80079fc:	89a3      	ldrh	r3, [r4, #12]
 80079fe:	075a      	lsls	r2, r3, #29
 8007a00:	d505      	bpl.n	8007a0e <__sflush_r+0x42>
 8007a02:	6863      	ldr	r3, [r4, #4]
 8007a04:	1ac0      	subs	r0, r0, r3
 8007a06:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8007a08:	b10b      	cbz	r3, 8007a0e <__sflush_r+0x42>
 8007a0a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8007a0c:	1ac0      	subs	r0, r0, r3
 8007a0e:	2300      	movs	r3, #0
 8007a10:	4602      	mov	r2, r0
 8007a12:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007a14:	4628      	mov	r0, r5
 8007a16:	6a21      	ldr	r1, [r4, #32]
 8007a18:	47b0      	blx	r6
 8007a1a:	1c43      	adds	r3, r0, #1
 8007a1c:	89a3      	ldrh	r3, [r4, #12]
 8007a1e:	d106      	bne.n	8007a2e <__sflush_r+0x62>
 8007a20:	6829      	ldr	r1, [r5, #0]
 8007a22:	291d      	cmp	r1, #29
 8007a24:	d82c      	bhi.n	8007a80 <__sflush_r+0xb4>
 8007a26:	4a29      	ldr	r2, [pc, #164]	; (8007acc <__sflush_r+0x100>)
 8007a28:	40ca      	lsrs	r2, r1
 8007a2a:	07d6      	lsls	r6, r2, #31
 8007a2c:	d528      	bpl.n	8007a80 <__sflush_r+0xb4>
 8007a2e:	2200      	movs	r2, #0
 8007a30:	6062      	str	r2, [r4, #4]
 8007a32:	6922      	ldr	r2, [r4, #16]
 8007a34:	04d9      	lsls	r1, r3, #19
 8007a36:	6022      	str	r2, [r4, #0]
 8007a38:	d504      	bpl.n	8007a44 <__sflush_r+0x78>
 8007a3a:	1c42      	adds	r2, r0, #1
 8007a3c:	d101      	bne.n	8007a42 <__sflush_r+0x76>
 8007a3e:	682b      	ldr	r3, [r5, #0]
 8007a40:	b903      	cbnz	r3, 8007a44 <__sflush_r+0x78>
 8007a42:	6560      	str	r0, [r4, #84]	; 0x54
 8007a44:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007a46:	602f      	str	r7, [r5, #0]
 8007a48:	2900      	cmp	r1, #0
 8007a4a:	d0cb      	beq.n	80079e4 <__sflush_r+0x18>
 8007a4c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007a50:	4299      	cmp	r1, r3
 8007a52:	d002      	beq.n	8007a5a <__sflush_r+0x8e>
 8007a54:	4628      	mov	r0, r5
 8007a56:	f7ff fd49 	bl	80074ec <_free_r>
 8007a5a:	2000      	movs	r0, #0
 8007a5c:	6360      	str	r0, [r4, #52]	; 0x34
 8007a5e:	e7c2      	b.n	80079e6 <__sflush_r+0x1a>
 8007a60:	6a21      	ldr	r1, [r4, #32]
 8007a62:	2301      	movs	r3, #1
 8007a64:	4628      	mov	r0, r5
 8007a66:	47b0      	blx	r6
 8007a68:	1c41      	adds	r1, r0, #1
 8007a6a:	d1c7      	bne.n	80079fc <__sflush_r+0x30>
 8007a6c:	682b      	ldr	r3, [r5, #0]
 8007a6e:	2b00      	cmp	r3, #0
 8007a70:	d0c4      	beq.n	80079fc <__sflush_r+0x30>
 8007a72:	2b1d      	cmp	r3, #29
 8007a74:	d001      	beq.n	8007a7a <__sflush_r+0xae>
 8007a76:	2b16      	cmp	r3, #22
 8007a78:	d101      	bne.n	8007a7e <__sflush_r+0xb2>
 8007a7a:	602f      	str	r7, [r5, #0]
 8007a7c:	e7b2      	b.n	80079e4 <__sflush_r+0x18>
 8007a7e:	89a3      	ldrh	r3, [r4, #12]
 8007a80:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007a84:	81a3      	strh	r3, [r4, #12]
 8007a86:	e7ae      	b.n	80079e6 <__sflush_r+0x1a>
 8007a88:	690f      	ldr	r7, [r1, #16]
 8007a8a:	2f00      	cmp	r7, #0
 8007a8c:	d0aa      	beq.n	80079e4 <__sflush_r+0x18>
 8007a8e:	0793      	lsls	r3, r2, #30
 8007a90:	bf18      	it	ne
 8007a92:	2300      	movne	r3, #0
 8007a94:	680e      	ldr	r6, [r1, #0]
 8007a96:	bf08      	it	eq
 8007a98:	694b      	ldreq	r3, [r1, #20]
 8007a9a:	1bf6      	subs	r6, r6, r7
 8007a9c:	600f      	str	r7, [r1, #0]
 8007a9e:	608b      	str	r3, [r1, #8]
 8007aa0:	2e00      	cmp	r6, #0
 8007aa2:	dd9f      	ble.n	80079e4 <__sflush_r+0x18>
 8007aa4:	4633      	mov	r3, r6
 8007aa6:	463a      	mov	r2, r7
 8007aa8:	4628      	mov	r0, r5
 8007aaa:	6a21      	ldr	r1, [r4, #32]
 8007aac:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 8007ab0:	47e0      	blx	ip
 8007ab2:	2800      	cmp	r0, #0
 8007ab4:	dc06      	bgt.n	8007ac4 <__sflush_r+0xf8>
 8007ab6:	89a3      	ldrh	r3, [r4, #12]
 8007ab8:	f04f 30ff 	mov.w	r0, #4294967295
 8007abc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007ac0:	81a3      	strh	r3, [r4, #12]
 8007ac2:	e790      	b.n	80079e6 <__sflush_r+0x1a>
 8007ac4:	4407      	add	r7, r0
 8007ac6:	1a36      	subs	r6, r6, r0
 8007ac8:	e7ea      	b.n	8007aa0 <__sflush_r+0xd4>
 8007aca:	bf00      	nop
 8007acc:	20400001 	.word	0x20400001

08007ad0 <_fflush_r>:
 8007ad0:	b538      	push	{r3, r4, r5, lr}
 8007ad2:	690b      	ldr	r3, [r1, #16]
 8007ad4:	4605      	mov	r5, r0
 8007ad6:	460c      	mov	r4, r1
 8007ad8:	b913      	cbnz	r3, 8007ae0 <_fflush_r+0x10>
 8007ada:	2500      	movs	r5, #0
 8007adc:	4628      	mov	r0, r5
 8007ade:	bd38      	pop	{r3, r4, r5, pc}
 8007ae0:	b118      	cbz	r0, 8007aea <_fflush_r+0x1a>
 8007ae2:	6983      	ldr	r3, [r0, #24]
 8007ae4:	b90b      	cbnz	r3, 8007aea <_fflush_r+0x1a>
 8007ae6:	f000 f887 	bl	8007bf8 <__sinit>
 8007aea:	4b14      	ldr	r3, [pc, #80]	; (8007b3c <_fflush_r+0x6c>)
 8007aec:	429c      	cmp	r4, r3
 8007aee:	d11b      	bne.n	8007b28 <_fflush_r+0x58>
 8007af0:	686c      	ldr	r4, [r5, #4]
 8007af2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007af6:	2b00      	cmp	r3, #0
 8007af8:	d0ef      	beq.n	8007ada <_fflush_r+0xa>
 8007afa:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8007afc:	07d0      	lsls	r0, r2, #31
 8007afe:	d404      	bmi.n	8007b0a <_fflush_r+0x3a>
 8007b00:	0599      	lsls	r1, r3, #22
 8007b02:	d402      	bmi.n	8007b0a <_fflush_r+0x3a>
 8007b04:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007b06:	f000 f915 	bl	8007d34 <__retarget_lock_acquire_recursive>
 8007b0a:	4628      	mov	r0, r5
 8007b0c:	4621      	mov	r1, r4
 8007b0e:	f7ff ff5d 	bl	80079cc <__sflush_r>
 8007b12:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007b14:	4605      	mov	r5, r0
 8007b16:	07da      	lsls	r2, r3, #31
 8007b18:	d4e0      	bmi.n	8007adc <_fflush_r+0xc>
 8007b1a:	89a3      	ldrh	r3, [r4, #12]
 8007b1c:	059b      	lsls	r3, r3, #22
 8007b1e:	d4dd      	bmi.n	8007adc <_fflush_r+0xc>
 8007b20:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007b22:	f000 f908 	bl	8007d36 <__retarget_lock_release_recursive>
 8007b26:	e7d9      	b.n	8007adc <_fflush_r+0xc>
 8007b28:	4b05      	ldr	r3, [pc, #20]	; (8007b40 <_fflush_r+0x70>)
 8007b2a:	429c      	cmp	r4, r3
 8007b2c:	d101      	bne.n	8007b32 <_fflush_r+0x62>
 8007b2e:	68ac      	ldr	r4, [r5, #8]
 8007b30:	e7df      	b.n	8007af2 <_fflush_r+0x22>
 8007b32:	4b04      	ldr	r3, [pc, #16]	; (8007b44 <_fflush_r+0x74>)
 8007b34:	429c      	cmp	r4, r3
 8007b36:	bf08      	it	eq
 8007b38:	68ec      	ldreq	r4, [r5, #12]
 8007b3a:	e7da      	b.n	8007af2 <_fflush_r+0x22>
 8007b3c:	080090f8 	.word	0x080090f8
 8007b40:	08009118 	.word	0x08009118
 8007b44:	080090d8 	.word	0x080090d8

08007b48 <std>:
 8007b48:	2300      	movs	r3, #0
 8007b4a:	b510      	push	{r4, lr}
 8007b4c:	4604      	mov	r4, r0
 8007b4e:	e9c0 3300 	strd	r3, r3, [r0]
 8007b52:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8007b56:	6083      	str	r3, [r0, #8]
 8007b58:	8181      	strh	r1, [r0, #12]
 8007b5a:	6643      	str	r3, [r0, #100]	; 0x64
 8007b5c:	81c2      	strh	r2, [r0, #14]
 8007b5e:	6183      	str	r3, [r0, #24]
 8007b60:	4619      	mov	r1, r3
 8007b62:	2208      	movs	r2, #8
 8007b64:	305c      	adds	r0, #92	; 0x5c
 8007b66:	f7fd fced 	bl	8005544 <memset>
 8007b6a:	4b05      	ldr	r3, [pc, #20]	; (8007b80 <std+0x38>)
 8007b6c:	6224      	str	r4, [r4, #32]
 8007b6e:	6263      	str	r3, [r4, #36]	; 0x24
 8007b70:	4b04      	ldr	r3, [pc, #16]	; (8007b84 <std+0x3c>)
 8007b72:	62a3      	str	r3, [r4, #40]	; 0x28
 8007b74:	4b04      	ldr	r3, [pc, #16]	; (8007b88 <std+0x40>)
 8007b76:	62e3      	str	r3, [r4, #44]	; 0x2c
 8007b78:	4b04      	ldr	r3, [pc, #16]	; (8007b8c <std+0x44>)
 8007b7a:	6323      	str	r3, [r4, #48]	; 0x30
 8007b7c:	bd10      	pop	{r4, pc}
 8007b7e:	bf00      	nop
 8007b80:	08007e8d 	.word	0x08007e8d
 8007b84:	08007eaf 	.word	0x08007eaf
 8007b88:	08007ee7 	.word	0x08007ee7
 8007b8c:	08007f0b 	.word	0x08007f0b

08007b90 <_cleanup_r>:
 8007b90:	4901      	ldr	r1, [pc, #4]	; (8007b98 <_cleanup_r+0x8>)
 8007b92:	f000 b8af 	b.w	8007cf4 <_fwalk_reent>
 8007b96:	bf00      	nop
 8007b98:	08007ad1 	.word	0x08007ad1

08007b9c <__sfmoreglue>:
 8007b9c:	2268      	movs	r2, #104	; 0x68
 8007b9e:	b570      	push	{r4, r5, r6, lr}
 8007ba0:	1e4d      	subs	r5, r1, #1
 8007ba2:	4355      	muls	r5, r2
 8007ba4:	460e      	mov	r6, r1
 8007ba6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8007baa:	f7fe f9ff 	bl	8005fac <_malloc_r>
 8007bae:	4604      	mov	r4, r0
 8007bb0:	b140      	cbz	r0, 8007bc4 <__sfmoreglue+0x28>
 8007bb2:	2100      	movs	r1, #0
 8007bb4:	e9c0 1600 	strd	r1, r6, [r0]
 8007bb8:	300c      	adds	r0, #12
 8007bba:	60a0      	str	r0, [r4, #8]
 8007bbc:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8007bc0:	f7fd fcc0 	bl	8005544 <memset>
 8007bc4:	4620      	mov	r0, r4
 8007bc6:	bd70      	pop	{r4, r5, r6, pc}

08007bc8 <__sfp_lock_acquire>:
 8007bc8:	4801      	ldr	r0, [pc, #4]	; (8007bd0 <__sfp_lock_acquire+0x8>)
 8007bca:	f000 b8b3 	b.w	8007d34 <__retarget_lock_acquire_recursive>
 8007bce:	bf00      	nop
 8007bd0:	20000225 	.word	0x20000225

08007bd4 <__sfp_lock_release>:
 8007bd4:	4801      	ldr	r0, [pc, #4]	; (8007bdc <__sfp_lock_release+0x8>)
 8007bd6:	f000 b8ae 	b.w	8007d36 <__retarget_lock_release_recursive>
 8007bda:	bf00      	nop
 8007bdc:	20000225 	.word	0x20000225

08007be0 <__sinit_lock_acquire>:
 8007be0:	4801      	ldr	r0, [pc, #4]	; (8007be8 <__sinit_lock_acquire+0x8>)
 8007be2:	f000 b8a7 	b.w	8007d34 <__retarget_lock_acquire_recursive>
 8007be6:	bf00      	nop
 8007be8:	20000226 	.word	0x20000226

08007bec <__sinit_lock_release>:
 8007bec:	4801      	ldr	r0, [pc, #4]	; (8007bf4 <__sinit_lock_release+0x8>)
 8007bee:	f000 b8a2 	b.w	8007d36 <__retarget_lock_release_recursive>
 8007bf2:	bf00      	nop
 8007bf4:	20000226 	.word	0x20000226

08007bf8 <__sinit>:
 8007bf8:	b510      	push	{r4, lr}
 8007bfa:	4604      	mov	r4, r0
 8007bfc:	f7ff fff0 	bl	8007be0 <__sinit_lock_acquire>
 8007c00:	69a3      	ldr	r3, [r4, #24]
 8007c02:	b11b      	cbz	r3, 8007c0c <__sinit+0x14>
 8007c04:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007c08:	f7ff bff0 	b.w	8007bec <__sinit_lock_release>
 8007c0c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8007c10:	6523      	str	r3, [r4, #80]	; 0x50
 8007c12:	4b13      	ldr	r3, [pc, #76]	; (8007c60 <__sinit+0x68>)
 8007c14:	4a13      	ldr	r2, [pc, #76]	; (8007c64 <__sinit+0x6c>)
 8007c16:	681b      	ldr	r3, [r3, #0]
 8007c18:	62a2      	str	r2, [r4, #40]	; 0x28
 8007c1a:	42a3      	cmp	r3, r4
 8007c1c:	bf08      	it	eq
 8007c1e:	2301      	moveq	r3, #1
 8007c20:	4620      	mov	r0, r4
 8007c22:	bf08      	it	eq
 8007c24:	61a3      	streq	r3, [r4, #24]
 8007c26:	f000 f81f 	bl	8007c68 <__sfp>
 8007c2a:	6060      	str	r0, [r4, #4]
 8007c2c:	4620      	mov	r0, r4
 8007c2e:	f000 f81b 	bl	8007c68 <__sfp>
 8007c32:	60a0      	str	r0, [r4, #8]
 8007c34:	4620      	mov	r0, r4
 8007c36:	f000 f817 	bl	8007c68 <__sfp>
 8007c3a:	2200      	movs	r2, #0
 8007c3c:	2104      	movs	r1, #4
 8007c3e:	60e0      	str	r0, [r4, #12]
 8007c40:	6860      	ldr	r0, [r4, #4]
 8007c42:	f7ff ff81 	bl	8007b48 <std>
 8007c46:	2201      	movs	r2, #1
 8007c48:	2109      	movs	r1, #9
 8007c4a:	68a0      	ldr	r0, [r4, #8]
 8007c4c:	f7ff ff7c 	bl	8007b48 <std>
 8007c50:	2202      	movs	r2, #2
 8007c52:	2112      	movs	r1, #18
 8007c54:	68e0      	ldr	r0, [r4, #12]
 8007c56:	f7ff ff77 	bl	8007b48 <std>
 8007c5a:	2301      	movs	r3, #1
 8007c5c:	61a3      	str	r3, [r4, #24]
 8007c5e:	e7d1      	b.n	8007c04 <__sinit+0xc>
 8007c60:	08008e78 	.word	0x08008e78
 8007c64:	08007b91 	.word	0x08007b91

08007c68 <__sfp>:
 8007c68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007c6a:	4607      	mov	r7, r0
 8007c6c:	f7ff ffac 	bl	8007bc8 <__sfp_lock_acquire>
 8007c70:	4b1e      	ldr	r3, [pc, #120]	; (8007cec <__sfp+0x84>)
 8007c72:	681e      	ldr	r6, [r3, #0]
 8007c74:	69b3      	ldr	r3, [r6, #24]
 8007c76:	b913      	cbnz	r3, 8007c7e <__sfp+0x16>
 8007c78:	4630      	mov	r0, r6
 8007c7a:	f7ff ffbd 	bl	8007bf8 <__sinit>
 8007c7e:	3648      	adds	r6, #72	; 0x48
 8007c80:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8007c84:	3b01      	subs	r3, #1
 8007c86:	d503      	bpl.n	8007c90 <__sfp+0x28>
 8007c88:	6833      	ldr	r3, [r6, #0]
 8007c8a:	b30b      	cbz	r3, 8007cd0 <__sfp+0x68>
 8007c8c:	6836      	ldr	r6, [r6, #0]
 8007c8e:	e7f7      	b.n	8007c80 <__sfp+0x18>
 8007c90:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8007c94:	b9d5      	cbnz	r5, 8007ccc <__sfp+0x64>
 8007c96:	4b16      	ldr	r3, [pc, #88]	; (8007cf0 <__sfp+0x88>)
 8007c98:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8007c9c:	60e3      	str	r3, [r4, #12]
 8007c9e:	6665      	str	r5, [r4, #100]	; 0x64
 8007ca0:	f000 f847 	bl	8007d32 <__retarget_lock_init_recursive>
 8007ca4:	f7ff ff96 	bl	8007bd4 <__sfp_lock_release>
 8007ca8:	2208      	movs	r2, #8
 8007caa:	4629      	mov	r1, r5
 8007cac:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8007cb0:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8007cb4:	6025      	str	r5, [r4, #0]
 8007cb6:	61a5      	str	r5, [r4, #24]
 8007cb8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8007cbc:	f7fd fc42 	bl	8005544 <memset>
 8007cc0:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8007cc4:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8007cc8:	4620      	mov	r0, r4
 8007cca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007ccc:	3468      	adds	r4, #104	; 0x68
 8007cce:	e7d9      	b.n	8007c84 <__sfp+0x1c>
 8007cd0:	2104      	movs	r1, #4
 8007cd2:	4638      	mov	r0, r7
 8007cd4:	f7ff ff62 	bl	8007b9c <__sfmoreglue>
 8007cd8:	4604      	mov	r4, r0
 8007cda:	6030      	str	r0, [r6, #0]
 8007cdc:	2800      	cmp	r0, #0
 8007cde:	d1d5      	bne.n	8007c8c <__sfp+0x24>
 8007ce0:	f7ff ff78 	bl	8007bd4 <__sfp_lock_release>
 8007ce4:	230c      	movs	r3, #12
 8007ce6:	603b      	str	r3, [r7, #0]
 8007ce8:	e7ee      	b.n	8007cc8 <__sfp+0x60>
 8007cea:	bf00      	nop
 8007cec:	08008e78 	.word	0x08008e78
 8007cf0:	ffff0001 	.word	0xffff0001

08007cf4 <_fwalk_reent>:
 8007cf4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007cf8:	4606      	mov	r6, r0
 8007cfa:	4688      	mov	r8, r1
 8007cfc:	2700      	movs	r7, #0
 8007cfe:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8007d02:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8007d06:	f1b9 0901 	subs.w	r9, r9, #1
 8007d0a:	d505      	bpl.n	8007d18 <_fwalk_reent+0x24>
 8007d0c:	6824      	ldr	r4, [r4, #0]
 8007d0e:	2c00      	cmp	r4, #0
 8007d10:	d1f7      	bne.n	8007d02 <_fwalk_reent+0xe>
 8007d12:	4638      	mov	r0, r7
 8007d14:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007d18:	89ab      	ldrh	r3, [r5, #12]
 8007d1a:	2b01      	cmp	r3, #1
 8007d1c:	d907      	bls.n	8007d2e <_fwalk_reent+0x3a>
 8007d1e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007d22:	3301      	adds	r3, #1
 8007d24:	d003      	beq.n	8007d2e <_fwalk_reent+0x3a>
 8007d26:	4629      	mov	r1, r5
 8007d28:	4630      	mov	r0, r6
 8007d2a:	47c0      	blx	r8
 8007d2c:	4307      	orrs	r7, r0
 8007d2e:	3568      	adds	r5, #104	; 0x68
 8007d30:	e7e9      	b.n	8007d06 <_fwalk_reent+0x12>

08007d32 <__retarget_lock_init_recursive>:
 8007d32:	4770      	bx	lr

08007d34 <__retarget_lock_acquire_recursive>:
 8007d34:	4770      	bx	lr

08007d36 <__retarget_lock_release_recursive>:
 8007d36:	4770      	bx	lr

08007d38 <__swhatbuf_r>:
 8007d38:	b570      	push	{r4, r5, r6, lr}
 8007d3a:	460e      	mov	r6, r1
 8007d3c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007d40:	4614      	mov	r4, r2
 8007d42:	2900      	cmp	r1, #0
 8007d44:	461d      	mov	r5, r3
 8007d46:	b096      	sub	sp, #88	; 0x58
 8007d48:	da08      	bge.n	8007d5c <__swhatbuf_r+0x24>
 8007d4a:	2200      	movs	r2, #0
 8007d4c:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8007d50:	602a      	str	r2, [r5, #0]
 8007d52:	061a      	lsls	r2, r3, #24
 8007d54:	d410      	bmi.n	8007d78 <__swhatbuf_r+0x40>
 8007d56:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007d5a:	e00e      	b.n	8007d7a <__swhatbuf_r+0x42>
 8007d5c:	466a      	mov	r2, sp
 8007d5e:	f000 f8fb 	bl	8007f58 <_fstat_r>
 8007d62:	2800      	cmp	r0, #0
 8007d64:	dbf1      	blt.n	8007d4a <__swhatbuf_r+0x12>
 8007d66:	9a01      	ldr	r2, [sp, #4]
 8007d68:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8007d6c:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8007d70:	425a      	negs	r2, r3
 8007d72:	415a      	adcs	r2, r3
 8007d74:	602a      	str	r2, [r5, #0]
 8007d76:	e7ee      	b.n	8007d56 <__swhatbuf_r+0x1e>
 8007d78:	2340      	movs	r3, #64	; 0x40
 8007d7a:	2000      	movs	r0, #0
 8007d7c:	6023      	str	r3, [r4, #0]
 8007d7e:	b016      	add	sp, #88	; 0x58
 8007d80:	bd70      	pop	{r4, r5, r6, pc}
	...

08007d84 <__smakebuf_r>:
 8007d84:	898b      	ldrh	r3, [r1, #12]
 8007d86:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8007d88:	079d      	lsls	r5, r3, #30
 8007d8a:	4606      	mov	r6, r0
 8007d8c:	460c      	mov	r4, r1
 8007d8e:	d507      	bpl.n	8007da0 <__smakebuf_r+0x1c>
 8007d90:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8007d94:	6023      	str	r3, [r4, #0]
 8007d96:	6123      	str	r3, [r4, #16]
 8007d98:	2301      	movs	r3, #1
 8007d9a:	6163      	str	r3, [r4, #20]
 8007d9c:	b002      	add	sp, #8
 8007d9e:	bd70      	pop	{r4, r5, r6, pc}
 8007da0:	466a      	mov	r2, sp
 8007da2:	ab01      	add	r3, sp, #4
 8007da4:	f7ff ffc8 	bl	8007d38 <__swhatbuf_r>
 8007da8:	9900      	ldr	r1, [sp, #0]
 8007daa:	4605      	mov	r5, r0
 8007dac:	4630      	mov	r0, r6
 8007dae:	f7fe f8fd 	bl	8005fac <_malloc_r>
 8007db2:	b948      	cbnz	r0, 8007dc8 <__smakebuf_r+0x44>
 8007db4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007db8:	059a      	lsls	r2, r3, #22
 8007dba:	d4ef      	bmi.n	8007d9c <__smakebuf_r+0x18>
 8007dbc:	f023 0303 	bic.w	r3, r3, #3
 8007dc0:	f043 0302 	orr.w	r3, r3, #2
 8007dc4:	81a3      	strh	r3, [r4, #12]
 8007dc6:	e7e3      	b.n	8007d90 <__smakebuf_r+0xc>
 8007dc8:	4b0d      	ldr	r3, [pc, #52]	; (8007e00 <__smakebuf_r+0x7c>)
 8007dca:	62b3      	str	r3, [r6, #40]	; 0x28
 8007dcc:	89a3      	ldrh	r3, [r4, #12]
 8007dce:	6020      	str	r0, [r4, #0]
 8007dd0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007dd4:	81a3      	strh	r3, [r4, #12]
 8007dd6:	9b00      	ldr	r3, [sp, #0]
 8007dd8:	6120      	str	r0, [r4, #16]
 8007dda:	6163      	str	r3, [r4, #20]
 8007ddc:	9b01      	ldr	r3, [sp, #4]
 8007dde:	b15b      	cbz	r3, 8007df8 <__smakebuf_r+0x74>
 8007de0:	4630      	mov	r0, r6
 8007de2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007de6:	f000 f8c9 	bl	8007f7c <_isatty_r>
 8007dea:	b128      	cbz	r0, 8007df8 <__smakebuf_r+0x74>
 8007dec:	89a3      	ldrh	r3, [r4, #12]
 8007dee:	f023 0303 	bic.w	r3, r3, #3
 8007df2:	f043 0301 	orr.w	r3, r3, #1
 8007df6:	81a3      	strh	r3, [r4, #12]
 8007df8:	89a0      	ldrh	r0, [r4, #12]
 8007dfa:	4305      	orrs	r5, r0
 8007dfc:	81a5      	strh	r5, [r4, #12]
 8007dfe:	e7cd      	b.n	8007d9c <__smakebuf_r+0x18>
 8007e00:	08007b91 	.word	0x08007b91

08007e04 <_raise_r>:
 8007e04:	291f      	cmp	r1, #31
 8007e06:	b538      	push	{r3, r4, r5, lr}
 8007e08:	4604      	mov	r4, r0
 8007e0a:	460d      	mov	r5, r1
 8007e0c:	d904      	bls.n	8007e18 <_raise_r+0x14>
 8007e0e:	2316      	movs	r3, #22
 8007e10:	6003      	str	r3, [r0, #0]
 8007e12:	f04f 30ff 	mov.w	r0, #4294967295
 8007e16:	bd38      	pop	{r3, r4, r5, pc}
 8007e18:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8007e1a:	b112      	cbz	r2, 8007e22 <_raise_r+0x1e>
 8007e1c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8007e20:	b94b      	cbnz	r3, 8007e36 <_raise_r+0x32>
 8007e22:	4620      	mov	r0, r4
 8007e24:	f000 f830 	bl	8007e88 <_getpid_r>
 8007e28:	462a      	mov	r2, r5
 8007e2a:	4601      	mov	r1, r0
 8007e2c:	4620      	mov	r0, r4
 8007e2e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007e32:	f000 b817 	b.w	8007e64 <_kill_r>
 8007e36:	2b01      	cmp	r3, #1
 8007e38:	d00a      	beq.n	8007e50 <_raise_r+0x4c>
 8007e3a:	1c59      	adds	r1, r3, #1
 8007e3c:	d103      	bne.n	8007e46 <_raise_r+0x42>
 8007e3e:	2316      	movs	r3, #22
 8007e40:	6003      	str	r3, [r0, #0]
 8007e42:	2001      	movs	r0, #1
 8007e44:	e7e7      	b.n	8007e16 <_raise_r+0x12>
 8007e46:	2400      	movs	r4, #0
 8007e48:	4628      	mov	r0, r5
 8007e4a:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8007e4e:	4798      	blx	r3
 8007e50:	2000      	movs	r0, #0
 8007e52:	e7e0      	b.n	8007e16 <_raise_r+0x12>

08007e54 <raise>:
 8007e54:	4b02      	ldr	r3, [pc, #8]	; (8007e60 <raise+0xc>)
 8007e56:	4601      	mov	r1, r0
 8007e58:	6818      	ldr	r0, [r3, #0]
 8007e5a:	f7ff bfd3 	b.w	8007e04 <_raise_r>
 8007e5e:	bf00      	nop
 8007e60:	2000002c 	.word	0x2000002c

08007e64 <_kill_r>:
 8007e64:	b538      	push	{r3, r4, r5, lr}
 8007e66:	2300      	movs	r3, #0
 8007e68:	4d06      	ldr	r5, [pc, #24]	; (8007e84 <_kill_r+0x20>)
 8007e6a:	4604      	mov	r4, r0
 8007e6c:	4608      	mov	r0, r1
 8007e6e:	4611      	mov	r1, r2
 8007e70:	602b      	str	r3, [r5, #0]
 8007e72:	f7fb f8fa 	bl	800306a <_kill>
 8007e76:	1c43      	adds	r3, r0, #1
 8007e78:	d102      	bne.n	8007e80 <_kill_r+0x1c>
 8007e7a:	682b      	ldr	r3, [r5, #0]
 8007e7c:	b103      	cbz	r3, 8007e80 <_kill_r+0x1c>
 8007e7e:	6023      	str	r3, [r4, #0]
 8007e80:	bd38      	pop	{r3, r4, r5, pc}
 8007e82:	bf00      	nop
 8007e84:	20000220 	.word	0x20000220

08007e88 <_getpid_r>:
 8007e88:	f7fb b8e8 	b.w	800305c <_getpid>

08007e8c <__sread>:
 8007e8c:	b510      	push	{r4, lr}
 8007e8e:	460c      	mov	r4, r1
 8007e90:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007e94:	f000 f894 	bl	8007fc0 <_read_r>
 8007e98:	2800      	cmp	r0, #0
 8007e9a:	bfab      	itete	ge
 8007e9c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8007e9e:	89a3      	ldrhlt	r3, [r4, #12]
 8007ea0:	181b      	addge	r3, r3, r0
 8007ea2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8007ea6:	bfac      	ite	ge
 8007ea8:	6563      	strge	r3, [r4, #84]	; 0x54
 8007eaa:	81a3      	strhlt	r3, [r4, #12]
 8007eac:	bd10      	pop	{r4, pc}

08007eae <__swrite>:
 8007eae:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007eb2:	461f      	mov	r7, r3
 8007eb4:	898b      	ldrh	r3, [r1, #12]
 8007eb6:	4605      	mov	r5, r0
 8007eb8:	05db      	lsls	r3, r3, #23
 8007eba:	460c      	mov	r4, r1
 8007ebc:	4616      	mov	r6, r2
 8007ebe:	d505      	bpl.n	8007ecc <__swrite+0x1e>
 8007ec0:	2302      	movs	r3, #2
 8007ec2:	2200      	movs	r2, #0
 8007ec4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007ec8:	f000 f868 	bl	8007f9c <_lseek_r>
 8007ecc:	89a3      	ldrh	r3, [r4, #12]
 8007ece:	4632      	mov	r2, r6
 8007ed0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007ed4:	81a3      	strh	r3, [r4, #12]
 8007ed6:	4628      	mov	r0, r5
 8007ed8:	463b      	mov	r3, r7
 8007eda:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007ede:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007ee2:	f000 b817 	b.w	8007f14 <_write_r>

08007ee6 <__sseek>:
 8007ee6:	b510      	push	{r4, lr}
 8007ee8:	460c      	mov	r4, r1
 8007eea:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007eee:	f000 f855 	bl	8007f9c <_lseek_r>
 8007ef2:	1c43      	adds	r3, r0, #1
 8007ef4:	89a3      	ldrh	r3, [r4, #12]
 8007ef6:	bf15      	itete	ne
 8007ef8:	6560      	strne	r0, [r4, #84]	; 0x54
 8007efa:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8007efe:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8007f02:	81a3      	strheq	r3, [r4, #12]
 8007f04:	bf18      	it	ne
 8007f06:	81a3      	strhne	r3, [r4, #12]
 8007f08:	bd10      	pop	{r4, pc}

08007f0a <__sclose>:
 8007f0a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007f0e:	f000 b813 	b.w	8007f38 <_close_r>
	...

08007f14 <_write_r>:
 8007f14:	b538      	push	{r3, r4, r5, lr}
 8007f16:	4604      	mov	r4, r0
 8007f18:	4608      	mov	r0, r1
 8007f1a:	4611      	mov	r1, r2
 8007f1c:	2200      	movs	r2, #0
 8007f1e:	4d05      	ldr	r5, [pc, #20]	; (8007f34 <_write_r+0x20>)
 8007f20:	602a      	str	r2, [r5, #0]
 8007f22:	461a      	mov	r2, r3
 8007f24:	f7fb f8d8 	bl	80030d8 <_write>
 8007f28:	1c43      	adds	r3, r0, #1
 8007f2a:	d102      	bne.n	8007f32 <_write_r+0x1e>
 8007f2c:	682b      	ldr	r3, [r5, #0]
 8007f2e:	b103      	cbz	r3, 8007f32 <_write_r+0x1e>
 8007f30:	6023      	str	r3, [r4, #0]
 8007f32:	bd38      	pop	{r3, r4, r5, pc}
 8007f34:	20000220 	.word	0x20000220

08007f38 <_close_r>:
 8007f38:	b538      	push	{r3, r4, r5, lr}
 8007f3a:	2300      	movs	r3, #0
 8007f3c:	4d05      	ldr	r5, [pc, #20]	; (8007f54 <_close_r+0x1c>)
 8007f3e:	4604      	mov	r4, r0
 8007f40:	4608      	mov	r0, r1
 8007f42:	602b      	str	r3, [r5, #0]
 8007f44:	f7fb f8e4 	bl	8003110 <_close>
 8007f48:	1c43      	adds	r3, r0, #1
 8007f4a:	d102      	bne.n	8007f52 <_close_r+0x1a>
 8007f4c:	682b      	ldr	r3, [r5, #0]
 8007f4e:	b103      	cbz	r3, 8007f52 <_close_r+0x1a>
 8007f50:	6023      	str	r3, [r4, #0]
 8007f52:	bd38      	pop	{r3, r4, r5, pc}
 8007f54:	20000220 	.word	0x20000220

08007f58 <_fstat_r>:
 8007f58:	b538      	push	{r3, r4, r5, lr}
 8007f5a:	2300      	movs	r3, #0
 8007f5c:	4d06      	ldr	r5, [pc, #24]	; (8007f78 <_fstat_r+0x20>)
 8007f5e:	4604      	mov	r4, r0
 8007f60:	4608      	mov	r0, r1
 8007f62:	4611      	mov	r1, r2
 8007f64:	602b      	str	r3, [r5, #0]
 8007f66:	f7fb f8de 	bl	8003126 <_fstat>
 8007f6a:	1c43      	adds	r3, r0, #1
 8007f6c:	d102      	bne.n	8007f74 <_fstat_r+0x1c>
 8007f6e:	682b      	ldr	r3, [r5, #0]
 8007f70:	b103      	cbz	r3, 8007f74 <_fstat_r+0x1c>
 8007f72:	6023      	str	r3, [r4, #0]
 8007f74:	bd38      	pop	{r3, r4, r5, pc}
 8007f76:	bf00      	nop
 8007f78:	20000220 	.word	0x20000220

08007f7c <_isatty_r>:
 8007f7c:	b538      	push	{r3, r4, r5, lr}
 8007f7e:	2300      	movs	r3, #0
 8007f80:	4d05      	ldr	r5, [pc, #20]	; (8007f98 <_isatty_r+0x1c>)
 8007f82:	4604      	mov	r4, r0
 8007f84:	4608      	mov	r0, r1
 8007f86:	602b      	str	r3, [r5, #0]
 8007f88:	f7fb f8dc 	bl	8003144 <_isatty>
 8007f8c:	1c43      	adds	r3, r0, #1
 8007f8e:	d102      	bne.n	8007f96 <_isatty_r+0x1a>
 8007f90:	682b      	ldr	r3, [r5, #0]
 8007f92:	b103      	cbz	r3, 8007f96 <_isatty_r+0x1a>
 8007f94:	6023      	str	r3, [r4, #0]
 8007f96:	bd38      	pop	{r3, r4, r5, pc}
 8007f98:	20000220 	.word	0x20000220

08007f9c <_lseek_r>:
 8007f9c:	b538      	push	{r3, r4, r5, lr}
 8007f9e:	4604      	mov	r4, r0
 8007fa0:	4608      	mov	r0, r1
 8007fa2:	4611      	mov	r1, r2
 8007fa4:	2200      	movs	r2, #0
 8007fa6:	4d05      	ldr	r5, [pc, #20]	; (8007fbc <_lseek_r+0x20>)
 8007fa8:	602a      	str	r2, [r5, #0]
 8007faa:	461a      	mov	r2, r3
 8007fac:	f7fb f8d4 	bl	8003158 <_lseek>
 8007fb0:	1c43      	adds	r3, r0, #1
 8007fb2:	d102      	bne.n	8007fba <_lseek_r+0x1e>
 8007fb4:	682b      	ldr	r3, [r5, #0]
 8007fb6:	b103      	cbz	r3, 8007fba <_lseek_r+0x1e>
 8007fb8:	6023      	str	r3, [r4, #0]
 8007fba:	bd38      	pop	{r3, r4, r5, pc}
 8007fbc:	20000220 	.word	0x20000220

08007fc0 <_read_r>:
 8007fc0:	b538      	push	{r3, r4, r5, lr}
 8007fc2:	4604      	mov	r4, r0
 8007fc4:	4608      	mov	r0, r1
 8007fc6:	4611      	mov	r1, r2
 8007fc8:	2200      	movs	r2, #0
 8007fca:	4d05      	ldr	r5, [pc, #20]	; (8007fe0 <_read_r+0x20>)
 8007fcc:	602a      	str	r2, [r5, #0]
 8007fce:	461a      	mov	r2, r3
 8007fd0:	f7fb f865 	bl	800309e <_read>
 8007fd4:	1c43      	adds	r3, r0, #1
 8007fd6:	d102      	bne.n	8007fde <_read_r+0x1e>
 8007fd8:	682b      	ldr	r3, [r5, #0]
 8007fda:	b103      	cbz	r3, 8007fde <_read_r+0x1e>
 8007fdc:	6023      	str	r3, [r4, #0]
 8007fde:	bd38      	pop	{r3, r4, r5, pc}
 8007fe0:	20000220 	.word	0x20000220

08007fe4 <pow>:
 8007fe4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007fe8:	4614      	mov	r4, r2
 8007fea:	461d      	mov	r5, r3
 8007fec:	4680      	mov	r8, r0
 8007fee:	4689      	mov	r9, r1
 8007ff0:	f000 f862 	bl	80080b8 <__ieee754_pow>
 8007ff4:	4622      	mov	r2, r4
 8007ff6:	4606      	mov	r6, r0
 8007ff8:	460f      	mov	r7, r1
 8007ffa:	462b      	mov	r3, r5
 8007ffc:	4620      	mov	r0, r4
 8007ffe:	4629      	mov	r1, r5
 8008000:	f7f8 fcfc 	bl	80009fc <__aeabi_dcmpun>
 8008004:	bbc8      	cbnz	r0, 800807a <pow+0x96>
 8008006:	2200      	movs	r2, #0
 8008008:	2300      	movs	r3, #0
 800800a:	4640      	mov	r0, r8
 800800c:	4649      	mov	r1, r9
 800800e:	f7f8 fcc3 	bl	8000998 <__aeabi_dcmpeq>
 8008012:	b1b8      	cbz	r0, 8008044 <pow+0x60>
 8008014:	2200      	movs	r2, #0
 8008016:	2300      	movs	r3, #0
 8008018:	4620      	mov	r0, r4
 800801a:	4629      	mov	r1, r5
 800801c:	f7f8 fcbc 	bl	8000998 <__aeabi_dcmpeq>
 8008020:	2800      	cmp	r0, #0
 8008022:	d141      	bne.n	80080a8 <pow+0xc4>
 8008024:	4620      	mov	r0, r4
 8008026:	4629      	mov	r1, r5
 8008028:	f000 fe3b 	bl	8008ca2 <finite>
 800802c:	b328      	cbz	r0, 800807a <pow+0x96>
 800802e:	2200      	movs	r2, #0
 8008030:	2300      	movs	r3, #0
 8008032:	4620      	mov	r0, r4
 8008034:	4629      	mov	r1, r5
 8008036:	f7f8 fcb9 	bl	80009ac <__aeabi_dcmplt>
 800803a:	b1f0      	cbz	r0, 800807a <pow+0x96>
 800803c:	f7fd fa58 	bl	80054f0 <__errno>
 8008040:	2322      	movs	r3, #34	; 0x22
 8008042:	e019      	b.n	8008078 <pow+0x94>
 8008044:	4630      	mov	r0, r6
 8008046:	4639      	mov	r1, r7
 8008048:	f000 fe2b 	bl	8008ca2 <finite>
 800804c:	b9c8      	cbnz	r0, 8008082 <pow+0x9e>
 800804e:	4640      	mov	r0, r8
 8008050:	4649      	mov	r1, r9
 8008052:	f000 fe26 	bl	8008ca2 <finite>
 8008056:	b1a0      	cbz	r0, 8008082 <pow+0x9e>
 8008058:	4620      	mov	r0, r4
 800805a:	4629      	mov	r1, r5
 800805c:	f000 fe21 	bl	8008ca2 <finite>
 8008060:	b178      	cbz	r0, 8008082 <pow+0x9e>
 8008062:	4632      	mov	r2, r6
 8008064:	463b      	mov	r3, r7
 8008066:	4630      	mov	r0, r6
 8008068:	4639      	mov	r1, r7
 800806a:	f7f8 fcc7 	bl	80009fc <__aeabi_dcmpun>
 800806e:	2800      	cmp	r0, #0
 8008070:	d0e4      	beq.n	800803c <pow+0x58>
 8008072:	f7fd fa3d 	bl	80054f0 <__errno>
 8008076:	2321      	movs	r3, #33	; 0x21
 8008078:	6003      	str	r3, [r0, #0]
 800807a:	4630      	mov	r0, r6
 800807c:	4639      	mov	r1, r7
 800807e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008082:	2200      	movs	r2, #0
 8008084:	2300      	movs	r3, #0
 8008086:	4630      	mov	r0, r6
 8008088:	4639      	mov	r1, r7
 800808a:	f7f8 fc85 	bl	8000998 <__aeabi_dcmpeq>
 800808e:	2800      	cmp	r0, #0
 8008090:	d0f3      	beq.n	800807a <pow+0x96>
 8008092:	4640      	mov	r0, r8
 8008094:	4649      	mov	r1, r9
 8008096:	f000 fe04 	bl	8008ca2 <finite>
 800809a:	2800      	cmp	r0, #0
 800809c:	d0ed      	beq.n	800807a <pow+0x96>
 800809e:	4620      	mov	r0, r4
 80080a0:	4629      	mov	r1, r5
 80080a2:	f000 fdfe 	bl	8008ca2 <finite>
 80080a6:	e7c8      	b.n	800803a <pow+0x56>
 80080a8:	2600      	movs	r6, #0
 80080aa:	4f01      	ldr	r7, [pc, #4]	; (80080b0 <pow+0xcc>)
 80080ac:	e7e5      	b.n	800807a <pow+0x96>
 80080ae:	bf00      	nop
 80080b0:	3ff00000 	.word	0x3ff00000
 80080b4:	00000000 	.word	0x00000000

080080b8 <__ieee754_pow>:
 80080b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80080bc:	b093      	sub	sp, #76	; 0x4c
 80080be:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80080c2:	e9dd 2702 	ldrd	r2, r7, [sp, #8]
 80080c6:	f027 4600 	bic.w	r6, r7, #2147483648	; 0x80000000
 80080ca:	4689      	mov	r9, r1
 80080cc:	ea56 0102 	orrs.w	r1, r6, r2
 80080d0:	4680      	mov	r8, r0
 80080d2:	d111      	bne.n	80080f8 <__ieee754_pow+0x40>
 80080d4:	1803      	adds	r3, r0, r0
 80080d6:	f489 2200 	eor.w	r2, r9, #524288	; 0x80000
 80080da:	4152      	adcs	r2, r2
 80080dc:	4299      	cmp	r1, r3
 80080de:	4b82      	ldr	r3, [pc, #520]	; (80082e8 <__ieee754_pow+0x230>)
 80080e0:	4193      	sbcs	r3, r2
 80080e2:	f080 84b9 	bcs.w	8008a58 <__ieee754_pow+0x9a0>
 80080e6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80080ea:	4640      	mov	r0, r8
 80080ec:	4649      	mov	r1, r9
 80080ee:	f7f8 f835 	bl	800015c <__adddf3>
 80080f2:	4683      	mov	fp, r0
 80080f4:	468c      	mov	ip, r1
 80080f6:	e06f      	b.n	80081d8 <__ieee754_pow+0x120>
 80080f8:	4b7c      	ldr	r3, [pc, #496]	; (80082ec <__ieee754_pow+0x234>)
 80080fa:	f029 4400 	bic.w	r4, r9, #2147483648	; 0x80000000
 80080fe:	429c      	cmp	r4, r3
 8008100:	464d      	mov	r5, r9
 8008102:	4682      	mov	sl, r0
 8008104:	dc06      	bgt.n	8008114 <__ieee754_pow+0x5c>
 8008106:	d101      	bne.n	800810c <__ieee754_pow+0x54>
 8008108:	2800      	cmp	r0, #0
 800810a:	d1ec      	bne.n	80080e6 <__ieee754_pow+0x2e>
 800810c:	429e      	cmp	r6, r3
 800810e:	dc01      	bgt.n	8008114 <__ieee754_pow+0x5c>
 8008110:	d10f      	bne.n	8008132 <__ieee754_pow+0x7a>
 8008112:	b172      	cbz	r2, 8008132 <__ieee754_pow+0x7a>
 8008114:	f105 4540 	add.w	r5, r5, #3221225472	; 0xc0000000
 8008118:	f505 1580 	add.w	r5, r5, #1048576	; 0x100000
 800811c:	ea55 050a 	orrs.w	r5, r5, sl
 8008120:	d1e1      	bne.n	80080e6 <__ieee754_pow+0x2e>
 8008122:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 8008126:	18db      	adds	r3, r3, r3
 8008128:	f482 2200 	eor.w	r2, r2, #524288	; 0x80000
 800812c:	4152      	adcs	r2, r2
 800812e:	429d      	cmp	r5, r3
 8008130:	e7d5      	b.n	80080de <__ieee754_pow+0x26>
 8008132:	2d00      	cmp	r5, #0
 8008134:	da39      	bge.n	80081aa <__ieee754_pow+0xf2>
 8008136:	4b6e      	ldr	r3, [pc, #440]	; (80082f0 <__ieee754_pow+0x238>)
 8008138:	429e      	cmp	r6, r3
 800813a:	dc52      	bgt.n	80081e2 <__ieee754_pow+0x12a>
 800813c:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 8008140:	429e      	cmp	r6, r3
 8008142:	f340 849c 	ble.w	8008a7e <__ieee754_pow+0x9c6>
 8008146:	1533      	asrs	r3, r6, #20
 8008148:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800814c:	2b14      	cmp	r3, #20
 800814e:	dd0f      	ble.n	8008170 <__ieee754_pow+0xb8>
 8008150:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 8008154:	fa22 f103 	lsr.w	r1, r2, r3
 8008158:	fa01 f303 	lsl.w	r3, r1, r3
 800815c:	4293      	cmp	r3, r2
 800815e:	f040 848e 	bne.w	8008a7e <__ieee754_pow+0x9c6>
 8008162:	f001 0101 	and.w	r1, r1, #1
 8008166:	f1c1 0302 	rsb	r3, r1, #2
 800816a:	9300      	str	r3, [sp, #0]
 800816c:	b182      	cbz	r2, 8008190 <__ieee754_pow+0xd8>
 800816e:	e05d      	b.n	800822c <__ieee754_pow+0x174>
 8008170:	2a00      	cmp	r2, #0
 8008172:	d159      	bne.n	8008228 <__ieee754_pow+0x170>
 8008174:	f1c3 0314 	rsb	r3, r3, #20
 8008178:	fa46 f103 	asr.w	r1, r6, r3
 800817c:	fa01 f303 	lsl.w	r3, r1, r3
 8008180:	42b3      	cmp	r3, r6
 8008182:	f040 8479 	bne.w	8008a78 <__ieee754_pow+0x9c0>
 8008186:	f001 0101 	and.w	r1, r1, #1
 800818a:	f1c1 0302 	rsb	r3, r1, #2
 800818e:	9300      	str	r3, [sp, #0]
 8008190:	4b58      	ldr	r3, [pc, #352]	; (80082f4 <__ieee754_pow+0x23c>)
 8008192:	429e      	cmp	r6, r3
 8008194:	d132      	bne.n	80081fc <__ieee754_pow+0x144>
 8008196:	2f00      	cmp	r7, #0
 8008198:	f280 846a 	bge.w	8008a70 <__ieee754_pow+0x9b8>
 800819c:	4642      	mov	r2, r8
 800819e:	464b      	mov	r3, r9
 80081a0:	2000      	movs	r0, #0
 80081a2:	4954      	ldr	r1, [pc, #336]	; (80082f4 <__ieee754_pow+0x23c>)
 80081a4:	f7f8 faba 	bl	800071c <__aeabi_ddiv>
 80081a8:	e7a3      	b.n	80080f2 <__ieee754_pow+0x3a>
 80081aa:	2300      	movs	r3, #0
 80081ac:	9300      	str	r3, [sp, #0]
 80081ae:	2a00      	cmp	r2, #0
 80081b0:	d13c      	bne.n	800822c <__ieee754_pow+0x174>
 80081b2:	4b4e      	ldr	r3, [pc, #312]	; (80082ec <__ieee754_pow+0x234>)
 80081b4:	429e      	cmp	r6, r3
 80081b6:	d1eb      	bne.n	8008190 <__ieee754_pow+0xd8>
 80081b8:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 80081bc:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 80081c0:	ea53 030a 	orrs.w	r3, r3, sl
 80081c4:	f000 8448 	beq.w	8008a58 <__ieee754_pow+0x9a0>
 80081c8:	4b4b      	ldr	r3, [pc, #300]	; (80082f8 <__ieee754_pow+0x240>)
 80081ca:	429c      	cmp	r4, r3
 80081cc:	dd0b      	ble.n	80081e6 <__ieee754_pow+0x12e>
 80081ce:	2f00      	cmp	r7, #0
 80081d0:	f2c0 8448 	blt.w	8008a64 <__ieee754_pow+0x9ac>
 80081d4:	e9dd bc02 	ldrd	fp, ip, [sp, #8]
 80081d8:	4658      	mov	r0, fp
 80081da:	4661      	mov	r1, ip
 80081dc:	b013      	add	sp, #76	; 0x4c
 80081de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80081e2:	2302      	movs	r3, #2
 80081e4:	e7e2      	b.n	80081ac <__ieee754_pow+0xf4>
 80081e6:	2f00      	cmp	r7, #0
 80081e8:	f04f 0b00 	mov.w	fp, #0
 80081ec:	f04f 0c00 	mov.w	ip, #0
 80081f0:	daf2      	bge.n	80081d8 <__ieee754_pow+0x120>
 80081f2:	e9dd b302 	ldrd	fp, r3, [sp, #8]
 80081f6:	f103 4c00 	add.w	ip, r3, #2147483648	; 0x80000000
 80081fa:	e7ed      	b.n	80081d8 <__ieee754_pow+0x120>
 80081fc:	f1b7 4f80 	cmp.w	r7, #1073741824	; 0x40000000
 8008200:	d106      	bne.n	8008210 <__ieee754_pow+0x158>
 8008202:	4642      	mov	r2, r8
 8008204:	464b      	mov	r3, r9
 8008206:	4640      	mov	r0, r8
 8008208:	4649      	mov	r1, r9
 800820a:	f7f8 f95d 	bl	80004c8 <__aeabi_dmul>
 800820e:	e770      	b.n	80080f2 <__ieee754_pow+0x3a>
 8008210:	4b3a      	ldr	r3, [pc, #232]	; (80082fc <__ieee754_pow+0x244>)
 8008212:	429f      	cmp	r7, r3
 8008214:	d10a      	bne.n	800822c <__ieee754_pow+0x174>
 8008216:	2d00      	cmp	r5, #0
 8008218:	db08      	blt.n	800822c <__ieee754_pow+0x174>
 800821a:	4640      	mov	r0, r8
 800821c:	4649      	mov	r1, r9
 800821e:	b013      	add	sp, #76	; 0x4c
 8008220:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008224:	f000 bc5e 	b.w	8008ae4 <__ieee754_sqrt>
 8008228:	2300      	movs	r3, #0
 800822a:	9300      	str	r3, [sp, #0]
 800822c:	4640      	mov	r0, r8
 800822e:	4649      	mov	r1, r9
 8008230:	f000 fd34 	bl	8008c9c <fabs>
 8008234:	4683      	mov	fp, r0
 8008236:	468c      	mov	ip, r1
 8008238:	f1ba 0f00 	cmp.w	sl, #0
 800823c:	d128      	bne.n	8008290 <__ieee754_pow+0x1d8>
 800823e:	b124      	cbz	r4, 800824a <__ieee754_pow+0x192>
 8008240:	4b2c      	ldr	r3, [pc, #176]	; (80082f4 <__ieee754_pow+0x23c>)
 8008242:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 8008246:	429a      	cmp	r2, r3
 8008248:	d122      	bne.n	8008290 <__ieee754_pow+0x1d8>
 800824a:	2f00      	cmp	r7, #0
 800824c:	da07      	bge.n	800825e <__ieee754_pow+0x1a6>
 800824e:	465a      	mov	r2, fp
 8008250:	4663      	mov	r3, ip
 8008252:	2000      	movs	r0, #0
 8008254:	4927      	ldr	r1, [pc, #156]	; (80082f4 <__ieee754_pow+0x23c>)
 8008256:	f7f8 fa61 	bl	800071c <__aeabi_ddiv>
 800825a:	4683      	mov	fp, r0
 800825c:	468c      	mov	ip, r1
 800825e:	2d00      	cmp	r5, #0
 8008260:	daba      	bge.n	80081d8 <__ieee754_pow+0x120>
 8008262:	9b00      	ldr	r3, [sp, #0]
 8008264:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8008268:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800826c:	4323      	orrs	r3, r4
 800826e:	d108      	bne.n	8008282 <__ieee754_pow+0x1ca>
 8008270:	465a      	mov	r2, fp
 8008272:	4663      	mov	r3, ip
 8008274:	4658      	mov	r0, fp
 8008276:	4661      	mov	r1, ip
 8008278:	f7f7 ff6e 	bl	8000158 <__aeabi_dsub>
 800827c:	4602      	mov	r2, r0
 800827e:	460b      	mov	r3, r1
 8008280:	e790      	b.n	80081a4 <__ieee754_pow+0xec>
 8008282:	9b00      	ldr	r3, [sp, #0]
 8008284:	2b01      	cmp	r3, #1
 8008286:	d1a7      	bne.n	80081d8 <__ieee754_pow+0x120>
 8008288:	f10c 4300 	add.w	r3, ip, #2147483648	; 0x80000000
 800828c:	469c      	mov	ip, r3
 800828e:	e7a3      	b.n	80081d8 <__ieee754_pow+0x120>
 8008290:	0feb      	lsrs	r3, r5, #31
 8008292:	3b01      	subs	r3, #1
 8008294:	930c      	str	r3, [sp, #48]	; 0x30
 8008296:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008298:	9b00      	ldr	r3, [sp, #0]
 800829a:	4313      	orrs	r3, r2
 800829c:	d104      	bne.n	80082a8 <__ieee754_pow+0x1f0>
 800829e:	4642      	mov	r2, r8
 80082a0:	464b      	mov	r3, r9
 80082a2:	4640      	mov	r0, r8
 80082a4:	4649      	mov	r1, r9
 80082a6:	e7e7      	b.n	8008278 <__ieee754_pow+0x1c0>
 80082a8:	4b15      	ldr	r3, [pc, #84]	; (8008300 <__ieee754_pow+0x248>)
 80082aa:	429e      	cmp	r6, r3
 80082ac:	f340 80f6 	ble.w	800849c <__ieee754_pow+0x3e4>
 80082b0:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 80082b4:	429e      	cmp	r6, r3
 80082b6:	4b10      	ldr	r3, [pc, #64]	; (80082f8 <__ieee754_pow+0x240>)
 80082b8:	dd09      	ble.n	80082ce <__ieee754_pow+0x216>
 80082ba:	429c      	cmp	r4, r3
 80082bc:	dc0c      	bgt.n	80082d8 <__ieee754_pow+0x220>
 80082be:	2f00      	cmp	r7, #0
 80082c0:	da0c      	bge.n	80082dc <__ieee754_pow+0x224>
 80082c2:	2000      	movs	r0, #0
 80082c4:	b013      	add	sp, #76	; 0x4c
 80082c6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80082ca:	f000 bce2 	b.w	8008c92 <__math_oflow>
 80082ce:	429c      	cmp	r4, r3
 80082d0:	dbf5      	blt.n	80082be <__ieee754_pow+0x206>
 80082d2:	4b08      	ldr	r3, [pc, #32]	; (80082f4 <__ieee754_pow+0x23c>)
 80082d4:	429c      	cmp	r4, r3
 80082d6:	dd15      	ble.n	8008304 <__ieee754_pow+0x24c>
 80082d8:	2f00      	cmp	r7, #0
 80082da:	dcf2      	bgt.n	80082c2 <__ieee754_pow+0x20a>
 80082dc:	2000      	movs	r0, #0
 80082de:	b013      	add	sp, #76	; 0x4c
 80082e0:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80082e4:	f000 bcd0 	b.w	8008c88 <__math_uflow>
 80082e8:	fff00000 	.word	0xfff00000
 80082ec:	7ff00000 	.word	0x7ff00000
 80082f0:	433fffff 	.word	0x433fffff
 80082f4:	3ff00000 	.word	0x3ff00000
 80082f8:	3fefffff 	.word	0x3fefffff
 80082fc:	3fe00000 	.word	0x3fe00000
 8008300:	41e00000 	.word	0x41e00000
 8008304:	4661      	mov	r1, ip
 8008306:	2200      	movs	r2, #0
 8008308:	4658      	mov	r0, fp
 800830a:	4b5f      	ldr	r3, [pc, #380]	; (8008488 <__ieee754_pow+0x3d0>)
 800830c:	f7f7 ff24 	bl	8000158 <__aeabi_dsub>
 8008310:	a355      	add	r3, pc, #340	; (adr r3, 8008468 <__ieee754_pow+0x3b0>)
 8008312:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008316:	4604      	mov	r4, r0
 8008318:	460d      	mov	r5, r1
 800831a:	f7f8 f8d5 	bl	80004c8 <__aeabi_dmul>
 800831e:	a354      	add	r3, pc, #336	; (adr r3, 8008470 <__ieee754_pow+0x3b8>)
 8008320:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008324:	4606      	mov	r6, r0
 8008326:	460f      	mov	r7, r1
 8008328:	4620      	mov	r0, r4
 800832a:	4629      	mov	r1, r5
 800832c:	f7f8 f8cc 	bl	80004c8 <__aeabi_dmul>
 8008330:	2200      	movs	r2, #0
 8008332:	4682      	mov	sl, r0
 8008334:	468b      	mov	fp, r1
 8008336:	4620      	mov	r0, r4
 8008338:	4629      	mov	r1, r5
 800833a:	4b54      	ldr	r3, [pc, #336]	; (800848c <__ieee754_pow+0x3d4>)
 800833c:	f7f8 f8c4 	bl	80004c8 <__aeabi_dmul>
 8008340:	4602      	mov	r2, r0
 8008342:	460b      	mov	r3, r1
 8008344:	a14c      	add	r1, pc, #304	; (adr r1, 8008478 <__ieee754_pow+0x3c0>)
 8008346:	e9d1 0100 	ldrd	r0, r1, [r1]
 800834a:	f7f7 ff05 	bl	8000158 <__aeabi_dsub>
 800834e:	4622      	mov	r2, r4
 8008350:	462b      	mov	r3, r5
 8008352:	f7f8 f8b9 	bl	80004c8 <__aeabi_dmul>
 8008356:	4602      	mov	r2, r0
 8008358:	460b      	mov	r3, r1
 800835a:	2000      	movs	r0, #0
 800835c:	494c      	ldr	r1, [pc, #304]	; (8008490 <__ieee754_pow+0x3d8>)
 800835e:	f7f7 fefb 	bl	8000158 <__aeabi_dsub>
 8008362:	4622      	mov	r2, r4
 8008364:	462b      	mov	r3, r5
 8008366:	4680      	mov	r8, r0
 8008368:	4689      	mov	r9, r1
 800836a:	4620      	mov	r0, r4
 800836c:	4629      	mov	r1, r5
 800836e:	f7f8 f8ab 	bl	80004c8 <__aeabi_dmul>
 8008372:	4602      	mov	r2, r0
 8008374:	460b      	mov	r3, r1
 8008376:	4640      	mov	r0, r8
 8008378:	4649      	mov	r1, r9
 800837a:	f7f8 f8a5 	bl	80004c8 <__aeabi_dmul>
 800837e:	a340      	add	r3, pc, #256	; (adr r3, 8008480 <__ieee754_pow+0x3c8>)
 8008380:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008384:	f7f8 f8a0 	bl	80004c8 <__aeabi_dmul>
 8008388:	4602      	mov	r2, r0
 800838a:	460b      	mov	r3, r1
 800838c:	4650      	mov	r0, sl
 800838e:	4659      	mov	r1, fp
 8008390:	f7f7 fee2 	bl	8000158 <__aeabi_dsub>
 8008394:	f04f 0a00 	mov.w	sl, #0
 8008398:	4602      	mov	r2, r0
 800839a:	460b      	mov	r3, r1
 800839c:	4604      	mov	r4, r0
 800839e:	460d      	mov	r5, r1
 80083a0:	4630      	mov	r0, r6
 80083a2:	4639      	mov	r1, r7
 80083a4:	f7f7 feda 	bl	800015c <__adddf3>
 80083a8:	4632      	mov	r2, r6
 80083aa:	463b      	mov	r3, r7
 80083ac:	4650      	mov	r0, sl
 80083ae:	468b      	mov	fp, r1
 80083b0:	f7f7 fed2 	bl	8000158 <__aeabi_dsub>
 80083b4:	4602      	mov	r2, r0
 80083b6:	460b      	mov	r3, r1
 80083b8:	4620      	mov	r0, r4
 80083ba:	4629      	mov	r1, r5
 80083bc:	f7f7 fecc 	bl	8000158 <__aeabi_dsub>
 80083c0:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 80083c4:	9b00      	ldr	r3, [sp, #0]
 80083c6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80083c8:	3b01      	subs	r3, #1
 80083ca:	4313      	orrs	r3, r2
 80083cc:	f04f 0600 	mov.w	r6, #0
 80083d0:	f04f 0200 	mov.w	r2, #0
 80083d4:	bf0c      	ite	eq
 80083d6:	4b2f      	ldreq	r3, [pc, #188]	; (8008494 <__ieee754_pow+0x3dc>)
 80083d8:	4b2b      	ldrne	r3, [pc, #172]	; (8008488 <__ieee754_pow+0x3d0>)
 80083da:	4604      	mov	r4, r0
 80083dc:	460d      	mov	r5, r1
 80083de:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80083e2:	e9cd 2300 	strd	r2, r3, [sp]
 80083e6:	4632      	mov	r2, r6
 80083e8:	463b      	mov	r3, r7
 80083ea:	f7f7 feb5 	bl	8000158 <__aeabi_dsub>
 80083ee:	4652      	mov	r2, sl
 80083f0:	465b      	mov	r3, fp
 80083f2:	f7f8 f869 	bl	80004c8 <__aeabi_dmul>
 80083f6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80083fa:	4680      	mov	r8, r0
 80083fc:	4689      	mov	r9, r1
 80083fe:	4620      	mov	r0, r4
 8008400:	4629      	mov	r1, r5
 8008402:	f7f8 f861 	bl	80004c8 <__aeabi_dmul>
 8008406:	4602      	mov	r2, r0
 8008408:	460b      	mov	r3, r1
 800840a:	4640      	mov	r0, r8
 800840c:	4649      	mov	r1, r9
 800840e:	f7f7 fea5 	bl	800015c <__adddf3>
 8008412:	4632      	mov	r2, r6
 8008414:	463b      	mov	r3, r7
 8008416:	4680      	mov	r8, r0
 8008418:	4689      	mov	r9, r1
 800841a:	4650      	mov	r0, sl
 800841c:	4659      	mov	r1, fp
 800841e:	f7f8 f853 	bl	80004c8 <__aeabi_dmul>
 8008422:	4604      	mov	r4, r0
 8008424:	460d      	mov	r5, r1
 8008426:	460b      	mov	r3, r1
 8008428:	4602      	mov	r2, r0
 800842a:	4649      	mov	r1, r9
 800842c:	4640      	mov	r0, r8
 800842e:	e9cd 4502 	strd	r4, r5, [sp, #8]
 8008432:	f7f7 fe93 	bl	800015c <__adddf3>
 8008436:	4b18      	ldr	r3, [pc, #96]	; (8008498 <__ieee754_pow+0x3e0>)
 8008438:	4682      	mov	sl, r0
 800843a:	4299      	cmp	r1, r3
 800843c:	460f      	mov	r7, r1
 800843e:	460e      	mov	r6, r1
 8008440:	f340 82e5 	ble.w	8008a0e <__ieee754_pow+0x956>
 8008444:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 8008448:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 800844c:	4303      	orrs	r3, r0
 800844e:	f000 81df 	beq.w	8008810 <__ieee754_pow+0x758>
 8008452:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008456:	2200      	movs	r2, #0
 8008458:	2300      	movs	r3, #0
 800845a:	f7f8 faa7 	bl	80009ac <__aeabi_dcmplt>
 800845e:	3800      	subs	r0, #0
 8008460:	bf18      	it	ne
 8008462:	2001      	movne	r0, #1
 8008464:	e72e      	b.n	80082c4 <__ieee754_pow+0x20c>
 8008466:	bf00      	nop
 8008468:	60000000 	.word	0x60000000
 800846c:	3ff71547 	.word	0x3ff71547
 8008470:	f85ddf44 	.word	0xf85ddf44
 8008474:	3e54ae0b 	.word	0x3e54ae0b
 8008478:	55555555 	.word	0x55555555
 800847c:	3fd55555 	.word	0x3fd55555
 8008480:	652b82fe 	.word	0x652b82fe
 8008484:	3ff71547 	.word	0x3ff71547
 8008488:	3ff00000 	.word	0x3ff00000
 800848c:	3fd00000 	.word	0x3fd00000
 8008490:	3fe00000 	.word	0x3fe00000
 8008494:	bff00000 	.word	0xbff00000
 8008498:	408fffff 	.word	0x408fffff
 800849c:	4bd2      	ldr	r3, [pc, #840]	; (80087e8 <__ieee754_pow+0x730>)
 800849e:	2200      	movs	r2, #0
 80084a0:	402b      	ands	r3, r5
 80084a2:	b943      	cbnz	r3, 80084b6 <__ieee754_pow+0x3fe>
 80084a4:	4658      	mov	r0, fp
 80084a6:	4661      	mov	r1, ip
 80084a8:	4bd0      	ldr	r3, [pc, #832]	; (80087ec <__ieee754_pow+0x734>)
 80084aa:	f7f8 f80d 	bl	80004c8 <__aeabi_dmul>
 80084ae:	f06f 0234 	mvn.w	r2, #52	; 0x34
 80084b2:	4683      	mov	fp, r0
 80084b4:	460c      	mov	r4, r1
 80084b6:	1523      	asrs	r3, r4, #20
 80084b8:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 80084bc:	4413      	add	r3, r2
 80084be:	930b      	str	r3, [sp, #44]	; 0x2c
 80084c0:	4bcb      	ldr	r3, [pc, #812]	; (80087f0 <__ieee754_pow+0x738>)
 80084c2:	f3c4 0413 	ubfx	r4, r4, #0, #20
 80084c6:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 80084ca:	429c      	cmp	r4, r3
 80084cc:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 80084d0:	dd08      	ble.n	80084e4 <__ieee754_pow+0x42c>
 80084d2:	4bc8      	ldr	r3, [pc, #800]	; (80087f4 <__ieee754_pow+0x73c>)
 80084d4:	429c      	cmp	r4, r3
 80084d6:	f340 8199 	ble.w	800880c <__ieee754_pow+0x754>
 80084da:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80084dc:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 80084e0:	3301      	adds	r3, #1
 80084e2:	930b      	str	r3, [sp, #44]	; 0x2c
 80084e4:	2600      	movs	r6, #0
 80084e6:	00f3      	lsls	r3, r6, #3
 80084e8:	930d      	str	r3, [sp, #52]	; 0x34
 80084ea:	4bc3      	ldr	r3, [pc, #780]	; (80087f8 <__ieee754_pow+0x740>)
 80084ec:	4658      	mov	r0, fp
 80084ee:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 80084f2:	e9d3 3400 	ldrd	r3, r4, [r3]
 80084f6:	4629      	mov	r1, r5
 80084f8:	461a      	mov	r2, r3
 80084fa:	e9cd 3408 	strd	r3, r4, [sp, #32]
 80084fe:	4623      	mov	r3, r4
 8008500:	f7f7 fe2a 	bl	8000158 <__aeabi_dsub>
 8008504:	46da      	mov	sl, fp
 8008506:	462b      	mov	r3, r5
 8008508:	4652      	mov	r2, sl
 800850a:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 800850e:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8008512:	f7f7 fe23 	bl	800015c <__adddf3>
 8008516:	4602      	mov	r2, r0
 8008518:	460b      	mov	r3, r1
 800851a:	2000      	movs	r0, #0
 800851c:	49b7      	ldr	r1, [pc, #732]	; (80087fc <__ieee754_pow+0x744>)
 800851e:	f7f8 f8fd 	bl	800071c <__aeabi_ddiv>
 8008522:	4602      	mov	r2, r0
 8008524:	460b      	mov	r3, r1
 8008526:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800852a:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 800852e:	f7f7 ffcb 	bl	80004c8 <__aeabi_dmul>
 8008532:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8008536:	e9dd 3406 	ldrd	r3, r4, [sp, #24]
 800853a:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800853e:	2300      	movs	r3, #0
 8008540:	2200      	movs	r2, #0
 8008542:	46ab      	mov	fp, r5
 8008544:	106d      	asrs	r5, r5, #1
 8008546:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 800854a:	9304      	str	r3, [sp, #16]
 800854c:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 8008550:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 8008554:	eb05 4386 	add.w	r3, r5, r6, lsl #18
 8008558:	4640      	mov	r0, r8
 800855a:	4649      	mov	r1, r9
 800855c:	4614      	mov	r4, r2
 800855e:	461d      	mov	r5, r3
 8008560:	f7f7 ffb2 	bl	80004c8 <__aeabi_dmul>
 8008564:	4602      	mov	r2, r0
 8008566:	460b      	mov	r3, r1
 8008568:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 800856c:	f7f7 fdf4 	bl	8000158 <__aeabi_dsub>
 8008570:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8008574:	4606      	mov	r6, r0
 8008576:	460f      	mov	r7, r1
 8008578:	4620      	mov	r0, r4
 800857a:	4629      	mov	r1, r5
 800857c:	f7f7 fdec 	bl	8000158 <__aeabi_dsub>
 8008580:	4602      	mov	r2, r0
 8008582:	460b      	mov	r3, r1
 8008584:	4650      	mov	r0, sl
 8008586:	4659      	mov	r1, fp
 8008588:	f7f7 fde6 	bl	8000158 <__aeabi_dsub>
 800858c:	4642      	mov	r2, r8
 800858e:	464b      	mov	r3, r9
 8008590:	f7f7 ff9a 	bl	80004c8 <__aeabi_dmul>
 8008594:	4602      	mov	r2, r0
 8008596:	460b      	mov	r3, r1
 8008598:	4630      	mov	r0, r6
 800859a:	4639      	mov	r1, r7
 800859c:	f7f7 fddc 	bl	8000158 <__aeabi_dsub>
 80085a0:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80085a4:	f7f7 ff90 	bl	80004c8 <__aeabi_dmul>
 80085a8:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80085ac:	e9cd 0108 	strd	r0, r1, [sp, #32]
 80085b0:	4610      	mov	r0, r2
 80085b2:	4619      	mov	r1, r3
 80085b4:	f7f7 ff88 	bl	80004c8 <__aeabi_dmul>
 80085b8:	a379      	add	r3, pc, #484	; (adr r3, 80087a0 <__ieee754_pow+0x6e8>)
 80085ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80085be:	4604      	mov	r4, r0
 80085c0:	460d      	mov	r5, r1
 80085c2:	f7f7 ff81 	bl	80004c8 <__aeabi_dmul>
 80085c6:	a378      	add	r3, pc, #480	; (adr r3, 80087a8 <__ieee754_pow+0x6f0>)
 80085c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80085cc:	f7f7 fdc6 	bl	800015c <__adddf3>
 80085d0:	4622      	mov	r2, r4
 80085d2:	462b      	mov	r3, r5
 80085d4:	f7f7 ff78 	bl	80004c8 <__aeabi_dmul>
 80085d8:	a375      	add	r3, pc, #468	; (adr r3, 80087b0 <__ieee754_pow+0x6f8>)
 80085da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80085de:	f7f7 fdbd 	bl	800015c <__adddf3>
 80085e2:	4622      	mov	r2, r4
 80085e4:	462b      	mov	r3, r5
 80085e6:	f7f7 ff6f 	bl	80004c8 <__aeabi_dmul>
 80085ea:	a373      	add	r3, pc, #460	; (adr r3, 80087b8 <__ieee754_pow+0x700>)
 80085ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80085f0:	f7f7 fdb4 	bl	800015c <__adddf3>
 80085f4:	4622      	mov	r2, r4
 80085f6:	462b      	mov	r3, r5
 80085f8:	f7f7 ff66 	bl	80004c8 <__aeabi_dmul>
 80085fc:	a370      	add	r3, pc, #448	; (adr r3, 80087c0 <__ieee754_pow+0x708>)
 80085fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008602:	f7f7 fdab 	bl	800015c <__adddf3>
 8008606:	4622      	mov	r2, r4
 8008608:	462b      	mov	r3, r5
 800860a:	f7f7 ff5d 	bl	80004c8 <__aeabi_dmul>
 800860e:	a36e      	add	r3, pc, #440	; (adr r3, 80087c8 <__ieee754_pow+0x710>)
 8008610:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008614:	f7f7 fda2 	bl	800015c <__adddf3>
 8008618:	4622      	mov	r2, r4
 800861a:	4606      	mov	r6, r0
 800861c:	460f      	mov	r7, r1
 800861e:	462b      	mov	r3, r5
 8008620:	4620      	mov	r0, r4
 8008622:	4629      	mov	r1, r5
 8008624:	f7f7 ff50 	bl	80004c8 <__aeabi_dmul>
 8008628:	4602      	mov	r2, r0
 800862a:	460b      	mov	r3, r1
 800862c:	4630      	mov	r0, r6
 800862e:	4639      	mov	r1, r7
 8008630:	f7f7 ff4a 	bl	80004c8 <__aeabi_dmul>
 8008634:	4604      	mov	r4, r0
 8008636:	460d      	mov	r5, r1
 8008638:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800863c:	4642      	mov	r2, r8
 800863e:	464b      	mov	r3, r9
 8008640:	f7f7 fd8c 	bl	800015c <__adddf3>
 8008644:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8008648:	f7f7 ff3e 	bl	80004c8 <__aeabi_dmul>
 800864c:	4622      	mov	r2, r4
 800864e:	462b      	mov	r3, r5
 8008650:	f7f7 fd84 	bl	800015c <__adddf3>
 8008654:	4642      	mov	r2, r8
 8008656:	4606      	mov	r6, r0
 8008658:	460f      	mov	r7, r1
 800865a:	464b      	mov	r3, r9
 800865c:	4640      	mov	r0, r8
 800865e:	4649      	mov	r1, r9
 8008660:	f7f7 ff32 	bl	80004c8 <__aeabi_dmul>
 8008664:	2200      	movs	r2, #0
 8008666:	4b66      	ldr	r3, [pc, #408]	; (8008800 <__ieee754_pow+0x748>)
 8008668:	4682      	mov	sl, r0
 800866a:	468b      	mov	fp, r1
 800866c:	f7f7 fd76 	bl	800015c <__adddf3>
 8008670:	4632      	mov	r2, r6
 8008672:	463b      	mov	r3, r7
 8008674:	f7f7 fd72 	bl	800015c <__adddf3>
 8008678:	2400      	movs	r4, #0
 800867a:	460d      	mov	r5, r1
 800867c:	4622      	mov	r2, r4
 800867e:	460b      	mov	r3, r1
 8008680:	4640      	mov	r0, r8
 8008682:	4649      	mov	r1, r9
 8008684:	f7f7 ff20 	bl	80004c8 <__aeabi_dmul>
 8008688:	2200      	movs	r2, #0
 800868a:	4680      	mov	r8, r0
 800868c:	4689      	mov	r9, r1
 800868e:	4620      	mov	r0, r4
 8008690:	4629      	mov	r1, r5
 8008692:	4b5b      	ldr	r3, [pc, #364]	; (8008800 <__ieee754_pow+0x748>)
 8008694:	f7f7 fd60 	bl	8000158 <__aeabi_dsub>
 8008698:	4652      	mov	r2, sl
 800869a:	465b      	mov	r3, fp
 800869c:	f7f7 fd5c 	bl	8000158 <__aeabi_dsub>
 80086a0:	4602      	mov	r2, r0
 80086a2:	460b      	mov	r3, r1
 80086a4:	4630      	mov	r0, r6
 80086a6:	4639      	mov	r1, r7
 80086a8:	f7f7 fd56 	bl	8000158 <__aeabi_dsub>
 80086ac:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80086b0:	f7f7 ff0a 	bl	80004c8 <__aeabi_dmul>
 80086b4:	4622      	mov	r2, r4
 80086b6:	4606      	mov	r6, r0
 80086b8:	460f      	mov	r7, r1
 80086ba:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80086be:	462b      	mov	r3, r5
 80086c0:	f7f7 ff02 	bl	80004c8 <__aeabi_dmul>
 80086c4:	4602      	mov	r2, r0
 80086c6:	460b      	mov	r3, r1
 80086c8:	4630      	mov	r0, r6
 80086ca:	4639      	mov	r1, r7
 80086cc:	f7f7 fd46 	bl	800015c <__adddf3>
 80086d0:	2400      	movs	r4, #0
 80086d2:	4606      	mov	r6, r0
 80086d4:	460f      	mov	r7, r1
 80086d6:	4602      	mov	r2, r0
 80086d8:	460b      	mov	r3, r1
 80086da:	4640      	mov	r0, r8
 80086dc:	4649      	mov	r1, r9
 80086de:	f7f7 fd3d 	bl	800015c <__adddf3>
 80086e2:	a33b      	add	r3, pc, #236	; (adr r3, 80087d0 <__ieee754_pow+0x718>)
 80086e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80086e8:	4620      	mov	r0, r4
 80086ea:	460d      	mov	r5, r1
 80086ec:	f7f7 feec 	bl	80004c8 <__aeabi_dmul>
 80086f0:	4642      	mov	r2, r8
 80086f2:	464b      	mov	r3, r9
 80086f4:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80086f8:	4620      	mov	r0, r4
 80086fa:	4629      	mov	r1, r5
 80086fc:	f7f7 fd2c 	bl	8000158 <__aeabi_dsub>
 8008700:	4602      	mov	r2, r0
 8008702:	460b      	mov	r3, r1
 8008704:	4630      	mov	r0, r6
 8008706:	4639      	mov	r1, r7
 8008708:	f7f7 fd26 	bl	8000158 <__aeabi_dsub>
 800870c:	a332      	add	r3, pc, #200	; (adr r3, 80087d8 <__ieee754_pow+0x720>)
 800870e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008712:	f7f7 fed9 	bl	80004c8 <__aeabi_dmul>
 8008716:	a332      	add	r3, pc, #200	; (adr r3, 80087e0 <__ieee754_pow+0x728>)
 8008718:	e9d3 2300 	ldrd	r2, r3, [r3]
 800871c:	4606      	mov	r6, r0
 800871e:	460f      	mov	r7, r1
 8008720:	4620      	mov	r0, r4
 8008722:	4629      	mov	r1, r5
 8008724:	f7f7 fed0 	bl	80004c8 <__aeabi_dmul>
 8008728:	4602      	mov	r2, r0
 800872a:	460b      	mov	r3, r1
 800872c:	4630      	mov	r0, r6
 800872e:	4639      	mov	r1, r7
 8008730:	f7f7 fd14 	bl	800015c <__adddf3>
 8008734:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8008736:	4b33      	ldr	r3, [pc, #204]	; (8008804 <__ieee754_pow+0x74c>)
 8008738:	f04f 0a00 	mov.w	sl, #0
 800873c:	4413      	add	r3, r2
 800873e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008742:	f7f7 fd0b 	bl	800015c <__adddf3>
 8008746:	4680      	mov	r8, r0
 8008748:	980b      	ldr	r0, [sp, #44]	; 0x2c
 800874a:	4689      	mov	r9, r1
 800874c:	f7f7 fe52 	bl	80003f4 <__aeabi_i2d>
 8008750:	4604      	mov	r4, r0
 8008752:	460d      	mov	r5, r1
 8008754:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8008756:	4b2c      	ldr	r3, [pc, #176]	; (8008808 <__ieee754_pow+0x750>)
 8008758:	4413      	add	r3, r2
 800875a:	e9d3 6700 	ldrd	r6, r7, [r3]
 800875e:	4642      	mov	r2, r8
 8008760:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008764:	464b      	mov	r3, r9
 8008766:	f7f7 fcf9 	bl	800015c <__adddf3>
 800876a:	4632      	mov	r2, r6
 800876c:	463b      	mov	r3, r7
 800876e:	f7f7 fcf5 	bl	800015c <__adddf3>
 8008772:	4622      	mov	r2, r4
 8008774:	462b      	mov	r3, r5
 8008776:	f7f7 fcf1 	bl	800015c <__adddf3>
 800877a:	4622      	mov	r2, r4
 800877c:	462b      	mov	r3, r5
 800877e:	4650      	mov	r0, sl
 8008780:	468b      	mov	fp, r1
 8008782:	f7f7 fce9 	bl	8000158 <__aeabi_dsub>
 8008786:	4632      	mov	r2, r6
 8008788:	463b      	mov	r3, r7
 800878a:	f7f7 fce5 	bl	8000158 <__aeabi_dsub>
 800878e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8008792:	f7f7 fce1 	bl	8000158 <__aeabi_dsub>
 8008796:	4602      	mov	r2, r0
 8008798:	460b      	mov	r3, r1
 800879a:	4640      	mov	r0, r8
 800879c:	4649      	mov	r1, r9
 800879e:	e60d      	b.n	80083bc <__ieee754_pow+0x304>
 80087a0:	4a454eef 	.word	0x4a454eef
 80087a4:	3fca7e28 	.word	0x3fca7e28
 80087a8:	93c9db65 	.word	0x93c9db65
 80087ac:	3fcd864a 	.word	0x3fcd864a
 80087b0:	a91d4101 	.word	0xa91d4101
 80087b4:	3fd17460 	.word	0x3fd17460
 80087b8:	518f264d 	.word	0x518f264d
 80087bc:	3fd55555 	.word	0x3fd55555
 80087c0:	db6fabff 	.word	0xdb6fabff
 80087c4:	3fdb6db6 	.word	0x3fdb6db6
 80087c8:	33333303 	.word	0x33333303
 80087cc:	3fe33333 	.word	0x3fe33333
 80087d0:	e0000000 	.word	0xe0000000
 80087d4:	3feec709 	.word	0x3feec709
 80087d8:	dc3a03fd 	.word	0xdc3a03fd
 80087dc:	3feec709 	.word	0x3feec709
 80087e0:	145b01f5 	.word	0x145b01f5
 80087e4:	be3e2fe0 	.word	0xbe3e2fe0
 80087e8:	7ff00000 	.word	0x7ff00000
 80087ec:	43400000 	.word	0x43400000
 80087f0:	0003988e 	.word	0x0003988e
 80087f4:	000bb679 	.word	0x000bb679
 80087f8:	08009138 	.word	0x08009138
 80087fc:	3ff00000 	.word	0x3ff00000
 8008800:	40080000 	.word	0x40080000
 8008804:	08009158 	.word	0x08009158
 8008808:	08009148 	.word	0x08009148
 800880c:	2601      	movs	r6, #1
 800880e:	e66a      	b.n	80084e6 <__ieee754_pow+0x42e>
 8008810:	a39d      	add	r3, pc, #628	; (adr r3, 8008a88 <__ieee754_pow+0x9d0>)
 8008812:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008816:	4640      	mov	r0, r8
 8008818:	4649      	mov	r1, r9
 800881a:	f7f7 fc9f 	bl	800015c <__adddf3>
 800881e:	4622      	mov	r2, r4
 8008820:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8008824:	462b      	mov	r3, r5
 8008826:	4650      	mov	r0, sl
 8008828:	4639      	mov	r1, r7
 800882a:	f7f7 fc95 	bl	8000158 <__aeabi_dsub>
 800882e:	4602      	mov	r2, r0
 8008830:	460b      	mov	r3, r1
 8008832:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008836:	f7f8 f8d7 	bl	80009e8 <__aeabi_dcmpgt>
 800883a:	2800      	cmp	r0, #0
 800883c:	f47f ae09 	bne.w	8008452 <__ieee754_pow+0x39a>
 8008840:	4aa3      	ldr	r2, [pc, #652]	; (8008ad0 <__ieee754_pow+0xa18>)
 8008842:	f026 4300 	bic.w	r3, r6, #2147483648	; 0x80000000
 8008846:	4293      	cmp	r3, r2
 8008848:	f340 8101 	ble.w	8008a4e <__ieee754_pow+0x996>
 800884c:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 8008850:	2000      	movs	r0, #0
 8008852:	151b      	asrs	r3, r3, #20
 8008854:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 8008858:	fa4a f303 	asr.w	r3, sl, r3
 800885c:	4433      	add	r3, r6
 800885e:	f3c3 520a 	ubfx	r2, r3, #20, #11
 8008862:	4f9c      	ldr	r7, [pc, #624]	; (8008ad4 <__ieee754_pow+0xa1c>)
 8008864:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 8008868:	4117      	asrs	r7, r2
 800886a:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 800886e:	ea23 0107 	bic.w	r1, r3, r7
 8008872:	f1c2 0214 	rsb	r2, r2, #20
 8008876:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 800887a:	460b      	mov	r3, r1
 800887c:	fa4a fa02 	asr.w	sl, sl, r2
 8008880:	2e00      	cmp	r6, #0
 8008882:	4602      	mov	r2, r0
 8008884:	4629      	mov	r1, r5
 8008886:	4620      	mov	r0, r4
 8008888:	bfb8      	it	lt
 800888a:	f1ca 0a00 	rsblt	sl, sl, #0
 800888e:	f7f7 fc63 	bl	8000158 <__aeabi_dsub>
 8008892:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008896:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800889a:	2400      	movs	r4, #0
 800889c:	4642      	mov	r2, r8
 800889e:	464b      	mov	r3, r9
 80088a0:	f7f7 fc5c 	bl	800015c <__adddf3>
 80088a4:	a37a      	add	r3, pc, #488	; (adr r3, 8008a90 <__ieee754_pow+0x9d8>)
 80088a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80088aa:	4620      	mov	r0, r4
 80088ac:	460d      	mov	r5, r1
 80088ae:	f7f7 fe0b 	bl	80004c8 <__aeabi_dmul>
 80088b2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80088b6:	4606      	mov	r6, r0
 80088b8:	460f      	mov	r7, r1
 80088ba:	4620      	mov	r0, r4
 80088bc:	4629      	mov	r1, r5
 80088be:	f7f7 fc4b 	bl	8000158 <__aeabi_dsub>
 80088c2:	4602      	mov	r2, r0
 80088c4:	460b      	mov	r3, r1
 80088c6:	4640      	mov	r0, r8
 80088c8:	4649      	mov	r1, r9
 80088ca:	f7f7 fc45 	bl	8000158 <__aeabi_dsub>
 80088ce:	a372      	add	r3, pc, #456	; (adr r3, 8008a98 <__ieee754_pow+0x9e0>)
 80088d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80088d4:	f7f7 fdf8 	bl	80004c8 <__aeabi_dmul>
 80088d8:	a371      	add	r3, pc, #452	; (adr r3, 8008aa0 <__ieee754_pow+0x9e8>)
 80088da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80088de:	4680      	mov	r8, r0
 80088e0:	4689      	mov	r9, r1
 80088e2:	4620      	mov	r0, r4
 80088e4:	4629      	mov	r1, r5
 80088e6:	f7f7 fdef 	bl	80004c8 <__aeabi_dmul>
 80088ea:	4602      	mov	r2, r0
 80088ec:	460b      	mov	r3, r1
 80088ee:	4640      	mov	r0, r8
 80088f0:	4649      	mov	r1, r9
 80088f2:	f7f7 fc33 	bl	800015c <__adddf3>
 80088f6:	4604      	mov	r4, r0
 80088f8:	460d      	mov	r5, r1
 80088fa:	4602      	mov	r2, r0
 80088fc:	460b      	mov	r3, r1
 80088fe:	4630      	mov	r0, r6
 8008900:	4639      	mov	r1, r7
 8008902:	f7f7 fc2b 	bl	800015c <__adddf3>
 8008906:	4632      	mov	r2, r6
 8008908:	463b      	mov	r3, r7
 800890a:	4680      	mov	r8, r0
 800890c:	4689      	mov	r9, r1
 800890e:	f7f7 fc23 	bl	8000158 <__aeabi_dsub>
 8008912:	4602      	mov	r2, r0
 8008914:	460b      	mov	r3, r1
 8008916:	4620      	mov	r0, r4
 8008918:	4629      	mov	r1, r5
 800891a:	f7f7 fc1d 	bl	8000158 <__aeabi_dsub>
 800891e:	4642      	mov	r2, r8
 8008920:	4606      	mov	r6, r0
 8008922:	460f      	mov	r7, r1
 8008924:	464b      	mov	r3, r9
 8008926:	4640      	mov	r0, r8
 8008928:	4649      	mov	r1, r9
 800892a:	f7f7 fdcd 	bl	80004c8 <__aeabi_dmul>
 800892e:	a35e      	add	r3, pc, #376	; (adr r3, 8008aa8 <__ieee754_pow+0x9f0>)
 8008930:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008934:	4604      	mov	r4, r0
 8008936:	460d      	mov	r5, r1
 8008938:	f7f7 fdc6 	bl	80004c8 <__aeabi_dmul>
 800893c:	a35c      	add	r3, pc, #368	; (adr r3, 8008ab0 <__ieee754_pow+0x9f8>)
 800893e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008942:	f7f7 fc09 	bl	8000158 <__aeabi_dsub>
 8008946:	4622      	mov	r2, r4
 8008948:	462b      	mov	r3, r5
 800894a:	f7f7 fdbd 	bl	80004c8 <__aeabi_dmul>
 800894e:	a35a      	add	r3, pc, #360	; (adr r3, 8008ab8 <__ieee754_pow+0xa00>)
 8008950:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008954:	f7f7 fc02 	bl	800015c <__adddf3>
 8008958:	4622      	mov	r2, r4
 800895a:	462b      	mov	r3, r5
 800895c:	f7f7 fdb4 	bl	80004c8 <__aeabi_dmul>
 8008960:	a357      	add	r3, pc, #348	; (adr r3, 8008ac0 <__ieee754_pow+0xa08>)
 8008962:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008966:	f7f7 fbf7 	bl	8000158 <__aeabi_dsub>
 800896a:	4622      	mov	r2, r4
 800896c:	462b      	mov	r3, r5
 800896e:	f7f7 fdab 	bl	80004c8 <__aeabi_dmul>
 8008972:	a355      	add	r3, pc, #340	; (adr r3, 8008ac8 <__ieee754_pow+0xa10>)
 8008974:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008978:	f7f7 fbf0 	bl	800015c <__adddf3>
 800897c:	4622      	mov	r2, r4
 800897e:	462b      	mov	r3, r5
 8008980:	f7f7 fda2 	bl	80004c8 <__aeabi_dmul>
 8008984:	4602      	mov	r2, r0
 8008986:	460b      	mov	r3, r1
 8008988:	4640      	mov	r0, r8
 800898a:	4649      	mov	r1, r9
 800898c:	f7f7 fbe4 	bl	8000158 <__aeabi_dsub>
 8008990:	4604      	mov	r4, r0
 8008992:	460d      	mov	r5, r1
 8008994:	4602      	mov	r2, r0
 8008996:	460b      	mov	r3, r1
 8008998:	4640      	mov	r0, r8
 800899a:	4649      	mov	r1, r9
 800899c:	f7f7 fd94 	bl	80004c8 <__aeabi_dmul>
 80089a0:	2200      	movs	r2, #0
 80089a2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80089a6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80089aa:	4620      	mov	r0, r4
 80089ac:	4629      	mov	r1, r5
 80089ae:	f7f7 fbd3 	bl	8000158 <__aeabi_dsub>
 80089b2:	4602      	mov	r2, r0
 80089b4:	460b      	mov	r3, r1
 80089b6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80089ba:	f7f7 feaf 	bl	800071c <__aeabi_ddiv>
 80089be:	4632      	mov	r2, r6
 80089c0:	4604      	mov	r4, r0
 80089c2:	460d      	mov	r5, r1
 80089c4:	463b      	mov	r3, r7
 80089c6:	4640      	mov	r0, r8
 80089c8:	4649      	mov	r1, r9
 80089ca:	f7f7 fd7d 	bl	80004c8 <__aeabi_dmul>
 80089ce:	4632      	mov	r2, r6
 80089d0:	463b      	mov	r3, r7
 80089d2:	f7f7 fbc3 	bl	800015c <__adddf3>
 80089d6:	4602      	mov	r2, r0
 80089d8:	460b      	mov	r3, r1
 80089da:	4620      	mov	r0, r4
 80089dc:	4629      	mov	r1, r5
 80089de:	f7f7 fbbb 	bl	8000158 <__aeabi_dsub>
 80089e2:	4642      	mov	r2, r8
 80089e4:	464b      	mov	r3, r9
 80089e6:	f7f7 fbb7 	bl	8000158 <__aeabi_dsub>
 80089ea:	4602      	mov	r2, r0
 80089ec:	460b      	mov	r3, r1
 80089ee:	2000      	movs	r0, #0
 80089f0:	4939      	ldr	r1, [pc, #228]	; (8008ad8 <__ieee754_pow+0xa20>)
 80089f2:	f7f7 fbb1 	bl	8000158 <__aeabi_dsub>
 80089f6:	eb01 540a 	add.w	r4, r1, sl, lsl #20
 80089fa:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 80089fe:	da29      	bge.n	8008a54 <__ieee754_pow+0x99c>
 8008a00:	4652      	mov	r2, sl
 8008a02:	f000 f955 	bl	8008cb0 <scalbn>
 8008a06:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008a0a:	f7ff bbfe 	b.w	800820a <__ieee754_pow+0x152>
 8008a0e:	4b33      	ldr	r3, [pc, #204]	; (8008adc <__ieee754_pow+0xa24>)
 8008a10:	f021 4700 	bic.w	r7, r1, #2147483648	; 0x80000000
 8008a14:	429f      	cmp	r7, r3
 8008a16:	f77f af13 	ble.w	8008840 <__ieee754_pow+0x788>
 8008a1a:	4b31      	ldr	r3, [pc, #196]	; (8008ae0 <__ieee754_pow+0xa28>)
 8008a1c:	440b      	add	r3, r1
 8008a1e:	4303      	orrs	r3, r0
 8008a20:	d009      	beq.n	8008a36 <__ieee754_pow+0x97e>
 8008a22:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008a26:	2200      	movs	r2, #0
 8008a28:	2300      	movs	r3, #0
 8008a2a:	f7f7 ffbf 	bl	80009ac <__aeabi_dcmplt>
 8008a2e:	3800      	subs	r0, #0
 8008a30:	bf18      	it	ne
 8008a32:	2001      	movne	r0, #1
 8008a34:	e453      	b.n	80082de <__ieee754_pow+0x226>
 8008a36:	4622      	mov	r2, r4
 8008a38:	462b      	mov	r3, r5
 8008a3a:	f7f7 fb8d 	bl	8000158 <__aeabi_dsub>
 8008a3e:	4642      	mov	r2, r8
 8008a40:	464b      	mov	r3, r9
 8008a42:	f7f7 ffc7 	bl	80009d4 <__aeabi_dcmpge>
 8008a46:	2800      	cmp	r0, #0
 8008a48:	f43f aefa 	beq.w	8008840 <__ieee754_pow+0x788>
 8008a4c:	e7e9      	b.n	8008a22 <__ieee754_pow+0x96a>
 8008a4e:	f04f 0a00 	mov.w	sl, #0
 8008a52:	e720      	b.n	8008896 <__ieee754_pow+0x7de>
 8008a54:	4621      	mov	r1, r4
 8008a56:	e7d6      	b.n	8008a06 <__ieee754_pow+0x94e>
 8008a58:	f04f 0b00 	mov.w	fp, #0
 8008a5c:	f8df c078 	ldr.w	ip, [pc, #120]	; 8008ad8 <__ieee754_pow+0xa20>
 8008a60:	f7ff bbba 	b.w	80081d8 <__ieee754_pow+0x120>
 8008a64:	f04f 0b00 	mov.w	fp, #0
 8008a68:	f04f 0c00 	mov.w	ip, #0
 8008a6c:	f7ff bbb4 	b.w	80081d8 <__ieee754_pow+0x120>
 8008a70:	4640      	mov	r0, r8
 8008a72:	4649      	mov	r1, r9
 8008a74:	f7ff bb3d 	b.w	80080f2 <__ieee754_pow+0x3a>
 8008a78:	9200      	str	r2, [sp, #0]
 8008a7a:	f7ff bb89 	b.w	8008190 <__ieee754_pow+0xd8>
 8008a7e:	2300      	movs	r3, #0
 8008a80:	f7ff bb73 	b.w	800816a <__ieee754_pow+0xb2>
 8008a84:	f3af 8000 	nop.w
 8008a88:	652b82fe 	.word	0x652b82fe
 8008a8c:	3c971547 	.word	0x3c971547
 8008a90:	00000000 	.word	0x00000000
 8008a94:	3fe62e43 	.word	0x3fe62e43
 8008a98:	fefa39ef 	.word	0xfefa39ef
 8008a9c:	3fe62e42 	.word	0x3fe62e42
 8008aa0:	0ca86c39 	.word	0x0ca86c39
 8008aa4:	be205c61 	.word	0xbe205c61
 8008aa8:	72bea4d0 	.word	0x72bea4d0
 8008aac:	3e663769 	.word	0x3e663769
 8008ab0:	c5d26bf1 	.word	0xc5d26bf1
 8008ab4:	3ebbbd41 	.word	0x3ebbbd41
 8008ab8:	af25de2c 	.word	0xaf25de2c
 8008abc:	3f11566a 	.word	0x3f11566a
 8008ac0:	16bebd93 	.word	0x16bebd93
 8008ac4:	3f66c16c 	.word	0x3f66c16c
 8008ac8:	5555553e 	.word	0x5555553e
 8008acc:	3fc55555 	.word	0x3fc55555
 8008ad0:	3fe00000 	.word	0x3fe00000
 8008ad4:	000fffff 	.word	0x000fffff
 8008ad8:	3ff00000 	.word	0x3ff00000
 8008adc:	4090cbff 	.word	0x4090cbff
 8008ae0:	3f6f3400 	.word	0x3f6f3400

08008ae4 <__ieee754_sqrt>:
 8008ae4:	f8df c158 	ldr.w	ip, [pc, #344]	; 8008c40 <__ieee754_sqrt+0x15c>
 8008ae8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008aec:	ea3c 0c01 	bics.w	ip, ip, r1
 8008af0:	4606      	mov	r6, r0
 8008af2:	460d      	mov	r5, r1
 8008af4:	460c      	mov	r4, r1
 8008af6:	460a      	mov	r2, r1
 8008af8:	4607      	mov	r7, r0
 8008afa:	4603      	mov	r3, r0
 8008afc:	d10f      	bne.n	8008b1e <__ieee754_sqrt+0x3a>
 8008afe:	4602      	mov	r2, r0
 8008b00:	460b      	mov	r3, r1
 8008b02:	f7f7 fce1 	bl	80004c8 <__aeabi_dmul>
 8008b06:	4602      	mov	r2, r0
 8008b08:	460b      	mov	r3, r1
 8008b0a:	4630      	mov	r0, r6
 8008b0c:	4629      	mov	r1, r5
 8008b0e:	f7f7 fb25 	bl	800015c <__adddf3>
 8008b12:	4606      	mov	r6, r0
 8008b14:	460d      	mov	r5, r1
 8008b16:	4630      	mov	r0, r6
 8008b18:	4629      	mov	r1, r5
 8008b1a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008b1e:	2900      	cmp	r1, #0
 8008b20:	dc0e      	bgt.n	8008b40 <__ieee754_sqrt+0x5c>
 8008b22:	f021 4c00 	bic.w	ip, r1, #2147483648	; 0x80000000
 8008b26:	ea5c 0707 	orrs.w	r7, ip, r7
 8008b2a:	d0f4      	beq.n	8008b16 <__ieee754_sqrt+0x32>
 8008b2c:	b141      	cbz	r1, 8008b40 <__ieee754_sqrt+0x5c>
 8008b2e:	4602      	mov	r2, r0
 8008b30:	460b      	mov	r3, r1
 8008b32:	f7f7 fb11 	bl	8000158 <__aeabi_dsub>
 8008b36:	4602      	mov	r2, r0
 8008b38:	460b      	mov	r3, r1
 8008b3a:	f7f7 fdef 	bl	800071c <__aeabi_ddiv>
 8008b3e:	e7e8      	b.n	8008b12 <__ieee754_sqrt+0x2e>
 8008b40:	1521      	asrs	r1, r4, #20
 8008b42:	d075      	beq.n	8008c30 <__ieee754_sqrt+0x14c>
 8008b44:	07cc      	lsls	r4, r1, #31
 8008b46:	f04f 0400 	mov.w	r4, #0
 8008b4a:	f3c2 0213 	ubfx	r2, r2, #0, #20
 8008b4e:	f2a1 37ff 	subw	r7, r1, #1023	; 0x3ff
 8008b52:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8008b56:	bf5e      	ittt	pl
 8008b58:	0fd9      	lsrpl	r1, r3, #31
 8008b5a:	005b      	lslpl	r3, r3, #1
 8008b5c:	eb01 0242 	addpl.w	r2, r1, r2, lsl #1
 8008b60:	0fd9      	lsrs	r1, r3, #31
 8008b62:	eb01 0242 	add.w	r2, r1, r2, lsl #1
 8008b66:	2516      	movs	r5, #22
 8008b68:	4620      	mov	r0, r4
 8008b6a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8008b6e:	107f      	asrs	r7, r7, #1
 8008b70:	005b      	lsls	r3, r3, #1
 8008b72:	1846      	adds	r6, r0, r1
 8008b74:	4296      	cmp	r6, r2
 8008b76:	bfde      	ittt	le
 8008b78:	1b92      	suble	r2, r2, r6
 8008b7a:	1870      	addle	r0, r6, r1
 8008b7c:	1864      	addle	r4, r4, r1
 8008b7e:	0052      	lsls	r2, r2, #1
 8008b80:	3d01      	subs	r5, #1
 8008b82:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 8008b86:	ea4f 0151 	mov.w	r1, r1, lsr #1
 8008b8a:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8008b8e:	d1f0      	bne.n	8008b72 <__ieee754_sqrt+0x8e>
 8008b90:	4629      	mov	r1, r5
 8008b92:	f04f 0e20 	mov.w	lr, #32
 8008b96:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 8008b9a:	4282      	cmp	r2, r0
 8008b9c:	eb06 0c05 	add.w	ip, r6, r5
 8008ba0:	dc02      	bgt.n	8008ba8 <__ieee754_sqrt+0xc4>
 8008ba2:	d113      	bne.n	8008bcc <__ieee754_sqrt+0xe8>
 8008ba4:	459c      	cmp	ip, r3
 8008ba6:	d811      	bhi.n	8008bcc <__ieee754_sqrt+0xe8>
 8008ba8:	f1bc 0f00 	cmp.w	ip, #0
 8008bac:	eb0c 0506 	add.w	r5, ip, r6
 8008bb0:	da43      	bge.n	8008c3a <__ieee754_sqrt+0x156>
 8008bb2:	2d00      	cmp	r5, #0
 8008bb4:	db41      	blt.n	8008c3a <__ieee754_sqrt+0x156>
 8008bb6:	f100 0801 	add.w	r8, r0, #1
 8008bba:	1a12      	subs	r2, r2, r0
 8008bbc:	4640      	mov	r0, r8
 8008bbe:	459c      	cmp	ip, r3
 8008bc0:	bf88      	it	hi
 8008bc2:	f102 32ff 	addhi.w	r2, r2, #4294967295
 8008bc6:	eba3 030c 	sub.w	r3, r3, ip
 8008bca:	4431      	add	r1, r6
 8008bcc:	ea4f 7cd3 	mov.w	ip, r3, lsr #31
 8008bd0:	f1be 0e01 	subs.w	lr, lr, #1
 8008bd4:	eb0c 0242 	add.w	r2, ip, r2, lsl #1
 8008bd8:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8008bdc:	ea4f 0656 	mov.w	r6, r6, lsr #1
 8008be0:	d1db      	bne.n	8008b9a <__ieee754_sqrt+0xb6>
 8008be2:	4313      	orrs	r3, r2
 8008be4:	d006      	beq.n	8008bf4 <__ieee754_sqrt+0x110>
 8008be6:	1c48      	adds	r0, r1, #1
 8008be8:	bf0b      	itete	eq
 8008bea:	4671      	moveq	r1, lr
 8008bec:	3101      	addne	r1, #1
 8008bee:	3401      	addeq	r4, #1
 8008bf0:	f021 0101 	bicne.w	r1, r1, #1
 8008bf4:	1063      	asrs	r3, r4, #1
 8008bf6:	0849      	lsrs	r1, r1, #1
 8008bf8:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 8008bfc:	07e2      	lsls	r2, r4, #31
 8008bfe:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 8008c02:	bf48      	it	mi
 8008c04:	f041 4100 	orrmi.w	r1, r1, #2147483648	; 0x80000000
 8008c08:	460e      	mov	r6, r1
 8008c0a:	eb03 5507 	add.w	r5, r3, r7, lsl #20
 8008c0e:	e782      	b.n	8008b16 <__ieee754_sqrt+0x32>
 8008c10:	0ada      	lsrs	r2, r3, #11
 8008c12:	3815      	subs	r0, #21
 8008c14:	055b      	lsls	r3, r3, #21
 8008c16:	2a00      	cmp	r2, #0
 8008c18:	d0fa      	beq.n	8008c10 <__ieee754_sqrt+0x12c>
 8008c1a:	02d5      	lsls	r5, r2, #11
 8008c1c:	d50a      	bpl.n	8008c34 <__ieee754_sqrt+0x150>
 8008c1e:	f1c1 0420 	rsb	r4, r1, #32
 8008c22:	fa23 f404 	lsr.w	r4, r3, r4
 8008c26:	1e4d      	subs	r5, r1, #1
 8008c28:	408b      	lsls	r3, r1
 8008c2a:	4322      	orrs	r2, r4
 8008c2c:	1b41      	subs	r1, r0, r5
 8008c2e:	e789      	b.n	8008b44 <__ieee754_sqrt+0x60>
 8008c30:	4608      	mov	r0, r1
 8008c32:	e7f0      	b.n	8008c16 <__ieee754_sqrt+0x132>
 8008c34:	0052      	lsls	r2, r2, #1
 8008c36:	3101      	adds	r1, #1
 8008c38:	e7ef      	b.n	8008c1a <__ieee754_sqrt+0x136>
 8008c3a:	4680      	mov	r8, r0
 8008c3c:	e7bd      	b.n	8008bba <__ieee754_sqrt+0xd6>
 8008c3e:	bf00      	nop
 8008c40:	7ff00000 	.word	0x7ff00000

08008c44 <with_errno>:
 8008c44:	b570      	push	{r4, r5, r6, lr}
 8008c46:	4604      	mov	r4, r0
 8008c48:	460d      	mov	r5, r1
 8008c4a:	4616      	mov	r6, r2
 8008c4c:	f7fc fc50 	bl	80054f0 <__errno>
 8008c50:	4629      	mov	r1, r5
 8008c52:	6006      	str	r6, [r0, #0]
 8008c54:	4620      	mov	r0, r4
 8008c56:	bd70      	pop	{r4, r5, r6, pc}

08008c58 <xflow>:
 8008c58:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008c5a:	4615      	mov	r5, r2
 8008c5c:	461c      	mov	r4, r3
 8008c5e:	b180      	cbz	r0, 8008c82 <xflow+0x2a>
 8008c60:	4610      	mov	r0, r2
 8008c62:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8008c66:	e9cd 0100 	strd	r0, r1, [sp]
 8008c6a:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008c6e:	4628      	mov	r0, r5
 8008c70:	4621      	mov	r1, r4
 8008c72:	f7f7 fc29 	bl	80004c8 <__aeabi_dmul>
 8008c76:	2222      	movs	r2, #34	; 0x22
 8008c78:	b003      	add	sp, #12
 8008c7a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008c7e:	f7ff bfe1 	b.w	8008c44 <with_errno>
 8008c82:	4610      	mov	r0, r2
 8008c84:	4619      	mov	r1, r3
 8008c86:	e7ee      	b.n	8008c66 <xflow+0xe>

08008c88 <__math_uflow>:
 8008c88:	2200      	movs	r2, #0
 8008c8a:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8008c8e:	f7ff bfe3 	b.w	8008c58 <xflow>

08008c92 <__math_oflow>:
 8008c92:	2200      	movs	r2, #0
 8008c94:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 8008c98:	f7ff bfde 	b.w	8008c58 <xflow>

08008c9c <fabs>:
 8008c9c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8008ca0:	4770      	bx	lr

08008ca2 <finite>:
 8008ca2:	f041 4000 	orr.w	r0, r1, #2147483648	; 0x80000000
 8008ca6:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 8008caa:	0fc0      	lsrs	r0, r0, #31
 8008cac:	4770      	bx	lr
	...

08008cb0 <scalbn>:
 8008cb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008cb2:	f3c1 560a 	ubfx	r6, r1, #20, #11
 8008cb6:	4604      	mov	r4, r0
 8008cb8:	460d      	mov	r5, r1
 8008cba:	4617      	mov	r7, r2
 8008cbc:	460b      	mov	r3, r1
 8008cbe:	b996      	cbnz	r6, 8008ce6 <scalbn+0x36>
 8008cc0:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8008cc4:	4303      	orrs	r3, r0
 8008cc6:	d039      	beq.n	8008d3c <scalbn+0x8c>
 8008cc8:	4b33      	ldr	r3, [pc, #204]	; (8008d98 <scalbn+0xe8>)
 8008cca:	2200      	movs	r2, #0
 8008ccc:	f7f7 fbfc 	bl	80004c8 <__aeabi_dmul>
 8008cd0:	4b32      	ldr	r3, [pc, #200]	; (8008d9c <scalbn+0xec>)
 8008cd2:	4604      	mov	r4, r0
 8008cd4:	429f      	cmp	r7, r3
 8008cd6:	460d      	mov	r5, r1
 8008cd8:	da0f      	bge.n	8008cfa <scalbn+0x4a>
 8008cda:	a32b      	add	r3, pc, #172	; (adr r3, 8008d88 <scalbn+0xd8>)
 8008cdc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ce0:	f7f7 fbf2 	bl	80004c8 <__aeabi_dmul>
 8008ce4:	e006      	b.n	8008cf4 <scalbn+0x44>
 8008ce6:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8008cea:	4296      	cmp	r6, r2
 8008cec:	d10a      	bne.n	8008d04 <scalbn+0x54>
 8008cee:	4602      	mov	r2, r0
 8008cf0:	f7f7 fa34 	bl	800015c <__adddf3>
 8008cf4:	4604      	mov	r4, r0
 8008cf6:	460d      	mov	r5, r1
 8008cf8:	e020      	b.n	8008d3c <scalbn+0x8c>
 8008cfa:	460b      	mov	r3, r1
 8008cfc:	f3c1 510a 	ubfx	r1, r1, #20, #11
 8008d00:	f1a1 0636 	sub.w	r6, r1, #54	; 0x36
 8008d04:	f240 72fe 	movw	r2, #2046	; 0x7fe
 8008d08:	19b9      	adds	r1, r7, r6
 8008d0a:	4291      	cmp	r1, r2
 8008d0c:	dd0e      	ble.n	8008d2c <scalbn+0x7c>
 8008d0e:	f005 4400 	and.w	r4, r5, #2147483648	; 0x80000000
 8008d12:	f044 41fc 	orr.w	r1, r4, #2113929216	; 0x7e000000
 8008d16:	f441 115f 	orr.w	r1, r1, #3653632	; 0x37c000
 8008d1a:	f441 5110 	orr.w	r1, r1, #9216	; 0x2400
 8008d1e:	4820      	ldr	r0, [pc, #128]	; (8008da0 <scalbn+0xf0>)
 8008d20:	f041 013c 	orr.w	r1, r1, #60	; 0x3c
 8008d24:	a31a      	add	r3, pc, #104	; (adr r3, 8008d90 <scalbn+0xe0>)
 8008d26:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d2a:	e7d9      	b.n	8008ce0 <scalbn+0x30>
 8008d2c:	2900      	cmp	r1, #0
 8008d2e:	dd08      	ble.n	8008d42 <scalbn+0x92>
 8008d30:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8008d34:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8008d38:	ea43 5501 	orr.w	r5, r3, r1, lsl #20
 8008d3c:	4620      	mov	r0, r4
 8008d3e:	4629      	mov	r1, r5
 8008d40:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008d42:	f111 0f35 	cmn.w	r1, #53	; 0x35
 8008d46:	da12      	bge.n	8008d6e <scalbn+0xbe>
 8008d48:	f24c 3350 	movw	r3, #50000	; 0xc350
 8008d4c:	429f      	cmp	r7, r3
 8008d4e:	ea4f 73d5 	mov.w	r3, r5, lsr #31
 8008d52:	ea4f 74c3 	mov.w	r4, r3, lsl #31
 8008d56:	dcdc      	bgt.n	8008d12 <scalbn+0x62>
 8008d58:	a30b      	add	r3, pc, #44	; (adr r3, 8008d88 <scalbn+0xd8>)
 8008d5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d5e:	f044 71d2 	orr.w	r1, r4, #27525120	; 0x1a40000
 8008d62:	f441 31b7 	orr.w	r1, r1, #93696	; 0x16e00
 8008d66:	480f      	ldr	r0, [pc, #60]	; (8008da4 <scalbn+0xf4>)
 8008d68:	f041 011f 	orr.w	r1, r1, #31
 8008d6c:	e7b8      	b.n	8008ce0 <scalbn+0x30>
 8008d6e:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8008d72:	3136      	adds	r1, #54	; 0x36
 8008d74:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8008d78:	ea43 5501 	orr.w	r5, r3, r1, lsl #20
 8008d7c:	4620      	mov	r0, r4
 8008d7e:	4629      	mov	r1, r5
 8008d80:	2200      	movs	r2, #0
 8008d82:	4b09      	ldr	r3, [pc, #36]	; (8008da8 <scalbn+0xf8>)
 8008d84:	e7ac      	b.n	8008ce0 <scalbn+0x30>
 8008d86:	bf00      	nop
 8008d88:	c2f8f359 	.word	0xc2f8f359
 8008d8c:	01a56e1f 	.word	0x01a56e1f
 8008d90:	8800759c 	.word	0x8800759c
 8008d94:	7e37e43c 	.word	0x7e37e43c
 8008d98:	43500000 	.word	0x43500000
 8008d9c:	ffff3cb0 	.word	0xffff3cb0
 8008da0:	8800759c 	.word	0x8800759c
 8008da4:	c2f8f359 	.word	0xc2f8f359
 8008da8:	3c900000 	.word	0x3c900000

08008dac <_init>:
 8008dac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008dae:	bf00      	nop
 8008db0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008db2:	bc08      	pop	{r3}
 8008db4:	469e      	mov	lr, r3
 8008db6:	4770      	bx	lr

08008db8 <_fini>:
 8008db8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008dba:	bf00      	nop
 8008dbc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008dbe:	bc08      	pop	{r3}
 8008dc0:	469e      	mov	lr, r3
 8008dc2:	4770      	bx	lr
